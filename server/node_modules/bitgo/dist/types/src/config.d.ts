import { EnvironmentName } from './v2/environments';
import { OfcTokenConfig } from './v2/coins/ofcToken';
import { Erc20TokenConfig } from './v2/coins/erc20Token';
import { StellarTokenConfig } from './v2/coins/stellarToken';
export interface Tokens {
    bitcoin: {
        eth: {
            tokens: Erc20TokenConfig[];
        };
        xlm: {
            tokens: StellarTokenConfig[];
        };
        ofc: {
            tokens: OfcTokenConfig[];
        };
    };
    testnet: {
        eth: {
            tokens: Erc20TokenConfig[];
        };
        xlm: {
            tokens: StellarTokenConfig[];
        };
        ofc: {
            tokens: OfcTokenConfig[];
        };
    };
}
export declare const tokens: Tokens;
export declare const mainnetTokens: {};
export declare const testnetTokens: {};
export declare const defaults: {
    maxFee: number;
    maxFeeRate: number;
    minFeeRate: number;
    fallbackFeeRate: number;
    minOutputSize: number;
    minInstantFeeRate: number;
    bitgoEthAddress: string;
};
export declare const supportedCrossChainRecoveries: {
    btc: string[];
    bch: string[];
    ltc: string[];
    bsv: string[];
};
export declare const krsProviders: {
    keyternal: {
        feeType: string;
        feeAmount: number;
        supportedCoins: string[];
        feeAddresses: {
            btc: string;
        };
    };
    bitgoKRSv2: {
        feeType: string;
        feeAmount: number;
        supportedCoins: string[];
    };
    dai: {
        feeType: string;
        feeAmount: number;
        supportedCoins: string[];
    };
};
export declare const bitcoinAverageBaseUrl = "https://apiv2.bitcoinaverage.com/indices/local/ticker/";
/**
 * Get the default (hardcoded) constants for a particular network.
 *
 * Note that this may not be the complete set of constants, and additional constants may get fetched
 * from BitGo during the lifespan of a BitGo object.
 * @param env
 */
export declare const defaultConstants: (env: EnvironmentName) => ({
    maxFee: number;
    maxFeeRate: number;
    minFeeRate: number;
    fallbackFeeRate: number;
    minOutputSize: number;
    minInstantFeeRate: number;
    bitgoEthAddress: string;
} & {
    eth: {
        tokens: Erc20TokenConfig[];
    };
    xlm: {
        tokens: StellarTokenConfig[];
    };
    ofc: {
        tokens: OfcTokenConfig[];
    };
}) | ({
    maxFee: number;
    maxFeeRate: number;
    minFeeRate: number;
    fallbackFeeRate: number;
    minOutputSize: number;
    minInstantFeeRate: number;
    bitgoEthAddress: string;
} & {
    eth: {
        tokens: Erc20TokenConfig[];
    };
    xlm: {
        tokens: StellarTokenConfig[];
    };
    ofc: {
        tokens: OfcTokenConfig[];
    };
});
//# sourceMappingURL=config.d.ts.map