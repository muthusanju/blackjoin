/// <reference types="node" />
import { BaseCoin, KeyPair, ParsedTransaction, ParseTransactionOptions, SignedTransaction, SignTransactionOptions, VerifyAddressOptions, VerifyTransactionOptions } from '../baseCoin';
import { BitGo } from '../../bitgo';
import * as Bluebird from 'bluebird';
import { NodeCallback } from '../types';
export declare class Ofc extends BaseCoin {
    static createInstance(bitgo: BitGo): BaseCoin;
    getChain(): string;
    /**
     * Generate secp256k1 key pair
     *
     * @param seed
     * @returns {Object} object with generated pub and prv
     */
    generateKeyPair(seed?: Buffer): KeyPair;
    getFamily(): string;
    getFullName(): string;
    /**
     * Return whether the given m of n wallet signers/ key amounts are valid for the coin
     */
    isValidMofNSetup({ m, n }: {
        m: number;
        n: number;
    }): boolean;
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPub(pub: string): boolean;
    isValidAddress(address: string): boolean;
    getBaseFactor(): number | string;
    parseTransaction(params: ParseTransactionOptions, callback?: NodeCallback<ParsedTransaction>): Bluebird<ParsedTransaction>;
    verifyAddress(params: VerifyAddressOptions): boolean;
    verifyTransaction(params: VerifyTransactionOptions, callback?: NodeCallback<boolean>): Bluebird<boolean>;
    signTransaction(params: SignTransactionOptions): SignedTransaction;
}
//# sourceMappingURL=ofc.d.ts.map