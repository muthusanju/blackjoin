/// <reference types="node" />
/**
 * @prettier
 */
import { BitGo } from '../../bitgo';
import { BaseCoin, KeyPair, ParsedTransaction, ParseTransactionOptions, SignedTransaction, SignTransactionOptions, VerifyAddressOptions, VerifyTransactionOptions } from '../baseCoin';
import { NodeCallback } from '../types';
import * as Bluebird from 'bluebird';
export declare class Susd extends BaseCoin {
    static createInstance(bitgo: BitGo): BaseCoin;
    /**
     * Returns the factor between the base unit and its smallest subdivison
     * @return {number}
     */
    getBaseFactor(): number;
    getChain(): string;
    getFamily(): string;
    getFullName(): string;
    /**
     * Return whether the given m of n wallet signers/ key amounts are valid for the coin
     */
    isValidMofNSetup({ m, n }: {
        m: number;
        n: number;
    }): boolean;
    isValidAddress(address: string): boolean;
    generateKeyPair(seed?: Buffer): KeyPair;
    isValidPub(pub: string): boolean;
    parseTransaction(params: ParseTransactionOptions, callback?: NodeCallback<ParsedTransaction>): Bluebird<ParsedTransaction>;
    verifyAddress(params: VerifyAddressOptions): boolean;
    verifyTransaction(params: VerifyTransactionOptions, callback?: NodeCallback<boolean>): Bluebird<boolean>;
    signTransaction(params?: SignTransactionOptions): SignedTransaction;
}
//# sourceMappingURL=susd.d.ts.map