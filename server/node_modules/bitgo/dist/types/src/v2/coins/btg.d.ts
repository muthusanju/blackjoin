/// <reference types="node" />
import { BitGo } from '../../bitgo';
import { BaseCoin, VerifyRecoveryTransactionOptions } from '../baseCoin';
import { Btc } from './btc';
import * as Bluebird from 'bluebird';
export declare class Btg extends Btc {
    constructor(bitgo: BitGo, network?: any);
    static createInstance(bitgo: any): BaseCoin;
    getChain(): string;
    getFamily(): string;
    getFullName(): string;
    supportsBlockTarget(): boolean;
    supportsP2shP2wsh(): boolean;
    supportsP2wsh(): boolean;
    /**
     *
     * @param txBuilder
     * @returns {*}
     */
    prepareTransactionBuilder(txBuilder: any): any;
    /**
     *
     * @returns {number}
     */
    readonly defaultSigHashType: number;
    /**
     * Calculate the hash to verify the signature against
     * @param transaction Transaction object
     * @param inputIndex
     * @param pubScript
     * @param amount The previous output's amount
     * @param hashType
     * @param isSegwitInput
     * @returns {*}
     */
    calculateSignatureHash(transaction: any, inputIndex: any, pubScript: any, amount: any, hashType: any, isSegwitInput: any): Buffer;
    recoveryBlockchainExplorerUrl(url: string): string;
    getAddressInfoFromExplorer(addressBase58: string): Bluebird<any>;
    getUnspentInfoFromExplorer(addressBase58: string): Bluebird<any>;
    verifyRecoveryTransaction(txInfo: VerifyRecoveryTransactionOptions): Bluebird<any>;
}
//# sourceMappingURL=btg.d.ts.map