import { BitGo } from '../../bitgo';
import { BaseCoin } from '../baseCoin';
import { AbstractUtxoCoin, AddressInfo, ExplainTransactionOptions, TransactionExplanation, UnspentInfo, GenerateAddressOptions, AddressDetails, SignTransactionOptions, VerifyAddressOptions } from './abstractUtxoCoin';
import { NodeCallback } from '../types';
import * as Bluebird from 'bluebird';
export declare class Rmg extends AbstractUtxoCoin {
    constructor(bitgo: BitGo, network?: any);
    static createInstance(bitgo: BitGo): BaseCoin;
    /**
     * Returns the factor between the base unit and its smallest subdivison
     * @return {number}
     */
    getBaseFactor(): number;
    getChain(): string;
    getFamily(): string;
    getFullName(): string;
    isValidAddress(address: string): boolean;
    /**
     * Make sure an address is valid and throw an error if it's not.
     * @param address The address string on the network
     * @param keychains Keychain objects with xpubs
     * @param chain Derivation chain
     * @param index Derivation index
     */
    verifyAddress(params: VerifyAddressOptions): boolean;
    /**
     * Generate an address for a wallet based on a set of configurations
     * @param keychains Array of objects with xpubs
     * @param threshold Minimum number of signatures
     * @param chain Derivation chain
     * @param index Derivation index
     * @returns {{chain: number, index: number, coin: number, coinSpecific: {outputScript}}}
     */
    generateAddress(params: GenerateAddressOptions): AddressDetails;
    /**
     * Assemble keychain and half-sign prebuilt transaction
     * @param params
     * - txPrebuild
     * - prv
     * @returns {{txHex}}
     */
    signTransaction(params: SignTransactionOptions): {
        txHex: string;
    };
    /**
     * Verify the signature(s) on a (half-signed) transaction
     * @param transaction provajs-lib tx object
     * @param inputIndex The input whose signature is to be verified
     * @param amount The input amount needs to be known for signature verification
     * @param verificationSettings
     * @param verificationSettings.signatureIndex The index of the signature to verify (only iterates over non-empty signatures)
     * @param verificationSettings.publicKey The hex of the public key to verify (will verify all signatures)
     * @returns {boolean}
     */
    verifySignature(transaction: any, inputIndex: number, amount?: number, verificationSettings?: {
        signatureIndex?: number;
        publicKey?: string;
    }): boolean;
    /**
     * Explain/parse transaction
     * @param params
     * @param callback
     */
    explainTransaction(params: ExplainTransactionOptions, callback?: NodeCallback<TransactionExplanation>): Bluebird<TransactionExplanation>;
    protected getAddressInfoFromExplorer(address: string): Bluebird<AddressInfo>;
    protected getUnspentInfoFromExplorer(address: string): Bluebird<UnspentInfo[]>;
}
//# sourceMappingURL=rmg.d.ts.map