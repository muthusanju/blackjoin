import * as Bluebird from 'bluebird';
import { BitGo } from '../../bitgo';
import { BaseCoin } from '../baseCoin';
import { AbstractUtxoCoin, AddressInfo, UnspentInfo } from './abstractUtxoCoin';
export declare class Bch extends AbstractUtxoCoin {
    protected constructor(bitgo: BitGo, network?: any);
    static createInstance(bitgo: BitGo): BaseCoin;
    getChain(): string;
    getFamily(): string;
    getFullName(): string;
    getAddressPrefix(): string;
    supportsBlockTarget(): boolean;
    /**
     * Canonicalize a Bitcoin Cash address for a specific version
     *
     * Starting on January 14th, 2018 Bitcoin Cash's bitcoin-abc node switched over to using cashaddr
     * encoding for all of their addresses in order to distinguish them from Bitcoin Core's.
     * https://www.bitcoinabc.org/cashaddr. We're sticking with the old base58 format because
     * migrating over to the new format will be laborious, and we want to see how the space evolves
     *
     * @param address
     * @param version the version of the desired address, 'base58' or 'cashaddr', defaulting to 'base58', 'bech32' is also
     *                supported for backwards compatibility but is deprecated and will be removed
     * @returns {*} address string
     */
    canonicalAddress(address: any, version?: string): any;
    /**
     * Checks if the unspent comes from the BitGo taint provider address
     * @param unspent
     * @returns {boolean}
     */
    isBitGoTaintedUnspent(unspent: any): boolean;
    /**
     *
     * @param txBuilder
     * @returns {*}
     */
    prepareTransactionBuilder(txBuilder: any): any;
    /**
     * Calculate the hash to verify the signature against
     * @param transaction Transaction object
     * @param inputIndex
     * @param pubScript
     * @param amount The previous output's amount
     * @param hashType
     * @param isSegwitInput
     * @returns {*}
     */
    calculateSignatureHash(transaction: any, inputIndex: any, pubScript: any, amount: any, hashType: any, isSegwitInput: any): any;
    /**
     *
     * @returns {number}
     */
    readonly defaultSigHashType: number;
    recoveryBlockchainExplorerUrl(url: any): string;
    getAddressInfoFromExplorer(addressBase58: any): Bluebird<AddressInfo>;
    getUnspentInfoFromExplorer(addressBase58: any): Bluebird<UnspentInfo[]>;
}
//# sourceMappingURL=bch.d.ts.map