/// <reference types="node" />
import * as Bluebird from 'bluebird';
import { BitGo } from '../../bitgo';
import { BaseCoin } from '../baseCoin';
import { AbstractUtxoCoin } from './abstractUtxoCoin';
export interface ZecTransactionBuilder {
    setVersion: (number: any) => void;
    setVersionGroupId: (number: any) => void;
}
export declare class Zec extends AbstractUtxoCoin {
    constructor(bitgo: BitGo, network?: any);
    static createInstance(bitgo: BitGo): BaseCoin;
    getChain(): string;
    getFamily(): string;
    getCoinLibrary(): any;
    getFullName(): string;
    supportsBlockTarget(): boolean;
    /**
     *
     * @param txBuilder
     * @returns {*}
     */
    prepareTransactionBuilder(txBuilder: ZecTransactionBuilder): any;
    /**
     * Calculate the hash to verify the signature against
     * @param transaction Transaction object
     * @param inputIndex
     * @param pubScript
     * @param amount The previous output's amount
     * @param hashType
     * @returns {*}
     */
    calculateSignatureHash(transaction: any, inputIndex: number, pubScript: Buffer, amount: number, hashType: number): Buffer;
    recoveryBlockchainExplorerUrl(url: string): string;
    getAddressInfoFromExplorer(addressBase58: string): Bluebird<{
        txCount: number;
        totalBalance: number;
    }>;
    getUnspentInfoFromExplorer(addressBase58: string): Bluebird<{
        address: string;
        amount: number;
        n: number;
    }[]>;
}
//# sourceMappingURL=zec.d.ts.map