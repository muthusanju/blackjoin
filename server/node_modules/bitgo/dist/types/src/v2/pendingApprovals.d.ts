import * as Bluebird from 'bluebird';
import { BitGo } from '../bitgo';
import { PendingApproval } from './pendingApproval';
import { BaseCoin } from './baseCoin';
import { NodeCallback } from './types';
export interface ListPendingApprovalsOptions {
    walletId?: string;
    enterpriseId?: string;
}
export interface GetPendingApprovalOptions {
    id?: string;
}
export interface ListPendingApprovalsResult {
    pendingApprovals: PendingApproval[];
}
export declare class PendingApprovals {
    private readonly bitgo;
    private readonly baseCoin;
    constructor(bitgo: BitGo, baseCoin: BaseCoin);
    /**
     * List the pending approvals available to the user
     * @param params
     * @param callback
     */
    list(params?: ListPendingApprovalsOptions, callback?: NodeCallback<ListPendingApprovalsResult>): Bluebird<ListPendingApprovalsResult>;
    /**
     * Fetch an existing pending approval
     * @param params
     * @param callback
     */
    get(params?: GetPendingApprovalOptions, callback?: NodeCallback<PendingApproval>): Bluebird<PendingApproval>;
}
//# sourceMappingURL=pendingApprovals.d.ts.map