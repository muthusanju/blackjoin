/**
 * @prettier
 * @hidden
 */
/**
 */
import * as Bluebird from 'bluebird';
import { BitGo } from '../../bitgo';
import { NodeCallback } from '../types';
import { Settlement } from './settlement';
import { Payload } from './payload';
import { Trade } from './trade';
import { TradingAccount } from './tradingAccount';
interface CreateSettlementParams {
    requesterAccountId: string;
    payload: Payload;
    signature: string;
    trades: Trade[];
}
interface GetOptions {
    id: string;
    accountId: string;
}
export declare class Settlements {
    private bitgo;
    private enterpriseId;
    private account?;
    constructor(bitgo: BitGo, enterpriseId: string, account?: TradingAccount);
    /**
     * Retrieves all settlements for an enterprise
     * @param callback
     */
    list(callback?: NodeCallback<Settlement[]>): Bluebird<Settlement[]>;
    /**
     * Retrieves a single settlement by its ID.
     * @param id ID of the settlement
     * @param accountId ID of the trading account that the affirmation belongs to
     * @param callback
     */
    get({ id, accountId }: GetOptions, callback?: NodeCallback<Settlement>): Bluebird<Settlement>;
    /**
     * Submits a new settlement for a set of trades.
     * NOTE: This function must be called as tradingAccount.settlements().create(), enterprise.settlements().create() is not a valid call.
     * @param params
     * @param params.requesterAccountId trading account ID that is creating this settlement
     * @param params.payload payload authorizing the movement of funds for the included trades
     * @param params.signature hex-encoded signature of the payload
     * @param params.trades list of trades to settle as part of this settlement
     * @param callback
     */
    create(params: CreateSettlementParams, callback?: NodeCallback<Settlement>): Bluebird<Settlement>;
}
export {};
//# sourceMappingURL=settlements.d.ts.map