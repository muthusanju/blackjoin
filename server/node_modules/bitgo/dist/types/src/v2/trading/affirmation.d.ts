/**
 * @prettier
 * @hidden
 */
/**
 */
import * as Bluebird from 'bluebird';
import { BitGo } from '../../bitgo';
import { NodeCallback } from '../types';
import { Lock } from './lock';
import { Payload } from './payload';
export declare enum AffirmationStatus {
    PENDING = "pending",
    OVERDUE = "overdue",
    REJECTED = "rejected",
    AFFIRMED = "affirmed",
    FAILED = "failed",
    CANCELED = "canceled"
}
export declare class Affirmation {
    private bitgo;
    private enterpriseId;
    id?: string;
    partyAccountId?: string;
    status?: AffirmationStatus;
    settlement?: string;
    lock?: Lock;
    payload?: string;
    createdAt?: Date;
    expireAt?: Date;
    constructor(affirmationData: any, bitgo: BitGo, enterpriseId: string);
    /**
     * Affirms a pending affirmation, authorizing the settlement
     * @param payload payload authorizing the movement of funds from a trading account
     * @param signature signature of the payload with the user key of the trading account
     * @param callback
     */
    affirm(payload: Payload, signature: string, callback?: NodeCallback<void>): Bluebird<void>;
    /**
     * Rejects a pending affirmation, cancelling the settlement
     * @param callback
     */
    reject(callback?: NodeCallback<void>): Bluebird<void>;
    /**
     * Cancels a pending affirmation, cancelling the settlement
     * @param callback
     */
    cancel(callback?: NodeCallback<void>): Bluebird<void>;
    private updateStatus;
    private updateAffirmationData;
}
//# sourceMappingURL=affirmation.d.ts.map