import { NodeCallback } from './types';
import * as Bluebird from 'bluebird';
import { BitGo } from '../bitgo';
import { AbstractUtxoCoin } from './coins/abstractUtxoCoin';
interface CrossChainRecoveryToolOptions {
    bitgo: BitGo;
    sourceCoin?: AbstractUtxoCoin;
    recoveryCoin?: AbstractUtxoCoin;
    logging: boolean;
}
export interface SignRecoveryTransactionOptions {
    prv?: string;
    passphrase: string;
}
export interface BuildRecoveryTransactionOptions {
    wallet: string;
    faultyTxId: string;
    recoveryAddress: string;
}
export interface RecoveryTxInfo {
    inputAmount: number;
    outputAmount: number;
    spendAmount: number;
    inputs: any[];
    outputs: any[];
    externalOutputs: any[];
    changeOutputs: any[];
    minerFee: number;
    payGoFee: number;
    unspents: any[];
}
export interface HalfSignedRecoveryTx {
    txHex: string;
    tx?: string;
}
/**
 * An instance of the recovery tool, which encapsulates the recovery functions
 * Instantiated with parameters:
 *   - bitgo: an instance of the bitgo SDK
 *   - sourceCoin: the coin that needs to be recovered
 *   - recoveryCoin: the type of address the faulty transaction was sent to
 */
export declare class CrossChainRecoveryTool {
    bitgo: BitGo;
    sourceCoin: AbstractUtxoCoin;
    recoveryCoin: AbstractUtxoCoin;
    logging: boolean;
    supportedCoins: string[];
    wallet: any;
    feeRates: {
        [key: string]: number;
    };
    recoveryTx: any;
    logger: any;
    private unspents?;
    txInfo?: RecoveryTxInfo;
    recoveryAddress?: string;
    recoveryAmount?: number;
    halfSignedRecoveryTx?: HalfSignedRecoveryTx;
    constructor(opts: CrossChainRecoveryToolOptions);
    /**
     * Internal logging function (either uses provided logger or console.log, can be turned off)
     * @param args - the arguments to pass to the logger
     * @private
     */
    _log(...args: any[]): void;
    /**
     * Sets the wallet ID of the recoveryCoin wallet. This is needed to find the private keys to sign the transaction.
     * @param walletId {String} wallet ID
     * @param callback
     */
    protected setWallet(walletId?: string, callback?: NodeCallback<any>): Bluebird<void>;
    /**
     * Retrieves and stores the unspents from the faulty transaction
     * @param faultyTxId {String} the txid of the faulty transaction
     * @param callback
     */
    protected findUnspents(faultyTxId?: string, callback?: NodeCallback<any>): Bluebird<any>;
    /**
     * Constructs transaction inputs from a set of unspents.
     * @param unspents {Object[]} array of unspents from the faulty transaction
     * @param callback
     * @returns {Object} partial txInfo object with transaction inputs
     */
    protected buildInputs(unspents?: any, callback?: NodeCallback<any>): Bluebird<any>;
    /**
     * Sets the txInfo.minerFee field by calculating the size of the transaction and multiplying it by the fee rate for
     * the source coin.
     * @param recoveryTx {Object} recovery transaction containing inputs
     * @returns {Number} recovery fee for the transaction
     */
    protected setFees(recoveryTx?: any): number;
    /**
     * Constructs a single output to the recovery address.
     * @param recoveryAddress {String} address to recover funds to
     * @param outputAmount {Number} amount to send to the recovery address
     * @param recoveryFee {Number} miner fee for the transaction
     */
    protected buildOutputs(recoveryAddress: string, outputAmount?: number, recoveryFee?: number): void;
    /**
     * Half-signs the built transaction with the user's private key or keychain
     * @param params
     * @param params.prv {String} private key
     * @param params.passphrase {String} wallet passphrase
     * @param callback
     * @returns {Object} half-signed transaction
     */
    signTransaction(params: SignRecoveryTransactionOptions, callback?: NodeCallback<any>): Bluebird<any>;
    /**
     * Gets the wallet's encrypted keychain, then decrypts it with the wallet passphrase
     * @param passphrase {String} wallet passphrase
     * @param callback
     * @returns {String} decrypted wallet private key
     */
    getKeys(passphrase: string, callback?: NodeCallback<string>): Bluebird<string>;
    buildTransaction(params: BuildRecoveryTransactionOptions, callback?: NodeCallback<any>): Bluebird<any>;
    buildUnsigned(callback?: NodeCallback<any>): Bluebird<any>;
    export(): {
        version: number;
        sourceCoin: string;
        recoveryCoin: string;
        walletId: any;
        recoveryAddress: string | undefined;
        recoveryAmount: number | undefined;
        txHex: string | undefined;
        txInfo: RecoveryTxInfo | undefined;
    };
}
export {};
//# sourceMappingURL=recovery.d.ts.map