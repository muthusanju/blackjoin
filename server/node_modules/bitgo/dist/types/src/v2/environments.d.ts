/**
 * @prettier
 */
import * as bitcoin from 'bitgo-utxo-lib';
import { V1Network, V1RmgNetwork } from './types';
interface EnvironmentTemplate {
    uri?: string;
    networks: {
        btc?: bitcoin.Network;
        tbtc?: bitcoin.Network;
    };
    network: V1Network;
    rmgNetwork: V1RmgNetwork;
    signingAddress: string;
    serverXpub: string;
    hsmXpub: string;
    smartBitApiBaseUrl: string;
    bchExplorerBaseUrl: string;
    bsvExplorerBaseUrl?: string;
    btgExplorerBaseUrl?: string;
    etherscanBaseUrl: string;
    ltcExplorerBaseUrl: string;
    zecExplorerBaseUrl: string;
    dashExplorerBaseUrl: string;
    stellarFederationServerUrl?: string;
    eosNodeUrls: string[];
    tronNodes: {
        full: string;
        solidity: string;
    };
}
export interface Environment extends EnvironmentTemplate {
    uri: string;
    stellarFederationServerUrl: string;
}
export declare const hardcodedPublicKeys: Readonly<{
    serverXpub: {
        prod: string;
        test: string;
    };
    hsmXpub: {
        prod: string;
        test: string;
        dev: string;
    };
}>;
export declare type EnvironmentName = 'prod' | 'rmgProd' | 'staging' | 'rmgStaging' | 'test' | 'rmgTest' | 'dev' | 'latest' | 'rmgLatest' | 'rmgDev' | 'local' | 'localNonSecure' | 'mock' | 'rmgLocal' | 'rmglocalNonSecure' | 'msProd' | 'msTest' | 'msDev' | 'msLatest' | 'adminProd' | 'adminTest' | 'adminDev' | 'adminLatest' | 'custom';
export declare type Environments = {
    [k in EnvironmentName]: Environment;
};
export declare const Environments: Environments;
export {};
//# sourceMappingURL=environments.d.ts.map