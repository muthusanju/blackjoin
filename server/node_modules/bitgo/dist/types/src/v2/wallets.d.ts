import { BitGo } from '../bitgo';
import { BaseCoin, KeychainsTriplet } from './baseCoin';
import { NodeCallback } from './types';
import { PaginationOptions, Wallet } from './wallet';
import * as Bluebird from 'bluebird';
import { RequestTracer as IRequestTracer } from './types';
import { RequestTracer } from './internal/util';
export interface WalletWithKeychains extends KeychainsTriplet {
    wallet: Wallet;
    warning?: string;
}
export interface GetWalletOptions {
    allTokens?: boolean;
    reqId?: IRequestTracer;
    id?: string;
}
export interface GenerateWalletOptions {
    label?: string;
    passphrase?: string;
    userKey?: string;
    backupXpub?: string;
    backupXpubProvider?: string;
    passcodeEncryptionCode?: string;
    enterprise?: string;
    disableTransactionNotifications?: string;
    gasPrice?: string;
    disableKRSEmail?: boolean;
    krsSpecific?: {
        [index: string]: boolean | string | number;
    };
    coldDerivationSeed?: string;
    rootPrivateKey?: string;
}
export interface GetWalletByAddressOptions {
    address?: string;
    reqId?: RequestTracer;
}
export interface UpdateShareOptions {
    walletShareId?: string;
    state?: string;
    encryptedPrv?: string;
}
export interface AcceptShareOptions {
    overrideEncryptedPrv?: string;
    walletShareId?: string;
    userPassword?: string;
    newWalletPassphrase?: string;
}
export interface AddWalletOptions {
    type?: string;
    keys?: string[];
    m?: number;
    n?: number;
    tags?: string[];
    clientFlags?: string[];
    isCold?: boolean;
    isCustodial?: boolean;
    address?: string;
    rootPub?: string;
    rootPrivateKey?: string;
    initializationTxs?: any;
    disableTransactionNotifications?: boolean;
}
export interface ListWalletOptions extends PaginationOptions {
    skip?: number;
    getbalances?: boolean;
    allTokens?: boolean;
}
export declare class Wallets {
    private readonly bitgo;
    private readonly baseCoin;
    constructor(bitgo: BitGo, baseCoin: BaseCoin);
    /**
     * Get a wallet by ID (proxy for getWallet)
     * @param params
     * @param callback
     */
    get(params?: GetWalletOptions, callback?: NodeCallback<Wallet>): Bluebird<Wallet>;
    /**
     * List a user's wallets
     * @param params
     * @param callback
     * @returns {*}
     */
    list(params?: ListWalletOptions, callback?: NodeCallback<{
        wallets: Wallet[];
    }>): Bluebird<{
        wallets: Wallet[];
    }>;
    /**
     * add
     * Add a new wallet (advanced mode).
     * This allows you to manually submit the keys, type, m and n of the wallet
     * Parameters include:
     *    "label": label of the wallet to be shown in UI
     *    "m": number of keys required to unlock wallet (2)
     *    "n": number of keys available on the wallet (3)
     *    "keys": array of keychain ids
     */
    add(params?: AddWalletOptions, callback?: NodeCallback<any>): Bluebird<any>;
    /**
     * Generate a new wallet
     * 1. Creates the user keychain locally on the client, and encrypts it with the provided passphrase
     * 2. If no pub was provided, creates the backup keychain locally on the client, and encrypts it with the provided passphrase
     * 3. Uploads the encrypted user and backup keychains to BitGo
     * 4. Creates the BitGo key on the service
     * 5. Creates the wallet on BitGo with the 3 public keys above
     * @param params
     * @param params.label
     * @param params.passphrase
     * @param params.userKey User xpub
     * @param params.backupXpub Backup xpub
     * @param params.backupXpubProvider
     * @param params.enterprise
     * @param params.disableTransactionNotifications
     * @param params.passcodeEncryptionCode
     * @param params.coldDerivationSeed
     * @param params.gasPrice
     * @param params.disableKRSEmail
     * @param callback
     * @returns {*}
     */
    generateWallet(params?: GenerateWalletOptions, callback?: NodeCallback<WalletWithKeychains>): Bluebird<WalletWithKeychains>;
    /**
     * List the user's wallet shares
     * @param params
     * @param callback
     */
    listShares(params?: {}, callback?: NodeCallback<any>): Bluebird<any>;
    /**
     * Gets a wallet share information, including the encrypted sharing keychain. requires unlock if keychain is present.
     * @param params
     * @param params.walletShareId - the wallet share to get information on
     * @param callback
     */
    getShare(params?: {
        walletShareId?: string;
    }, callback?: NodeCallback<any>): Bluebird<any>;
    /**
     * Update a wallet share
     * @param params.walletShareId - the wallet share to update
     * @param params.state - the new state of the wallet share
     * @param params
     * @param callback
     */
    updateShare(params?: UpdateShareOptions, callback?: NodeCallback<any>): Bluebird<any>;
    /**
     * Resend a wallet share invitation email
     * @param params
     * @param params.walletShareId - the wallet share whose invitiation should be resent
     * @param callback
     */
    resendShareInvite(params?: {
        walletShareId?: string;
    }, callback?: NodeCallback<any>): Bluebird<any>;
    /**
     * Cancel a wallet share
     * @param params
     * @param params.walletShareId - the wallet share to update
     * @param callback
     */
    cancelShare(params?: {
        walletShareId?: string;
    }, callback?: NodeCallback<any>): Bluebird<any>;
    /**
     * Accepts a wallet share, adding the wallet to the user's list
     * Needs a user's password to decrypt the shared key
     *
     * @param params
     * @param params.walletShareId - the wallet share to accept
     * @param params.userPassword - (required if more a keychain was shared) user's password to decrypt the shared wallet
     * @param params.newWalletPassphrase - new wallet passphrase for saving the shared wallet prv.
     *                                     If left blank and a wallet with more than view permissions was shared,
     *                                     then the user's login password is used.
     * @param params.overrideEncryptedPrv - set only if the prv was received out-of-band.
     * @param callback
     */
    acceptShare(params?: AcceptShareOptions, callback?: NodeCallback<any>): Bluebird<any>;
    /**
     * Get a wallet by its ID
     * @param params
     * @param params.id wallet id
     * @param callback
     * @returns {*}
     */
    getWallet(params?: GetWalletOptions, callback?: NodeCallback<Wallet>): Bluebird<Wallet>;
    /**
     * Get a wallet by its address
     * @param params
     * @param params.address wallet address
     * @param callback
     * @returns {*}
     */
    getWalletByAddress(params?: GetWalletByAddressOptions, callback?: NodeCallback<Wallet>): Bluebird<Wallet>;
    /**
     * For any given supported coin, get total balances for all wallets of that
     * coin type on the account.
     * @param params
     * @param callback
     * @returns {*}
     */
    getTotalBalances(params?: {}, callback?: NodeCallback<any>): Bluebird<any>;
}
//# sourceMappingURL=wallets.d.ts.map