"use strict";
/**
 * @hidden
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 */
var common = require("./common");
var bitcoin = require("bitgo-utxo-lib");
var ecurve = require('ecurve');
var curve = ecurve.getCurveByName('secp256k1');
var BigInteger = require('bigi');
var createHmac = require('create-hmac');
var secp256k1;
try {
    secp256k1 = require('secp256k1');
}
catch (err) {
    console.log('running without secp256k1 acceleration');
}
function getNetwork(network) {
    network = network || common.getNetwork();
    return bitcoin.networks[network];
}
exports.getNetwork = getNetwork;
function makeRandomKey() {
    return bitcoin.ECPair.makeRandom({ network: getNetwork() });
}
exports.makeRandomKey = makeRandomKey;
function getKey(network) {
    network = network || getNetwork();
    var k = this.keyPair;
    var result = new bitcoin.ECPair(k.d, k.d ? null : k.Q, { network: network, compressed: k.compressed });
    // Creating Q from d takes ~25ms, so if it's not created, use native bindings to pre-compute
    if (!result.__Q && secp256k1) {
        result.__Q = ecurve.Point.decodeFrom(curve, secp256k1.publicKeyCreate(k.d.toBuffer(32), false));
    }
    return result;
}
bitcoin.HDNode.prototype.getKey = getKey;
/**
 * Derive a child HDNode from a parent HDNode and index. Uses secp256k1 to speed
 * up public key derivations by 100x vs. bitcoinjs-lib implementation.
 *
 * @param   {HDNode} hdnode  parent HDNode
 * @param   {Number} index   child index
 * @returns {HDNode}         derived HDNode
 */
function deriveFast(hdnode, index) {
    // no fast path for private key derivations -- delegate to standard method
    if (!secp256k1 || hdnode.keyPair.d) {
        return hdnode.derive(index);
    }
    var isHardened = index >= bitcoin.HDNode.HIGHEST_BIT;
    if (isHardened) {
        throw new Error('cannot derive hardened key from public key');
    }
    var indexBuffer = new Buffer(4);
    indexBuffer.writeUInt32BE(index, 0);
    // data = serP(point(kpar)) || ser32(index)
    //      = serP(Kpar) || ser32(index)
    var data = Buffer.concat([
        hdnode.keyPair.getPublicKeyBuffer(),
        indexBuffer,
    ]);
    var I = createHmac('sha512', hdnode.chainCode).update(data).digest();
    var IL = I.slice(0, 32);
    var IR = I.slice(32);
    var pIL = BigInteger.fromBuffer(IL);
    // In case parse256(IL) >= n, proceed with the next value for i
    if (pIL.compareTo(curve.n) >= 0) {
        return deriveFast(hdnode, index + 1);
    }
    // Private parent key -> private child key
    // Ki = point(parse256(IL)) + Kpar
    //    = G*IL + Kpar
    // The expensive op is the point multiply -- use secp256k1 lib to do that
    var Ki = ecurve.Point.decodeFrom(curve, secp256k1.publicKeyCreate(IL, false)).add(hdnode.keyPair.Q);
    // In case Ki is the point at infinity, proceed with the next value for i
    if (curve.isInfinity(Ki)) {
        return deriveFast(hdnode, index + 1);
    }
    var keyPair = new bitcoin.ECPair(null, Ki, { network: hdnode.keyPair.network });
    var hd = new bitcoin.HDNode(keyPair, IR);
    hd.depth = hdnode.depth + 1;
    hd.index = index;
    hd.parentFingerprint = hdnode.getFingerprint().readUInt32BE(0);
    return hd;
}
/**
 * Derive a BIP32 path, given a root key
 * We cache keys at each level of hierarchy we derive, to avoid re-deriving (approx 25ms per derivation)
 * @param rootKey key to derive off
 * @returns {*} function which can be used to derive a new HDNode from the root HDNode on a given path
 */
function hdPath(rootKey) {
    var cache = {};
    var derive = function (path) {
        var components = path.split('/').filter(function (c) {
            return c !== '';
        });
        // strip any extraneous / characters
        path = components.join('/');
        if (cache[path]) {
            return cache[path];
        }
        var len = components.length;
        if (len === 0 || len === 1 && components[0] === 'm') {
            return rootKey;
        }
        var parentPath = components.slice(0, len - 1).join('/');
        var parentKey = derive(parentPath);
        var el = components[len - 1];
        var hardened = false;
        if (el[el.length - 1] === "'") {
            hardened = true;
        }
        var index = parseInt(el, 10);
        var derived;
        if (hardened) {
            derived = parentKey.deriveHardened(index);
        }
        else {
            derived = deriveFast(parentKey, index);
        }
        cache[path] = derived;
        return derived;
    };
    function deriveKey(path) {
        var hdNode = derive(path);
        return hdNode.keyPair;
    }
    return {
        derive: derive,
        deriveKey: deriveKey,
    };
}
exports.hdPath = hdPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0Y29pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaXRjb2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSDtHQUNHO0FBQ0gsaUNBQW1DO0FBQ25DLHdDQUEwQztBQUUxQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakMsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNqRCxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkMsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRTFDLElBQUksU0FBUyxDQUFDO0FBRWQsSUFBSTtJQUNGLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7Q0FDbEM7QUFBQyxPQUFPLEdBQUcsRUFBRTtJQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLENBQUMsQ0FBQztDQUN2RDtBQUVELFNBQWdCLFVBQVUsQ0FBQyxPQUFtQjtJQUM1QyxPQUFPLEdBQUcsT0FBTyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN6QyxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUhELGdDQUdDO0FBRUQsU0FBZ0IsYUFBYTtJQUMzQixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRkQsc0NBRUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxPQUF5QjtJQUN2QyxPQUFPLEdBQUcsT0FBTyxJQUFJLFVBQVUsRUFBRSxDQUFDO0lBQ2xDLElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdkIsSUFBTSxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDekcsNEZBQTRGO0lBQzVGLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLFNBQVMsRUFBRTtRQUM1QixNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDakc7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUV6Qzs7Ozs7OztHQU9HO0FBQ0gsU0FBUyxVQUFVLENBQUMsTUFBc0IsRUFBRSxLQUFhO0lBQ3ZELDBFQUEwRTtJQUMxRSxJQUFJLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ2xDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM3QjtJQUVELElBQU0sVUFBVSxHQUFHLEtBQUssSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUN2RCxJQUFJLFVBQVUsRUFBRTtRQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztLQUMvRDtJQUVELElBQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXBDLDJDQUEyQztJQUMzQyxvQ0FBb0M7SUFDcEMsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUN6QixNQUFNLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFO1FBQ25DLFdBQVc7S0FDWixDQUFDLENBQUM7SUFFSCxJQUFNLENBQUMsR0FBRyxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdkUsSUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUIsSUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUV2QixJQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXRDLCtEQUErRDtJQUMvRCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMvQixPQUFPLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3RDO0lBRUQsMENBQTBDO0lBQzFDLGtDQUFrQztJQUNsQyxtQkFBbUI7SUFFbkIseUVBQXlFO0lBQ3pFLElBQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRHLHlFQUF5RTtJQUN6RSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDeEIsT0FBTyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztLQUN0QztJQUVELElBQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNsRixJQUFNLEVBQUUsR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRTNDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDNUIsRUFBRSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDakIsRUFBRSxDQUFDLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixNQUFNLENBQUMsT0FBTztJQUM1QixJQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsSUFBTSxNQUFNLEdBQUcsVUFBUyxJQUFZO1FBQ2xDLElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVMsQ0FBQztZQUNsRCxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxvQ0FBb0M7UUFDcEMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDZixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNwQjtRQUNELElBQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFDOUIsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNuRCxPQUFPLE9BQU8sQ0FBQztTQUNoQjtRQUNELElBQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUQsSUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JDLElBQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFL0IsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO1lBQzdCLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDakI7UUFDRCxJQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9CLElBQUksT0FBTyxDQUFDO1FBQ1osSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLEdBQUcsU0FBUyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQzthQUFNO1lBQ0wsT0FBTyxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDeEM7UUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3RCLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUMsQ0FBQztJQUVGLFNBQVMsU0FBUyxDQUFDLElBQVk7UUFDN0IsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sRUFBRSxNQUFNO1FBQ2QsU0FBUyxFQUFFLFNBQVM7S0FDckIsQ0FBQztBQUNKLENBQUM7QUEzQ0Qsd0JBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaGlkZGVuXG4gKi9cblxuLyoqXG4gKi9cbmltcG9ydCAqIGFzIGNvbW1vbiBmcm9tICcuL2NvbW1vbic7XG5pbXBvcnQgKiBhcyBiaXRjb2luIGZyb20gJ2JpdGdvLXV0eG8tbGliJztcbmltcG9ydCB7IFYxTmV0d29yayB9IGZyb20gJy4vdjIvdHlwZXMnO1xuY29uc3QgZWN1cnZlID0gcmVxdWlyZSgnZWN1cnZlJyk7XG5jb25zdCBjdXJ2ZSA9IGVjdXJ2ZS5nZXRDdXJ2ZUJ5TmFtZSgnc2VjcDI1NmsxJyk7XG5jb25zdCBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpO1xuY29uc3QgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJyk7XG5cbmxldCBzZWNwMjU2azE7XG5cbnRyeSB7XG4gIHNlY3AyNTZrMSA9IHJlcXVpcmUoJ3NlY3AyNTZrMScpO1xufSBjYXRjaCAoZXJyKSB7XG4gIGNvbnNvbGUubG9nKCdydW5uaW5nIHdpdGhvdXQgc2VjcDI1NmsxIGFjY2VsZXJhdGlvbicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV0d29yayhuZXR3b3JrPzogVjFOZXR3b3JrKTogYml0Y29pbi5OZXR3b3JrIHtcbiAgbmV0d29yayA9IG5ldHdvcmsgfHwgY29tbW9uLmdldE5ldHdvcmsoKTtcbiAgcmV0dXJuIGJpdGNvaW4ubmV0d29ya3NbbmV0d29ya107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUmFuZG9tS2V5KCk6IGJpdGNvaW4uRUNQYWlyIHtcbiAgcmV0dXJuIGJpdGNvaW4uRUNQYWlyLm1ha2VSYW5kb20oeyBuZXR3b3JrOiBnZXROZXR3b3JrKCkgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEtleShuZXR3b3JrPzogYml0Y29pbi5OZXR3b3JrKTogYml0Y29pbi5FQ1BhaXIge1xuICBuZXR3b3JrID0gbmV0d29yayB8fCBnZXROZXR3b3JrKCk7XG4gIGNvbnN0IGsgPSB0aGlzLmtleVBhaXI7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBiaXRjb2luLkVDUGFpcihrLmQsIGsuZCA/IG51bGwgOiBrLlEsIHsgbmV0d29yazogbmV0d29yaywgY29tcHJlc3NlZDogay5jb21wcmVzc2VkIH0pO1xuICAvLyBDcmVhdGluZyBRIGZyb20gZCB0YWtlcyB+MjVtcywgc28gaWYgaXQncyBub3QgY3JlYXRlZCwgdXNlIG5hdGl2ZSBiaW5kaW5ncyB0byBwcmUtY29tcHV0ZVxuICBpZiAoIXJlc3VsdC5fX1EgJiYgc2VjcDI1NmsxKSB7XG4gICAgcmVzdWx0Ll9fUSA9IGVjdXJ2ZS5Qb2ludC5kZWNvZGVGcm9tKGN1cnZlLCBzZWNwMjU2azEucHVibGljS2V5Q3JlYXRlKGsuZC50b0J1ZmZlcigzMiksIGZhbHNlKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuYml0Y29pbi5IRE5vZGUucHJvdG90eXBlLmdldEtleSA9IGdldEtleTtcblxuLyoqXG4gKiBEZXJpdmUgYSBjaGlsZCBIRE5vZGUgZnJvbSBhIHBhcmVudCBIRE5vZGUgYW5kIGluZGV4LiBVc2VzIHNlY3AyNTZrMSB0byBzcGVlZFxuICogdXAgcHVibGljIGtleSBkZXJpdmF0aW9ucyBieSAxMDB4IHZzLiBiaXRjb2luanMtbGliIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSAgIHtIRE5vZGV9IGhkbm9kZSAgcGFyZW50IEhETm9kZVxuICogQHBhcmFtICAge051bWJlcn0gaW5kZXggICBjaGlsZCBpbmRleFxuICogQHJldHVybnMge0hETm9kZX0gICAgICAgICBkZXJpdmVkIEhETm9kZVxuICovXG5mdW5jdGlvbiBkZXJpdmVGYXN0KGhkbm9kZTogYml0Y29pbi5IRE5vZGUsIGluZGV4OiBudW1iZXIpOiBiaXRjb2luLkhETm9kZSB7XG4gIC8vIG5vIGZhc3QgcGF0aCBmb3IgcHJpdmF0ZSBrZXkgZGVyaXZhdGlvbnMgLS0gZGVsZWdhdGUgdG8gc3RhbmRhcmQgbWV0aG9kXG4gIGlmICghc2VjcDI1NmsxIHx8IGhkbm9kZS5rZXlQYWlyLmQpIHtcbiAgICByZXR1cm4gaGRub2RlLmRlcml2ZShpbmRleCk7XG4gIH1cblxuICBjb25zdCBpc0hhcmRlbmVkID0gaW5kZXggPj0gYml0Y29pbi5IRE5vZGUuSElHSEVTVF9CSVQ7XG4gIGlmIChpc0hhcmRlbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgZGVyaXZlIGhhcmRlbmVkIGtleSBmcm9tIHB1YmxpYyBrZXknKTtcbiAgfVxuXG4gIGNvbnN0IGluZGV4QnVmZmVyID0gbmV3IEJ1ZmZlcig0KTtcbiAgaW5kZXhCdWZmZXIud3JpdGVVSW50MzJCRShpbmRleCwgMCk7XG5cbiAgLy8gZGF0YSA9IHNlclAocG9pbnQoa3BhcikpIHx8IHNlcjMyKGluZGV4KVxuICAvLyAgICAgID0gc2VyUChLcGFyKSB8fCBzZXIzMihpbmRleClcbiAgY29uc3QgZGF0YSA9IEJ1ZmZlci5jb25jYXQoW1xuICAgIGhkbm9kZS5rZXlQYWlyLmdldFB1YmxpY0tleUJ1ZmZlcigpLFxuICAgIGluZGV4QnVmZmVyLFxuICBdKTtcblxuICBjb25zdCBJID0gY3JlYXRlSG1hYygnc2hhNTEyJywgaGRub2RlLmNoYWluQ29kZSkudXBkYXRlKGRhdGEpLmRpZ2VzdCgpO1xuICBjb25zdCBJTCA9IEkuc2xpY2UoMCwgMzIpO1xuICBjb25zdCBJUiA9IEkuc2xpY2UoMzIpO1xuXG4gIGNvbnN0IHBJTCA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihJTCk7XG5cbiAgLy8gSW4gY2FzZSBwYXJzZTI1NihJTCkgPj0gbiwgcHJvY2VlZCB3aXRoIHRoZSBuZXh0IHZhbHVlIGZvciBpXG4gIGlmIChwSUwuY29tcGFyZVRvKGN1cnZlLm4pID49IDApIHtcbiAgICByZXR1cm4gZGVyaXZlRmFzdChoZG5vZGUsIGluZGV4ICsgMSk7XG4gIH1cblxuICAvLyBQcml2YXRlIHBhcmVudCBrZXkgLT4gcHJpdmF0ZSBjaGlsZCBrZXlcbiAgLy8gS2kgPSBwb2ludChwYXJzZTI1NihJTCkpICsgS3BhclxuICAvLyAgICA9IEcqSUwgKyBLcGFyXG5cbiAgLy8gVGhlIGV4cGVuc2l2ZSBvcCBpcyB0aGUgcG9pbnQgbXVsdGlwbHkgLS0gdXNlIHNlY3AyNTZrMSBsaWIgdG8gZG8gdGhhdFxuICBjb25zdCBLaSA9IGVjdXJ2ZS5Qb2ludC5kZWNvZGVGcm9tKGN1cnZlLCBzZWNwMjU2azEucHVibGljS2V5Q3JlYXRlKElMLCBmYWxzZSkpLmFkZChoZG5vZGUua2V5UGFpci5RKTtcblxuICAvLyBJbiBjYXNlIEtpIGlzIHRoZSBwb2ludCBhdCBpbmZpbml0eSwgcHJvY2VlZCB3aXRoIHRoZSBuZXh0IHZhbHVlIGZvciBpXG4gIGlmIChjdXJ2ZS5pc0luZmluaXR5KEtpKSkge1xuICAgIHJldHVybiBkZXJpdmVGYXN0KGhkbm9kZSwgaW5kZXggKyAxKTtcbiAgfVxuXG4gIGNvbnN0IGtleVBhaXIgPSBuZXcgYml0Y29pbi5FQ1BhaXIobnVsbCwgS2ksIHsgbmV0d29yazogaGRub2RlLmtleVBhaXIubmV0d29yayB9KTtcbiAgY29uc3QgaGQgPSBuZXcgYml0Y29pbi5IRE5vZGUoa2V5UGFpciwgSVIpO1xuXG4gIGhkLmRlcHRoID0gaGRub2RlLmRlcHRoICsgMTtcbiAgaGQuaW5kZXggPSBpbmRleDtcbiAgaGQucGFyZW50RmluZ2VycHJpbnQgPSBoZG5vZGUuZ2V0RmluZ2VycHJpbnQoKS5yZWFkVUludDMyQkUoMCk7XG5cbiAgcmV0dXJuIGhkO1xufVxuXG4vKipcbiAqIERlcml2ZSBhIEJJUDMyIHBhdGgsIGdpdmVuIGEgcm9vdCBrZXlcbiAqIFdlIGNhY2hlIGtleXMgYXQgZWFjaCBsZXZlbCBvZiBoaWVyYXJjaHkgd2UgZGVyaXZlLCB0byBhdm9pZCByZS1kZXJpdmluZyAoYXBwcm94IDI1bXMgcGVyIGRlcml2YXRpb24pXG4gKiBAcGFyYW0gcm9vdEtleSBrZXkgdG8gZGVyaXZlIG9mZlxuICogQHJldHVybnMgeyp9IGZ1bmN0aW9uIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGRlcml2ZSBhIG5ldyBIRE5vZGUgZnJvbSB0aGUgcm9vdCBIRE5vZGUgb24gYSBnaXZlbiBwYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZFBhdGgocm9vdEtleSk6IHsgZGVyaXZlOiAocGF0aDogc3RyaW5nKSA9PiBiaXRjb2luLkhETm9kZTsgZGVyaXZlS2V5OiAocGF0aDogc3RyaW5nKSA9PiBiaXRjb2luLkVDUGFpcjsgfSB7XG4gIGNvbnN0IGNhY2hlID0ge307XG4gIGNvbnN0IGRlcml2ZSA9IGZ1bmN0aW9uKHBhdGg6IHN0cmluZyk6IGJpdGNvaW4uSEROb2RlIHtcbiAgICBjb25zdCBjb21wb25lbnRzID0gcGF0aC5zcGxpdCgnLycpLmZpbHRlcihmdW5jdGlvbihjKSB7XG4gICAgICByZXR1cm4gYyAhPT0gJyc7XG4gICAgfSk7XG4gICAgLy8gc3RyaXAgYW55IGV4dHJhbmVvdXMgLyBjaGFyYWN0ZXJzXG4gICAgcGF0aCA9IGNvbXBvbmVudHMuam9pbignLycpO1xuICAgIGlmIChjYWNoZVtwYXRoXSkge1xuICAgICAgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICAgIH1cbiAgICBjb25zdCBsZW4gPSBjb21wb25lbnRzLmxlbmd0aDtcbiAgICBpZiAobGVuID09PSAwIHx8IGxlbiA9PT0gMSAmJiBjb21wb25lbnRzWzBdID09PSAnbScpIHtcbiAgICAgIHJldHVybiByb290S2V5O1xuICAgIH1cbiAgICBjb25zdCBwYXJlbnRQYXRoID0gY29tcG9uZW50cy5zbGljZSgwLCBsZW4gLSAxKS5qb2luKCcvJyk7XG4gICAgY29uc3QgcGFyZW50S2V5ID0gZGVyaXZlKHBhcmVudFBhdGgpO1xuICAgIGNvbnN0IGVsID0gY29tcG9uZW50c1tsZW4gLSAxXTtcblxuICAgIGxldCBoYXJkZW5lZCA9IGZhbHNlO1xuICAgIGlmIChlbFtlbC5sZW5ndGggLSAxXSA9PT0gXCInXCIpIHtcbiAgICAgIGhhcmRlbmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSBwYXJzZUludChlbCwgMTApO1xuICAgIGxldCBkZXJpdmVkO1xuICAgIGlmIChoYXJkZW5lZCkge1xuICAgICAgZGVyaXZlZCA9IHBhcmVudEtleS5kZXJpdmVIYXJkZW5lZChpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlcml2ZWQgPSBkZXJpdmVGYXN0KHBhcmVudEtleSwgaW5kZXgpO1xuICAgIH1cbiAgICBjYWNoZVtwYXRoXSA9IGRlcml2ZWQ7XG4gICAgcmV0dXJuIGRlcml2ZWQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gZGVyaXZlS2V5KHBhdGg6IHN0cmluZyk6IGJpdGNvaW4uRUNQYWlyIHtcbiAgICBjb25zdCBoZE5vZGUgPSBkZXJpdmUocGF0aCk7XG4gICAgcmV0dXJuIGhkTm9kZS5rZXlQYWlyO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBkZXJpdmU6IGRlcml2ZSxcbiAgICBkZXJpdmVLZXk6IGRlcml2ZUtleSxcbiAgfTtcbn1cbiJdfQ==