"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var _ = require("lodash");
// re-export from here for backwards compatibility reasons
var environments_1 = require("./v2/environments");
exports.Environments = environments_1.Environments;
var bitcoinNetwork;
var rmgNetwork;
/**
 * Set the global Bitcoin network. Used for v1 only.
 *
 * @deprecated
 */
function setNetwork(network) {
    if (network === 'bitcoin') {
        bitcoinNetwork = 'bitcoin';
    }
    else {
        // test network
        bitcoinNetwork = 'testnet';
    }
}
exports.setNetwork = setNetwork;
/**
 * Get the global Bitcoin network. Used for v1 only.
 *
 * @deprecated
 */
function getNetwork() {
    return bitcoinNetwork;
}
exports.getNetwork = getNetwork;
/**
 * Get the global RMG network. Used for v1 only.
 *
 * @deprecated
 */
function getRmgNetwork() {
    return rmgNetwork;
}
exports.getRmgNetwork = getRmgNetwork;
/**
 * Set the global RMG network. Used for v1 only.
 *
 * @deprecated
 */
function setRmgNetwork(network) {
    rmgNetwork = network;
}
exports.setRmgNetwork = setRmgNetwork;
/**
 * Helper function to validate the input parameters to an SDK method.
 * Only validates for strings - if parameter is different, check that manually
 *
 * @deprecated
 * @param params dictionary of parameter key-value pairs
 * @param expectedParams list of expected string parameters
 * @param optionalParams list of optional string parameters
 * @param optionalCallback if callback provided, must be a function
 * @returns true if validated, throws with reason otherwise
 */
function validateParams(params, expectedParams, optionalParams, optionalCallback) {
    if (optionalParams === void 0) { optionalParams = []; }
    if (!_.isObject(params)) {
        throw new Error('Must pass in parameters dictionary');
    }
    expectedParams = expectedParams || [];
    expectedParams.forEach(function (expectedParam) {
        if (!params[expectedParam]) {
            throw new Error('Missing parameter: ' + expectedParam);
        }
        if (!_.isString(params[expectedParam])) {
            throw new Error('Expecting parameter string: ' + expectedParam + ' but found ' + typeof params[expectedParam]);
        }
    });
    optionalParams.forEach(function (optionalParam) {
        if (params[optionalParam] && !_.isString(params[optionalParam])) {
            throw new Error('Expecting parameter string: ' + optionalParam + ' but found ' + typeof params[optionalParam]);
        }
    });
    if (optionalCallback && !_.isFunction(optionalCallback)) {
        throw new Error('illegal callback argument');
    }
    return true;
}
exports.validateParams = validateParams;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztHQUVHO0FBQ0gsMEJBQTRCO0FBRzVCLDBEQUEwRDtBQUMxRCxrREFBaUQ7QUFBeEMsc0NBQUEsWUFBWSxDQUFBO0FBRXJCLElBQUksY0FBeUIsQ0FBQztBQUM5QixJQUFJLFVBQXdCLENBQUM7QUFFN0I7Ozs7R0FJRztBQUNILFNBQWdCLFVBQVUsQ0FBQyxPQUFrQjtJQUMzQyxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7UUFDekIsY0FBYyxHQUFHLFNBQVMsQ0FBQztLQUM1QjtTQUFNO1FBQ0wsZUFBZTtRQUNmLGNBQWMsR0FBRyxTQUFTLENBQUM7S0FDNUI7QUFDSCxDQUFDO0FBUEQsZ0NBT0M7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0IsVUFBVTtJQUN4QixPQUFPLGNBQWMsQ0FBQztBQUN4QixDQUFDO0FBRkQsZ0NBRUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0IsYUFBYTtJQUMzQixPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRkQsc0NBRUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0IsYUFBYSxDQUFDLE9BQXFCO0lBQ2pELFVBQVUsR0FBRyxPQUFPLENBQUM7QUFDdkIsQ0FBQztBQUZELHNDQUVDO0FBRUQ7Ozs7Ozs7Ozs7R0FVRztBQUNILFNBQWdCLGNBQWMsQ0FDNUIsTUFBYyxFQUNkLGNBQXdCLEVBQ3hCLGNBQTZCLEVBQzdCLGdCQUFvQztJQURwQywrQkFBQSxFQUFBLG1CQUE2QjtJQUc3QixJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7S0FDdkQ7SUFFRCxjQUFjLEdBQUcsY0FBYyxJQUFJLEVBQUUsQ0FBQztJQUV0QyxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQVMsYUFBYTtRQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDLENBQUM7U0FDeEQ7UUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRTtZQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixHQUFHLGFBQWEsR0FBRyxhQUFhLEdBQUcsT0FBTyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztTQUNoSDtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFTLGFBQWE7UUFDM0MsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFO1lBQy9ELE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLEdBQUcsYUFBYSxHQUFHLGFBQWEsR0FBRyxPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1NBQ2hIO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLGdCQUFnQixJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1FBQ3ZELE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztLQUM5QztJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQWhDRCx3Q0FnQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBOb2RlQ2FsbGJhY2ssIFYxTmV0d29yaywgVjFSbWdOZXR3b3JrIH0gZnJvbSAnLi92Mi90eXBlcyc7XG5cbi8vIHJlLWV4cG9ydCBmcm9tIGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHJlYXNvbnNcbmV4cG9ydCB7IEVudmlyb25tZW50cyB9IGZyb20gJy4vdjIvZW52aXJvbm1lbnRzJztcblxubGV0IGJpdGNvaW5OZXR3b3JrOiBWMU5ldHdvcms7XG5sZXQgcm1nTmV0d29yazogVjFSbWdOZXR3b3JrO1xuXG4vKipcbiAqIFNldCB0aGUgZ2xvYmFsIEJpdGNvaW4gbmV0d29yay4gVXNlZCBmb3IgdjEgb25seS5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TmV0d29yayhuZXR3b3JrOiBWMU5ldHdvcmspOiB2b2lkIHtcbiAgaWYgKG5ldHdvcmsgPT09ICdiaXRjb2luJykge1xuICAgIGJpdGNvaW5OZXR3b3JrID0gJ2JpdGNvaW4nO1xuICB9IGVsc2Uge1xuICAgIC8vIHRlc3QgbmV0d29ya1xuICAgIGJpdGNvaW5OZXR3b3JrID0gJ3Rlc3RuZXQnO1xuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBnbG9iYWwgQml0Y29pbiBuZXR3b3JrLiBVc2VkIGZvciB2MSBvbmx5LlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXR3b3JrKCk6IFYxTmV0d29yayB7XG4gIHJldHVybiBiaXRjb2luTmV0d29yaztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGdsb2JhbCBSTUcgbmV0d29yay4gVXNlZCBmb3IgdjEgb25seS5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um1nTmV0d29yaygpOiBWMVJtZ05ldHdvcmsge1xuICByZXR1cm4gcm1nTmV0d29yaztcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGdsb2JhbCBSTUcgbmV0d29yay4gVXNlZCBmb3IgdjEgb25seS5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Um1nTmV0d29yayhuZXR3b3JrOiBWMVJtZ05ldHdvcmspOiB2b2lkIHtcbiAgcm1nTmV0d29yayA9IG5ldHdvcms7XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIHZhbGlkYXRlIHRoZSBpbnB1dCBwYXJhbWV0ZXJzIHRvIGFuIFNESyBtZXRob2QuXG4gKiBPbmx5IHZhbGlkYXRlcyBmb3Igc3RyaW5ncyAtIGlmIHBhcmFtZXRlciBpcyBkaWZmZXJlbnQsIGNoZWNrIHRoYXQgbWFudWFsbHlcbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogQHBhcmFtIHBhcmFtcyBkaWN0aW9uYXJ5IG9mIHBhcmFtZXRlciBrZXktdmFsdWUgcGFpcnNcbiAqIEBwYXJhbSBleHBlY3RlZFBhcmFtcyBsaXN0IG9mIGV4cGVjdGVkIHN0cmluZyBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0gb3B0aW9uYWxQYXJhbXMgbGlzdCBvZiBvcHRpb25hbCBzdHJpbmcgcGFyYW1ldGVyc1xuICogQHBhcmFtIG9wdGlvbmFsQ2FsbGJhY2sgaWYgY2FsbGJhY2sgcHJvdmlkZWQsIG11c3QgYmUgYSBmdW5jdGlvblxuICogQHJldHVybnMgdHJ1ZSBpZiB2YWxpZGF0ZWQsIHRocm93cyB3aXRoIHJlYXNvbiBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUGFyYW1zKFxuICBwYXJhbXM6IG9iamVjdCxcbiAgZXhwZWN0ZWRQYXJhbXM6IHN0cmluZ1tdLFxuICBvcHRpb25hbFBhcmFtczogc3RyaW5nW10gPSBbXSxcbiAgb3B0aW9uYWxDYWxsYmFjaz86IE5vZGVDYWxsYmFjazxhbnk+XG4pOiBib29sZWFuIHtcbiAgaWYgKCFfLmlzT2JqZWN0KHBhcmFtcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcGFzcyBpbiBwYXJhbWV0ZXJzIGRpY3Rpb25hcnknKTtcbiAgfVxuXG4gIGV4cGVjdGVkUGFyYW1zID0gZXhwZWN0ZWRQYXJhbXMgfHwgW107XG5cbiAgZXhwZWN0ZWRQYXJhbXMuZm9yRWFjaChmdW5jdGlvbihleHBlY3RlZFBhcmFtKSB7XG4gICAgaWYgKCFwYXJhbXNbZXhwZWN0ZWRQYXJhbV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBwYXJhbWV0ZXI6ICcgKyBleHBlY3RlZFBhcmFtKTtcbiAgICB9XG4gICAgaWYgKCFfLmlzU3RyaW5nKHBhcmFtc1tleHBlY3RlZFBhcmFtXSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0aW5nIHBhcmFtZXRlciBzdHJpbmc6ICcgKyBleHBlY3RlZFBhcmFtICsgJyBidXQgZm91bmQgJyArIHR5cGVvZiBwYXJhbXNbZXhwZWN0ZWRQYXJhbV0pO1xuICAgIH1cbiAgfSk7XG5cbiAgb3B0aW9uYWxQYXJhbXMuZm9yRWFjaChmdW5jdGlvbihvcHRpb25hbFBhcmFtKSB7XG4gICAgaWYgKHBhcmFtc1tvcHRpb25hbFBhcmFtXSAmJiAhXy5pc1N0cmluZyhwYXJhbXNbb3B0aW9uYWxQYXJhbV0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGluZyBwYXJhbWV0ZXIgc3RyaW5nOiAnICsgb3B0aW9uYWxQYXJhbSArICcgYnV0IGZvdW5kICcgKyB0eXBlb2YgcGFyYW1zW29wdGlvbmFsUGFyYW1dKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChvcHRpb25hbENhbGxiYWNrICYmICFfLmlzRnVuY3Rpb24ob3B0aW9uYWxDYWxsYmFjaykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2lsbGVnYWwgY2FsbGJhY2sgYXJndW1lbnQnKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuIl19