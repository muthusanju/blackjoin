"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var environments_1 = require("./v2/environments");
var statics_1 = require("@bitgo/statics");
// Get the list of ERC-20 tokens from statics and format it properly
var formattedErc20Tokens = statics_1.coins.reduce(function (acc, coin) {
    if (coin instanceof statics_1.Erc20Coin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === "mainnet" /* MAINNET */ ? 'eth' : 'teth',
            network: coin.network.type === "mainnet" /* MAINNET */ ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
// Get the list of Stellar tokens from statics and format it properly
var formattedStellarTokens = statics_1.coins.reduce(function (acc, coin) {
    if (coin instanceof statics_1.StellarCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === "mainnet" /* MAINNET */ ? 'xlm' : 'txlm',
            network: coin.network.type === "mainnet" /* MAINNET */ ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
// Get the list of OFC tokens from statics and format it properly
var formattedOfcCoins = statics_1.coins.reduce(function (acc, coin) {
    if (coin instanceof statics_1.OfcCoin) {
        acc.push({
            type: coin.name,
            coin: 'ofc',
            backingCoin: coin.asset,
            name: coin.fullName,
            decimalPlaces: coin.decimalPlaces,
            isFiat: coin.kind === "fiat" /* FIAT */,
        });
    }
    return acc;
}, []);
exports.tokens = {
    // network name for production environments
    bitcoin: {
        eth: {
            tokens: formattedErc20Tokens.filter(function (token) { return token.network === 'Mainnet'; }),
        },
        xlm: {
            tokens: formattedStellarTokens.filter(function (token) { return token.network === 'Mainnet'; }),
        },
        ofc: {
            tokens: formattedOfcCoins.filter(function (token) { return statics_1.coins.get(token.type).network.type === "mainnet" /* MAINNET */; }),
        },
    },
    // network name for test environments
    testnet: {
        eth: {
            tokens: formattedErc20Tokens.filter(function (token) { return token.network === 'Testnet'; }),
        },
        xlm: {
            tokens: formattedStellarTokens.filter(function (token) { return token.network === 'Testnet'; }),
        },
        ofc: {
            tokens: formattedOfcCoins.filter(function (token) { return statics_1.coins.get(token.type).network.type === "testnet" /* TESTNET */; }),
        },
    },
};
/**
 * Verify mainnet or testnet tokens
 * @param tokens
 */
var verifyTokens = function (tokens) {
    var verifiedTokens = {};
    _.forEach(tokens, function (token) {
        if (verifiedTokens[token.type]) {
            throw new Error('token : ' + token.type + ' duplicated.');
        }
        verifiedTokens[token.type] = true;
        if (token.tokenContractAddress && token.tokenContractAddress !== _.toLower(token.tokenContractAddress)) {
            throw new Error('token contract: ' + token.type + ' is not all lower case: ' + token.tokenContractAddress);
        }
    });
    return verifiedTokens;
};
var mainnetErc20Tokens = verifyTokens(exports.tokens.bitcoin.eth.tokens);
var mainnetStellarTokens = verifyTokens(exports.tokens.bitcoin.xlm.tokens);
exports.mainnetTokens = _.assign({}, mainnetErc20Tokens, mainnetStellarTokens);
var testnetErc20Tokens = verifyTokens(exports.tokens.testnet.eth.tokens);
var testnetStellarTokens = verifyTokens(exports.tokens.testnet.xlm.tokens);
exports.testnetTokens = _.assign({}, testnetErc20Tokens, testnetStellarTokens);
exports.defaults = {
    maxFee: 0.1e8,
    maxFeeRate: 1000000,
    minFeeRate: 5000,
    fallbackFeeRate: 50000,
    minOutputSize: 2730,
    minInstantFeeRate: 10000,
    bitgoEthAddress: '0x0f47ea803926926f299b7f1afc8460888d850f47'
};
// Supported cross-chain recovery routes. The coin to be recovered is the index, the valid coins for recipient wallets
// are listed in the array.
exports.supportedCrossChainRecoveries = {
    btc: ['bch', 'ltc', 'bsv'],
    bch: ['btc', 'ltc', 'bsv'],
    ltc: ['btc', 'bch', 'bsv'],
    bsv: ['btc', 'ltc', 'bch']
};
// KRS providers and their fee structures
exports.krsProviders = {
    keyternal: {
        feeType: 'flatUsd',
        feeAmount: 99,
        supportedCoins: ['btc', 'eth'],
        feeAddresses: {
            btc: '' // TODO [BG-6965] Get address from Keyternal - recovery will fail for now until Keyternal is ready
        }
    },
    bitgoKRSv2: {
        feeType: 'flatUsd',
        feeAmount: 0,
        supportedCoins: ['btc', 'eth']
    },
    dai: {
        feeType: 'flatUsd',
        feeAmount: 0,
        supportedCoins: ['btc', 'eth', 'xlm', 'xrp', 'dash', 'zec', 'ltc', 'bch']
    }
};
exports.bitcoinAverageBaseUrl = 'https://apiv2.bitcoinaverage.com/indices/local/ticker/';
// TODO: once server starts returning eth address keychains, remove bitgoEthAddress
/**
 * Get the default (hardcoded) constants for a particular network.
 *
 * Note that this may not be the complete set of constants, and additional constants may get fetched
 * from BitGo during the lifespan of a BitGo object.
 * @param env
 */
exports.defaultConstants = function (env) {
    if (environments_1.Environments[env] === undefined) {
        throw Error("invalid environment " + env);
    }
    var network = environments_1.Environments[env].network;
    return _.merge({}, exports.defaults, exports.tokens[network]);
};
//# sourceMappingURL=data:application/json;base64,