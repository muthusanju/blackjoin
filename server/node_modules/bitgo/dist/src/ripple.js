"use strict";
/**
 * @hidden
 */
/**
 */
var rippleKeypairs = require("ripple-keypairs");
var ripple = require("ripple-lib");
var bitgo_utxo_lib_1 = require("bitgo-utxo-lib");
var binary = require("ripple-binary-codec");
var hashes_1 = require("ripple-lib/dist/npm/common/hashes");
function computeSignature(tx, privateKey, signAs) {
    var signingData = signAs ?
        binary.encodeForMultisigning(tx, signAs) : binary.encodeForSigning(tx);
    return rippleKeypairs.sign(signingData, privateKey);
}
/**
 * Sign Ripple transaction with a secp256k1 private key
 * @param txHex
 * @param privateKey
 * @param options
 * @returns {{signedTransaction: *, id}}
 */
var signWithPrivateKey = function (txHex, privateKey, options) {
    var privateKeyBuffer = new Buffer(privateKey, 'hex');
    if (privateKeyBuffer.length === 33 && privateKeyBuffer[0] === 0) {
        privateKeyBuffer = privateKeyBuffer.slice(1, 33);
    }
    var privateKeyObject = bitgo_utxo_lib_1.ECPair.fromPrivateKeyBuffer(privateKeyBuffer);
    var publicKey = privateKeyObject.getPublicKeyBuffer().toString('hex').toUpperCase();
    var tx;
    try {
        tx = binary.decode(txHex);
    }
    catch (e) {
        try {
            tx = JSON.parse(txHex);
        }
        catch (e) {
            throw new Error('txHex needs to be either hex or JSON string for XRP');
        }
    }
    if (tx.TxnSignature || tx.Signers) {
        throw new Error('transaction must not contain "TxnSignature" or "Signers" properties');
    }
    tx.SigningPubKey = (options && options.signAs) ? '' : publicKey;
    if (options && options.signAs) {
        var expectedSigner = rippleKeypairs.deriveAddress(publicKey);
        if (options.signAs !== expectedSigner) {
            throw new Error('signAs does not match private key');
        }
        var signer = {
            Account: options.signAs,
            SigningPubKey: publicKey,
            TxnSignature: computeSignature(tx, privateKey, options.signAs),
        };
        tx.Signers = [{ Signer: signer }];
    }
    else {
        tx.TxnSignature = computeSignature(tx, privateKey, undefined);
    }
    var serialized = binary.encode(tx);
    return {
        signedTransaction: serialized,
        id: hashes_1.computeBinaryTransactionHash(serialized),
    };
};
module.exports = function (params) {
    var rippleLib = new ripple.RippleAPI(params);
    rippleLib.signWithPrivateKey = signWithPrivateKey;
    return rippleLib;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmlwcGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JpcHBsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7QUFFSDtHQUNHO0FBQ0gsZ0RBQWtEO0FBQ2xELG1DQUFxQztBQUNyQyxpREFBd0M7QUFFeEMsNENBQThDO0FBQzlDLDREQUFpRjtBQUVqRixTQUFTLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTTtJQUM5QyxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMscUJBQXFCLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekUsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsSUFBTSxrQkFBa0IsR0FBRyxVQUFTLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTztJQUM1RCxJQUFJLGdCQUFnQixHQUFHLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyRCxJQUFJLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxFQUFFLElBQUksZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQy9ELGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDbEQ7SUFDRCxJQUFNLGdCQUFnQixHQUFHLHVCQUFNLENBQUMsb0JBQW9CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN2RSxJQUFNLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUV0RixJQUFJLEVBQUUsQ0FBQztJQUNQLElBQUk7UUFDRixFQUFFLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMzQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsSUFBSTtZQUNGLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7U0FDeEU7S0FDRjtJQUNELElBQUksRUFBRSxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFO1FBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMscUVBQXFFLENBQUMsQ0FBQztLQUN4RjtJQUVELEVBQUUsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUVoRSxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1FBQzdCLElBQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0QsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLGNBQWMsRUFBRTtZQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7U0FDdEQ7UUFDRCxJQUFNLE1BQU0sR0FBRztZQUNiLE9BQU8sRUFBRSxPQUFPLENBQUMsTUFBTTtZQUN2QixhQUFhLEVBQUUsU0FBUztZQUN4QixZQUFZLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDO1NBQy9ELENBQUM7UUFDRixFQUFFLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUNuQztTQUFNO1FBQ0wsRUFBRSxDQUFDLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQy9EO0lBRUQsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyQyxPQUFPO1FBQ0wsaUJBQWlCLEVBQUUsVUFBVTtRQUM3QixFQUFFLEVBQUUscUNBQTRCLENBQUMsVUFBVSxDQUFDO0tBQzdDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixpQkFBUyxVQUFDLE1BQU07SUFDZCxJQUFNLFNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUMsU0FBaUIsQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztJQUMzRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBoaWRkZW5cbiAqL1xuXG4vKipcbiAqL1xuaW1wb3J0ICogYXMgcmlwcGxlS2V5cGFpcnMgZnJvbSAncmlwcGxlLWtleXBhaXJzJztcbmltcG9ydCAqIGFzIHJpcHBsZSBmcm9tICdyaXBwbGUtbGliJztcbmltcG9ydCB7IEVDUGFpciB9IGZyb20gJ2JpdGdvLXV0eG8tbGliJztcblxuaW1wb3J0ICogYXMgYmluYXJ5IGZyb20gJ3JpcHBsZS1iaW5hcnktY29kZWMnO1xuaW1wb3J0IHsgY29tcHV0ZUJpbmFyeVRyYW5zYWN0aW9uSGFzaCB9IGZyb20gJ3JpcHBsZS1saWIvZGlzdC9ucG0vY29tbW9uL2hhc2hlcyc7XG5cbmZ1bmN0aW9uIGNvbXB1dGVTaWduYXR1cmUodHgsIHByaXZhdGVLZXksIHNpZ25Bcykge1xuICBjb25zdCBzaWduaW5nRGF0YSA9IHNpZ25BcyA/XG4gICAgYmluYXJ5LmVuY29kZUZvck11bHRpc2lnbmluZyh0eCwgc2lnbkFzKSA6IGJpbmFyeS5lbmNvZGVGb3JTaWduaW5nKHR4KTtcbiAgcmV0dXJuIHJpcHBsZUtleXBhaXJzLnNpZ24oc2lnbmluZ0RhdGEsIHByaXZhdGVLZXkpO1xufVxuXG4vKipcbiAqIFNpZ24gUmlwcGxlIHRyYW5zYWN0aW9uIHdpdGggYSBzZWNwMjU2azEgcHJpdmF0ZSBrZXlcbiAqIEBwYXJhbSB0eEhleFxuICogQHBhcmFtIHByaXZhdGVLZXlcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcmV0dXJucyB7e3NpZ25lZFRyYW5zYWN0aW9uOiAqLCBpZH19XG4gKi9cbmNvbnN0IHNpZ25XaXRoUHJpdmF0ZUtleSA9IGZ1bmN0aW9uKHR4SGV4LCBwcml2YXRlS2V5LCBvcHRpb25zKSB7XG4gIGxldCBwcml2YXRlS2V5QnVmZmVyID0gbmV3IEJ1ZmZlcihwcml2YXRlS2V5LCAnaGV4Jyk7XG4gIGlmIChwcml2YXRlS2V5QnVmZmVyLmxlbmd0aCA9PT0gMzMgJiYgcHJpdmF0ZUtleUJ1ZmZlclswXSA9PT0gMCkge1xuICAgIHByaXZhdGVLZXlCdWZmZXIgPSBwcml2YXRlS2V5QnVmZmVyLnNsaWNlKDEsIDMzKTtcbiAgfVxuICBjb25zdCBwcml2YXRlS2V5T2JqZWN0ID0gRUNQYWlyLmZyb21Qcml2YXRlS2V5QnVmZmVyKHByaXZhdGVLZXlCdWZmZXIpO1xuICBjb25zdCBwdWJsaWNLZXkgPSBwcml2YXRlS2V5T2JqZWN0LmdldFB1YmxpY0tleUJ1ZmZlcigpLnRvU3RyaW5nKCdoZXgnKS50b1VwcGVyQ2FzZSgpO1xuXG4gIGxldCB0eDtcbiAgdHJ5IHtcbiAgICB0eCA9IGJpbmFyeS5kZWNvZGUodHhIZXgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHR4ID0gSlNPTi5wYXJzZSh0eEhleCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0eEhleCBuZWVkcyB0byBiZSBlaXRoZXIgaGV4IG9yIEpTT04gc3RyaW5nIGZvciBYUlAnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR4LlR4blNpZ25hdHVyZSB8fCB0eC5TaWduZXJzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0cmFuc2FjdGlvbiBtdXN0IG5vdCBjb250YWluIFwiVHhuU2lnbmF0dXJlXCIgb3IgXCJTaWduZXJzXCIgcHJvcGVydGllcycpO1xuICB9XG5cbiAgdHguU2lnbmluZ1B1YktleSA9IChvcHRpb25zICYmIG9wdGlvbnMuc2lnbkFzKSA/ICcnIDogcHVibGljS2V5O1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2lnbkFzKSB7XG4gICAgY29uc3QgZXhwZWN0ZWRTaWduZXIgPSByaXBwbGVLZXlwYWlycy5kZXJpdmVBZGRyZXNzKHB1YmxpY0tleSk7XG4gICAgaWYgKG9wdGlvbnMuc2lnbkFzICE9PSBleHBlY3RlZFNpZ25lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaWduQXMgZG9lcyBub3QgbWF0Y2ggcHJpdmF0ZSBrZXknKTtcbiAgICB9XG4gICAgY29uc3Qgc2lnbmVyID0ge1xuICAgICAgQWNjb3VudDogb3B0aW9ucy5zaWduQXMsXG4gICAgICBTaWduaW5nUHViS2V5OiBwdWJsaWNLZXksXG4gICAgICBUeG5TaWduYXR1cmU6IGNvbXB1dGVTaWduYXR1cmUodHgsIHByaXZhdGVLZXksIG9wdGlvbnMuc2lnbkFzKSxcbiAgICB9O1xuICAgIHR4LlNpZ25lcnMgPSBbeyBTaWduZXI6IHNpZ25lciB9XTtcbiAgfSBlbHNlIHtcbiAgICB0eC5UeG5TaWduYXR1cmUgPSBjb21wdXRlU2lnbmF0dXJlKHR4LCBwcml2YXRlS2V5LCB1bmRlZmluZWQpO1xuICB9XG5cbiAgY29uc3Qgc2VyaWFsaXplZCA9IGJpbmFyeS5lbmNvZGUodHgpO1xuICByZXR1cm4ge1xuICAgIHNpZ25lZFRyYW5zYWN0aW9uOiBzZXJpYWxpemVkLFxuICAgIGlkOiBjb21wdXRlQmluYXJ5VHJhbnNhY3Rpb25IYXNoKHNlcmlhbGl6ZWQpLFxuICB9O1xufTtcblxuZXhwb3J0ID0gKHBhcmFtcyk6IHJpcHBsZS5SaXBwbGVBUEkgPT4ge1xuICBjb25zdCByaXBwbGVMaWIgPSBuZXcgcmlwcGxlLlJpcHBsZUFQSShwYXJhbXMpO1xuICAocmlwcGxlTGliIGFzIGFueSkuc2lnbldpdGhQcml2YXRlS2V5ID0gc2lnbldpdGhQcml2YXRlS2V5O1xuICByZXR1cm4gcmlwcGxlTGliO1xufTtcbiJdfQ==