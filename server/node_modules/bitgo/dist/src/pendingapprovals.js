"use strict";
/**
 * @hidden
 */
/**
 */
//
// Pending approvals listing object
// Lists pending approvals and get pending approval objects
//
// Copyright 2015, BitGo, Inc.  All Rights Reserved.
//
var common = require("./common");
var PendingApproval = require('./pendingapproval');
var _ = require("lodash");
//
// Constructor
//
var PendingApprovals = function (bitgo) {
    this.bitgo = bitgo;
};
//
// list
// List the pending approvals available to the user
//
PendingApprovals.prototype.list = function (params, callback) {
    params = params || {};
    common.validateParams(params, [], ['walletId', 'enterpriseId'], callback);
    var queryParams = {};
    if (_.isString(params.walletId)) {
        queryParams.walletId = params.walletId;
    }
    if (_.isString(params.enterpriseId)) {
        queryParams.enterprise = params.enterpriseId;
    }
    if (Object.keys(queryParams).length !== 1) {
        throw new Error('must provide exactly 1 of walletId or enterpriseId to get pending approvals on');
    }
    var self = this;
    return this.bitgo.get(this.bitgo.url('/pendingapprovals'))
        .query(queryParams)
        .result()
        .then(function (body) {
        body.pendingApprovals = body.pendingApprovals.map(function (p) { return new PendingApproval(self.bitgo, p); });
        return body;
    })
        .nodeify(callback);
};
//
// get
// Fetch an existing pending approval
// Parameters include:
//   id:  the pending approval id
//
PendingApprovals.prototype.get = function (params, callback) {
    params = params || {};
    common.validateParams(params, ['id'], [], callback);
    var self = this;
    return this.bitgo.get(this.bitgo.url('/pendingapprovals/' + params.id))
        .result()
        .then(function (body) {
        return new PendingApproval(self.bitgo, body);
    })
        .nodeify(callback);
};
module.exports = PendingApprovals;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVuZGluZ2FwcHJvdmFscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wZW5kaW5nYXBwcm92YWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRztBQUVIO0dBQ0c7QUFDSCxFQUFFO0FBQ0YsbUNBQW1DO0FBQ25DLDJEQUEyRDtBQUMzRCxFQUFFO0FBQ0Ysb0RBQW9EO0FBQ3BELEVBQUU7QUFFRixpQ0FBb0M7QUFDcEMsSUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDckQsMEJBQTRCO0FBRTVCLEVBQUU7QUFDRixjQUFjO0FBQ2QsRUFBRTtBQUNGLElBQU0sZ0JBQWdCLEdBQUcsVUFBUyxLQUFLO0lBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLENBQUMsQ0FBQztBQUVGLEVBQUU7QUFDRixPQUFPO0FBQ1AsbURBQW1EO0FBQ25ELEVBQUU7QUFDRixnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVMsTUFBTSxFQUFFLFFBQVE7SUFDekQsTUFBTSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUM7SUFDdEIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTFFLElBQU0sV0FBVyxHQUFRLEVBQUUsQ0FBQztJQUM1QixJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQy9CLFdBQVcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztLQUN4QztJQUNELElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDbkMsV0FBVyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO0tBQzlDO0lBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDekMsTUFBTSxJQUFJLEtBQUssQ0FBQyxnRkFBZ0YsQ0FBQyxDQUFDO0tBQ25HO0lBRUQsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUN6RCxLQUFLLENBQUMsV0FBVyxDQUFDO1NBQ2xCLE1BQU0sRUFBRTtTQUNSLElBQUksQ0FBQyxVQUFTLElBQUk7UUFDakIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsVUFBUyxDQUFDLElBQUksT0FBTyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUcsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDLENBQUM7U0FDRCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDckIsQ0FBQyxDQUFDO0FBRUYsRUFBRTtBQUNGLE1BQU07QUFDTixxQ0FBcUM7QUFDckMsc0JBQXNCO0FBQ3RCLGlDQUFpQztBQUNqQyxFQUFFO0FBQ0YsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFTLE1BQU0sRUFBRSxRQUFRO0lBQ3hELE1BQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO0lBQ3RCLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRXBELElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQztJQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN0RSxNQUFNLEVBQUU7U0FDUixJQUFJLENBQUMsVUFBUyxJQUFJO1FBQ2pCLE9BQU8sSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUM7U0FDRCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDckIsQ0FBQyxDQUFDO0FBRUYsaUJBQVMsZ0JBQWdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBoaWRkZW5cbiAqL1xuXG4vKipcbiAqL1xuLy9cbi8vIFBlbmRpbmcgYXBwcm92YWxzIGxpc3Rpbmcgb2JqZWN0XG4vLyBMaXN0cyBwZW5kaW5nIGFwcHJvdmFscyBhbmQgZ2V0IHBlbmRpbmcgYXBwcm92YWwgb2JqZWN0c1xuLy9cbi8vIENvcHlyaWdodCAyMDE1LCBCaXRHbywgSW5jLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG5cbmltcG9ydCBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuY29uc3QgUGVuZGluZ0FwcHJvdmFsID0gcmVxdWlyZSgnLi9wZW5kaW5nYXBwcm92YWwnKTtcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuLy9cbi8vIENvbnN0cnVjdG9yXG4vL1xuY29uc3QgUGVuZGluZ0FwcHJvdmFscyA9IGZ1bmN0aW9uKGJpdGdvKSB7XG4gIHRoaXMuYml0Z28gPSBiaXRnbztcbn07XG5cbi8vXG4vLyBsaXN0XG4vLyBMaXN0IHRoZSBwZW5kaW5nIGFwcHJvdmFscyBhdmFpbGFibGUgdG8gdGhlIHVzZXJcbi8vXG5QZW5kaW5nQXBwcm92YWxzLnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24ocGFyYW1zLCBjYWxsYmFjaykge1xuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gIGNvbW1vbi52YWxpZGF0ZVBhcmFtcyhwYXJhbXMsIFtdLCBbJ3dhbGxldElkJywgJ2VudGVycHJpc2VJZCddLCBjYWxsYmFjayk7XG5cbiAgY29uc3QgcXVlcnlQYXJhbXM6IGFueSA9IHt9O1xuICBpZiAoXy5pc1N0cmluZyhwYXJhbXMud2FsbGV0SWQpKSB7XG4gICAgcXVlcnlQYXJhbXMud2FsbGV0SWQgPSBwYXJhbXMud2FsbGV0SWQ7XG4gIH1cbiAgaWYgKF8uaXNTdHJpbmcocGFyYW1zLmVudGVycHJpc2VJZCkpIHtcbiAgICBxdWVyeVBhcmFtcy5lbnRlcnByaXNlID0gcGFyYW1zLmVudGVycHJpc2VJZDtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhxdWVyeVBhcmFtcykubGVuZ3RoICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtdXN0IHByb3ZpZGUgZXhhY3RseSAxIG9mIHdhbGxldElkIG9yIGVudGVycHJpc2VJZCB0byBnZXQgcGVuZGluZyBhcHByb3ZhbHMgb24nKTtcbiAgfVxuXG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICByZXR1cm4gdGhpcy5iaXRnby5nZXQodGhpcy5iaXRnby51cmwoJy9wZW5kaW5nYXBwcm92YWxzJykpXG4gIC5xdWVyeShxdWVyeVBhcmFtcylcbiAgLnJlc3VsdCgpXG4gIC50aGVuKGZ1bmN0aW9uKGJvZHkpIHtcbiAgICBib2R5LnBlbmRpbmdBcHByb3ZhbHMgPSBib2R5LnBlbmRpbmdBcHByb3ZhbHMubWFwKGZ1bmN0aW9uKHApIHsgcmV0dXJuIG5ldyBQZW5kaW5nQXBwcm92YWwoc2VsZi5iaXRnbywgcCk7IH0pO1xuICAgIHJldHVybiBib2R5O1xuICB9KVxuICAubm9kZWlmeShjYWxsYmFjayk7XG59O1xuXG4vL1xuLy8gZ2V0XG4vLyBGZXRjaCBhbiBleGlzdGluZyBwZW5kaW5nIGFwcHJvdmFsXG4vLyBQYXJhbWV0ZXJzIGluY2x1ZGU6XG4vLyAgIGlkOiAgdGhlIHBlbmRpbmcgYXBwcm92YWwgaWRcbi8vXG5QZW5kaW5nQXBwcm92YWxzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihwYXJhbXMsIGNhbGxiYWNrKSB7XG4gIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgY29tbW9uLnZhbGlkYXRlUGFyYW1zKHBhcmFtcywgWydpZCddLCBbXSwgY2FsbGJhY2spO1xuXG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICByZXR1cm4gdGhpcy5iaXRnby5nZXQodGhpcy5iaXRnby51cmwoJy9wZW5kaW5nYXBwcm92YWxzLycgKyBwYXJhbXMuaWQpKVxuICAucmVzdWx0KClcbiAgLnRoZW4oZnVuY3Rpb24oYm9keSkge1xuICAgIHJldHVybiBuZXcgUGVuZGluZ0FwcHJvdmFsKHNlbGYuYml0Z28sIGJvZHkpO1xuICB9KVxuICAubm9kZWlmeShjYWxsYmFjayk7XG59O1xuXG5leHBvcnQgPSBQZW5kaW5nQXBwcm92YWxzO1xuIl19