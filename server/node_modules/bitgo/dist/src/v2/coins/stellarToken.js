"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var _ = require("lodash");
var xlm_1 = require("./xlm");
var errors_1 = require("../../errors");
var stellar = require("stellar-sdk");
var StellarToken = /** @class */ (function (_super) {
    __extends(StellarToken, _super);
    function StellarToken(bitgo, tokenConfig) {
        var _a;
        var _this = _super.call(this, bitgo) || this;
        _this.tokenConfig = tokenConfig;
        var network = _this.tokenConfig.network === 'Testnet' ? stellar.Networks.TESTNET : stellar.Networks.PUBLIC;
        stellar.Network.use(new stellar.Network(network));
        var _b = _.split(_this.tokenConfig.type, xlm_1.Xlm.coinTokenPatternSeparator), tokenCoin = _b[0], token = _b[1];
        if (tokenCoin !== tokenConfig.coin) {
            throw new errors_1.BitGoJsError("invalid coin found in token: " + _this.tokenConfig.type);
        }
        if (!token || !token.match(StellarToken.tokenPattern)) {
            throw new errors_1.BitGoJsError("invalid token: " + _this.tokenConfig.type);
        }
        _a = _.split(token, '-'), _this._code = _a[0], _this._issuer = _a[1];
        return _this;
    }
    StellarToken.createTokenConstructor = function (config) {
        return function (bitgo) { return new StellarToken(bitgo, config); };
    };
    Object.defineProperty(StellarToken.prototype, "type", {
        get: function () {
            return this.tokenConfig.type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StellarToken.prototype, "name", {
        get: function () {
            return this.tokenConfig.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StellarToken.prototype, "coin", {
        get: function () {
            return this.tokenConfig.coin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StellarToken.prototype, "network", {
        get: function () {
            return this.tokenConfig.network;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StellarToken.prototype, "code", {
        get: function () {
            return this._code;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StellarToken.prototype, "issuer", {
        get: function () {
            return this._issuer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StellarToken.prototype, "decimalPlaces", {
        get: function () {
            return this.tokenConfig.decimalPlaces;
        },
        enumerable: true,
        configurable: true
    });
    StellarToken.prototype.getChain = function () {
        return this.tokenConfig.type;
    };
    StellarToken.prototype.getFullName = function () {
        return 'Stellar Token';
    };
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    StellarToken.prototype.valuelessTransferAllowed = function () {
        return true;
    };
    StellarToken.tokenPattern = /[A-Z]{1,12}-G[A-Z0-9]{55}/;
    return StellarToken;
}(xlm_1.Xlm));
exports.StellarToken = StellarToken;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlbGxhclRva2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL2NvaW5zL3N0ZWxsYXJUb2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7R0FFRztBQUNILDBCQUE0QjtBQUU1Qiw2QkFBNEI7QUFFNUIsdUNBQTRDO0FBQzVDLHFDQUF1QztBQVV2QztJQUFrQyxnQ0FBRztJQU1uQyxzQkFBWSxLQUFZLEVBQUUsV0FBK0I7O1FBQXpELFlBQ0Usa0JBQU0sS0FBSyxDQUFDLFNBYWI7UUFaQyxLQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFNLE9BQU8sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUM1RyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUU1QyxJQUFBLHlFQUFrRixFQUFqRixpQkFBUyxFQUFFLGFBQXNFLENBQUM7UUFDekYsSUFBSSxTQUFTLEtBQUssV0FBVyxDQUFDLElBQUksRUFBRTtZQUNsQyxNQUFNLElBQUkscUJBQVksQ0FBQyxrQ0FBZ0MsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFNLENBQUMsQ0FBQztTQUNqRjtRQUNELElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNyRCxNQUFNLElBQUkscUJBQVksQ0FBQyxvQkFBa0IsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFNLENBQUMsQ0FBQztTQUNuRTtRQUNELHdCQUFnRCxFQUEvQyxtQkFBVSxFQUFFLHFCQUFZLENBQXdCOztJQUNuRCxDQUFDO0lBRU0sbUNBQXNCLEdBQTdCLFVBQThCLE1BQTBCO1FBQ3RELE9BQU8sVUFBQyxLQUFZLElBQUssT0FBQSxJQUFJLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQS9CLENBQStCLENBQUM7SUFDM0QsQ0FBQztJQUVELHNCQUFJLDhCQUFJO2FBQVI7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQy9CLENBQUM7OztPQUFBO0lBRUQsc0JBQUksOEJBQUk7YUFBUjtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDL0IsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw4QkFBSTthQUFSO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUMvQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLGlDQUFPO2FBQVg7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBQ2xDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksOEJBQUk7YUFBUjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLGdDQUFNO2FBQVY7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSx1Q0FBYTthQUFqQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7UUFDeEMsQ0FBQzs7O09BQUE7SUFFRCwrQkFBUSxHQUFSO1FBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztJQUMvQixDQUFDO0lBRUQsa0NBQVcsR0FBWDtRQUNFLE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCwrQ0FBd0IsR0FBeEI7UUFDRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFuRWUseUJBQVksR0FBVywyQkFBMkIsQ0FBQztJQW9FckUsbUJBQUM7Q0FBQSxBQXJFRCxDQUFrQyxTQUFHLEdBcUVwQztBQXJFWSxvQ0FBWSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKi9cbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuaW1wb3J0IHsgWGxtIH0gZnJvbSAnLi94bG0nO1xuaW1wb3J0IHsgQ29pbkNvbnN0cnVjdG9yIH0gZnJvbSAnLi4vY29pbkZhY3RvcnknO1xuaW1wb3J0IHsgQml0R29Kc0Vycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCAqIGFzIHN0ZWxsYXIgZnJvbSAnc3RlbGxhci1zZGsnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0ZWxsYXJUb2tlbkNvbmZpZyB7XG4gIG5hbWU6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICBjb2luOiBzdHJpbmc7XG4gIG5ldHdvcms6IHN0cmluZztcbiAgZGVjaW1hbFBsYWNlczogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgU3RlbGxhclRva2VuIGV4dGVuZHMgWGxtIHtcbiAgc3RhdGljIHJlYWRvbmx5IHRva2VuUGF0dGVybjogUmVnRXhwID0gL1tBLVpdezEsMTJ9LUdbQS1aMC05XXs1NX0vO1xuICBwdWJsaWMgcmVhZG9ubHkgdG9rZW5Db25maWc6IFN0ZWxsYXJUb2tlbkNvbmZpZztcbiAgcHJpdmF0ZSByZWFkb25seSBfY29kZTogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IF9pc3N1ZXI6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihiaXRnbzogQml0R28sIHRva2VuQ29uZmlnOiBTdGVsbGFyVG9rZW5Db25maWcpIHtcbiAgICBzdXBlcihiaXRnbyk7XG4gICAgdGhpcy50b2tlbkNvbmZpZyA9IHRva2VuQ29uZmlnO1xuICAgIGNvbnN0IG5ldHdvcmsgPSB0aGlzLnRva2VuQ29uZmlnLm5ldHdvcmsgPT09ICdUZXN0bmV0JyA/IHN0ZWxsYXIuTmV0d29ya3MuVEVTVE5FVCA6IHN0ZWxsYXIuTmV0d29ya3MuUFVCTElDO1xuICAgIHN0ZWxsYXIuTmV0d29yay51c2UobmV3IHN0ZWxsYXIuTmV0d29yayhuZXR3b3JrKSk7XG5cbiAgICBjb25zdCBbdG9rZW5Db2luLCB0b2tlbl0gPSBfLnNwbGl0KHRoaXMudG9rZW5Db25maWcudHlwZSwgWGxtLmNvaW5Ub2tlblBhdHRlcm5TZXBhcmF0b3IpO1xuICAgIGlmICh0b2tlbkNvaW4gIT09IHRva2VuQ29uZmlnLmNvaW4pIHtcbiAgICAgIHRocm93IG5ldyBCaXRHb0pzRXJyb3IoYGludmFsaWQgY29pbiBmb3VuZCBpbiB0b2tlbjogJHt0aGlzLnRva2VuQ29uZmlnLnR5cGV9YCk7XG4gICAgfVxuICAgIGlmICghdG9rZW4gfHwgIXRva2VuLm1hdGNoKFN0ZWxsYXJUb2tlbi50b2tlblBhdHRlcm4pKSB7XG4gICAgICB0aHJvdyBuZXcgQml0R29Kc0Vycm9yKGBpbnZhbGlkIHRva2VuOiAke3RoaXMudG9rZW5Db25maWcudHlwZX1gKTtcbiAgICB9XG4gICAgW3RoaXMuX2NvZGUsIHRoaXMuX2lzc3Vlcl0gPSBfLnNwbGl0KHRva2VuLCAnLScpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVRva2VuQ29uc3RydWN0b3IoY29uZmlnOiBTdGVsbGFyVG9rZW5Db25maWcpOiBDb2luQ29uc3RydWN0b3Ige1xuICAgIHJldHVybiAoYml0Z286IEJpdEdvKSA9PiBuZXcgU3RlbGxhclRva2VuKGJpdGdvLCBjb25maWcpO1xuICB9XG5cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9rZW5Db25maWcudHlwZTtcbiAgfVxuXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLnRva2VuQ29uZmlnLm5hbWU7XG4gIH1cblxuICBnZXQgY29pbigpIHtcbiAgICByZXR1cm4gdGhpcy50b2tlbkNvbmZpZy5jb2luO1xuICB9XG5cbiAgZ2V0IG5ldHdvcmsoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9rZW5Db25maWcubmV0d29yaztcbiAgfVxuXG4gIGdldCBjb2RlKCkge1xuICAgIHJldHVybiB0aGlzLl9jb2RlO1xuICB9XG5cbiAgZ2V0IGlzc3VlcigpIHtcbiAgICByZXR1cm4gdGhpcy5faXNzdWVyO1xuICB9XG5cbiAgZ2V0IGRlY2ltYWxQbGFjZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9rZW5Db25maWcuZGVjaW1hbFBsYWNlcztcbiAgfVxuXG4gIGdldENoYWluKCkge1xuICAgIHJldHVybiB0aGlzLnRva2VuQ29uZmlnLnR5cGU7XG4gIH1cblxuICBnZXRGdWxsTmFtZSgpIHtcbiAgICByZXR1cm4gJ1N0ZWxsYXIgVG9rZW4nO1xuICB9XG5cbiAgLyoqXG4gICAqIEZsYWcgZm9yIHNlbmRpbmcgdmFsdWUgb2YgMFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBva2F5IHRvIHNlbmQgMCB2YWx1ZSwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICB2YWx1ZWxlc3NUcmFuc2ZlckFsbG93ZWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiJdfQ==