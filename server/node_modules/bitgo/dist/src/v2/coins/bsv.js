"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var bch_1 = require("./bch");
var bitcoin = require("bitgo-utxo-lib");
var request = require('superagent');
var Bluebird = require("bluebird");
var co = Bluebird.coroutine;
var common = require("../../common");
var errors = require("../../errors");
var Bsv = /** @class */ (function (_super) {
    __extends(Bsv, _super);
    function Bsv(bitgo, network) {
        return _super.call(this, bitgo, network || bitcoin.networks.bitcoinsv) || this;
    }
    Bsv.createInstance = function (bitgo) {
        return new Bsv(bitgo);
    };
    Bsv.prototype.getChain = function () {
        return 'bsv';
    };
    Bsv.prototype.getFamily = function () {
        return 'bsv';
    };
    Bsv.prototype.getFullName = function () {
        return 'Bitcoin SV';
    };
    Bsv.prototype.recoveryBlockchainExplorerUrl = function (url) {
        var baseUrl = common.Environments[this.bitgo.getEnv()].bsvExplorerBaseUrl;
        // TODO BG-9989: There is no explorer api for Bitcoin SV yet. Once we have one, add it to src/common.js and update
        // this method.
        if (!baseUrl) {
            throw new errors.WalletRecoveryUnsupported("Recoveries not supported for " + this.getChain() + " - no explorer available");
        }
        return common.Environments[this.bitgo.getEnv()].bsvExplorerBaseUrl + url;
    };
    Bsv.prototype.getAddressInfoFromExplorer = function (addressBase58) {
        var self = this;
        return co(function getAddressInfoFromExplorer() {
            var addrInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request.get(self.recoveryBlockchainExplorerUrl("/addr/" + addressBase58)).result()];
                    case 1:
                        addrInfo = _a.sent();
                        addrInfo.txCount = addrInfo.txApperances;
                        addrInfo.totalBalance = addrInfo.balanceSat;
                        return [2 /*return*/, addrInfo];
                }
            });
        }).call(this);
    };
    Bsv.prototype.getUnspentInfoFromExplorer = function (addressBase58) {
        var self = this;
        return co(function getUnspentInfoFromExplorer() {
            var unspents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request.get(self.recoveryBlockchainExplorerUrl("/addr/" + addressBase58 + "/utxo")).result()];
                    case 1:
                        unspents = _a.sent();
                        unspents.forEach(function processUnspent(unspent) {
                            unspent.amount = unspent.satoshis;
                            unspent.n = unspent.vout;
                        });
                        return [2 /*return*/, unspents];
                }
            });
        }).call(this);
    };
    return Bsv;
}(bch_1.Bch));
exports.Bsv = Bsv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnN2LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL2NvaW5zL2Jzdi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJQSw2QkFBNEI7QUFDNUIsd0NBQTBDO0FBQzFDLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN0QyxtQ0FBcUM7QUFHckMsSUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztBQUM5QixxQ0FBdUM7QUFDdkMscUNBQXVDO0FBRXZDO0lBQXlCLHVCQUFHO0lBQzFCLGFBQVksS0FBWSxFQUFFLE9BQXFCO2VBQzdDLGtCQUFNLEtBQUssRUFBRSxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDckQsQ0FBQztJQUVNLGtCQUFjLEdBQXJCLFVBQXNCLEtBQVk7UUFDaEMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsc0JBQVEsR0FBUjtRQUNFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELHVCQUFTLEdBQVQ7UUFDRSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCx5QkFBVyxHQUFYO1FBQ0UsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELDJDQUE2QixHQUE3QixVQUE4QixHQUFXO1FBQ3ZDLElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixDQUFDO1FBRTVFLGtIQUFrSDtRQUNsSCxlQUFlO1FBQ2YsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE1BQU0sSUFBSSxNQUFNLENBQUMseUJBQXlCLENBQ3hDLGtDQUFnQyxJQUFJLENBQUMsUUFBUSxFQUFFLDZCQUEwQixDQUMxRSxDQUFDO1NBQ0g7UUFFRCxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztJQUMzRSxDQUFDO0lBRUQsd0NBQTBCLEdBQTFCLFVBQTJCLGFBQXFCO1FBQzlDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixPQUFPLEVBQUUsQ0FBQyxTQUFVLDBCQUEwQjs7Ozs0QkFFM0IscUJBQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsV0FBUyxhQUFlLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFBOzt3QkFBbkcsUUFBUSxHQUFHLFNBQXdGO3dCQUV6RyxRQUFRLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7d0JBQ3pDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQzt3QkFFNUMsc0JBQU8sUUFBUSxFQUFDOzs7U0FDakIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRUQsd0NBQTBCLEdBQTFCLFVBQTJCLGFBQXFCO1FBQzlDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixPQUFPLEVBQUUsQ0FBQyxTQUFVLDBCQUEwQjs7Ozs0QkFFM0IscUJBQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsV0FBUyxhQUFhLFVBQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUE7O3dCQUF4RyxRQUFRLEdBQUcsU0FBNkY7d0JBRTlHLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxjQUFjLENBQUMsT0FBTzs0QkFDOUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDOzRCQUNsQyxPQUFPLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7d0JBQzNCLENBQUMsQ0FBQyxDQUFDO3dCQUVILHNCQUFPLFFBQVEsRUFBQzs7O1NBQ2pCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUNILFVBQUM7QUFBRCxDQUFDLEFBOURELENBQXlCLFNBQUcsR0E4RDNCO0FBOURZLGtCQUFHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0IHsgQml0R28gfSBmcm9tICcuLi8uLi9iaXRnbyc7XG5pbXBvcnQgeyBCY2ggfSBmcm9tICcuL2JjaCc7XG5pbXBvcnQgKiBhcyBiaXRjb2luIGZyb20gJ2JpdGdvLXV0eG8tbGliJztcbmNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCdzdXBlcmFnZW50Jyk7XG5pbXBvcnQgKiBhcyBCbHVlYmlyZCBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBCYXNlQ29pbiB9IGZyb20gJy4uL2Jhc2VDb2luJztcbmltcG9ydCB7IFV0eG9OZXR3b3JrIH0gZnJvbSAnLi9hYnN0cmFjdFV0eG9Db2luJztcbmNvbnN0IGNvID0gQmx1ZWJpcmQuY29yb3V0aW5lO1xuaW1wb3J0ICogYXMgY29tbW9uIGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgKiBhcyBlcnJvcnMgZnJvbSAnLi4vLi4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIEJzdiBleHRlbmRzIEJjaCB7XG4gIGNvbnN0cnVjdG9yKGJpdGdvOiBCaXRHbywgbmV0d29yaz86IFV0eG9OZXR3b3JrKSB7XG4gICAgc3VwZXIoYml0Z28sIG5ldHdvcmsgfHwgYml0Y29pbi5uZXR3b3Jrcy5iaXRjb2luc3YpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUluc3RhbmNlKGJpdGdvOiBCaXRHbyk6IEJhc2VDb2luIHtcbiAgICByZXR1cm4gbmV3IEJzdihiaXRnbyk7XG4gIH1cblxuICBnZXRDaGFpbigpOiBzdHJpbmcge1xuICAgIHJldHVybiAnYnN2JztcbiAgfVxuXG4gIGdldEZhbWlseSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnYnN2JztcbiAgfVxuXG4gIGdldEZ1bGxOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdCaXRjb2luIFNWJztcbiAgfVxuXG4gIHJlY292ZXJ5QmxvY2tjaGFpbkV4cGxvcmVyVXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBiYXNlVXJsID0gY29tbW9uLkVudmlyb25tZW50c1t0aGlzLmJpdGdvLmdldEVudigpXS5ic3ZFeHBsb3JlckJhc2VVcmw7XG5cbiAgICAvLyBUT0RPIEJHLTk5ODk6IFRoZXJlIGlzIG5vIGV4cGxvcmVyIGFwaSBmb3IgQml0Y29pbiBTViB5ZXQuIE9uY2Ugd2UgaGF2ZSBvbmUsIGFkZCBpdCB0byBzcmMvY29tbW9uLmpzIGFuZCB1cGRhdGVcbiAgICAvLyB0aGlzIG1ldGhvZC5cbiAgICBpZiAoIWJhc2VVcmwpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuV2FsbGV0UmVjb3ZlcnlVbnN1cHBvcnRlZChcbiAgICAgICAgYFJlY292ZXJpZXMgbm90IHN1cHBvcnRlZCBmb3IgJHt0aGlzLmdldENoYWluKCl9IC0gbm8gZXhwbG9yZXIgYXZhaWxhYmxlYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tbW9uLkVudmlyb25tZW50c1t0aGlzLmJpdGdvLmdldEVudigpXS5ic3ZFeHBsb3JlckJhc2VVcmwgKyB1cmw7XG4gIH1cblxuICBnZXRBZGRyZXNzSW5mb0Zyb21FeHBsb3JlcihhZGRyZXNzQmFzZTU4OiBzdHJpbmcpOiBCbHVlYmlyZDxhbnk+IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gY28oZnVuY3Rpb24qIGdldEFkZHJlc3NJbmZvRnJvbUV4cGxvcmVyKCkge1xuICAgICAgLy8gVE9ETyBCRy05OTg5OiBVcGRhdGUgdGhpcyBtZXRob2Qgd2l0aCB0aGUgY29ycmVjdCBBUEkgcm91dGUgYW5kIHBhcnNpbmcgb25jZSB3ZSBoYXZlIG9uZVxuICAgICAgY29uc3QgYWRkckluZm8gPSB5aWVsZCByZXF1ZXN0LmdldChzZWxmLnJlY292ZXJ5QmxvY2tjaGFpbkV4cGxvcmVyVXJsKGAvYWRkci8ke2FkZHJlc3NCYXNlNTh9YCkpLnJlc3VsdCgpO1xuXG4gICAgICBhZGRySW5mby50eENvdW50ID0gYWRkckluZm8udHhBcHBlcmFuY2VzO1xuICAgICAgYWRkckluZm8udG90YWxCYWxhbmNlID0gYWRkckluZm8uYmFsYW5jZVNhdDtcblxuICAgICAgcmV0dXJuIGFkZHJJbmZvO1xuICAgIH0pLmNhbGwodGhpcyk7XG4gIH1cblxuICBnZXRVbnNwZW50SW5mb0Zyb21FeHBsb3JlcihhZGRyZXNzQmFzZTU4OiBzdHJpbmcpOiBCbHVlYmlyZDxhbnk+IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gY28oZnVuY3Rpb24qIGdldFVuc3BlbnRJbmZvRnJvbUV4cGxvcmVyKCkge1xuICAgICAgLy8gVE9ETyBCRy05OTg5OiBVcGRhdGUgdGhpcyBtZXRob2Qgd2l0aCB0aGUgY29ycmVjdCBBUEkgcm91dGUgYW5kIHBhcnNpbmcgb25jZSB3ZSBoYXZlIG9uZVxuICAgICAgY29uc3QgdW5zcGVudHMgPSB5aWVsZCByZXF1ZXN0LmdldChzZWxmLnJlY292ZXJ5QmxvY2tjaGFpbkV4cGxvcmVyVXJsKGAvYWRkci8ke2FkZHJlc3NCYXNlNTh9L3V0eG9gKSkucmVzdWx0KCk7XG5cbiAgICAgIHVuc3BlbnRzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc1Vuc3BlbnQodW5zcGVudCkge1xuICAgICAgICB1bnNwZW50LmFtb3VudCA9IHVuc3BlbnQuc2F0b3NoaXM7XG4gICAgICAgIHVuc3BlbnQubiA9IHVuc3BlbnQudm91dDtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdW5zcGVudHM7XG4gICAgfSkuY2FsbCh0aGlzKTtcbiAgfVxufVxuIl19