"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../../errors");
var abstractUtxoCoin_1 = require("./abstractUtxoCoin");
var Bluebird = require("bluebird");
var common = require("../../common");
var request = require("superagent");
var co = Bluebird.coroutine;
var Ltc = /** @class */ (function (_super) {
    __extends(Ltc, _super);
    function Ltc(bitgo, network) {
        var _this = 
        // TODO: move to bitgo-utxo-lib (BG-6821)
        _super.call(this, bitgo, network || {
            messagePrefix: '\x19Litecoin Signed Message:\n',
            bip32: {
                public: 0x0488b21e,
                private: 0x0488ade4,
            },
            bech32: 'ltc',
            pubKeyHash: 0x30,
            scriptHash: 0x32,
            wif: 0xb0,
            dustThreshold: 0,
            dustSoftThreshold: 100000,
            feePerKb: 100000,
            coin: 'ltc',
        }) || this;
        // use legacy script hash version, which is the current Bitcoin one
        _this.altScriptHash = _this.getCoinLibrary().networks.bitcoin.scriptHash;
        // do not support alt destinations in prod
        _this.supportAltScriptDestination = false;
        return _this;
    }
    Ltc.createInstance = function (bitgo) {
        return new Ltc(bitgo);
    };
    Ltc.prototype.getChain = function () {
        return 'ltc';
    };
    Ltc.prototype.getFamily = function () {
        return 'ltc';
    };
    Ltc.prototype.getFullName = function () {
        return 'Litecoin';
    };
    Ltc.prototype.supportsBlockTarget = function () {
        return false;
    };
    Ltc.prototype.supportsP2shP2wsh = function () {
        return true;
    };
    Ltc.prototype.supportsP2wsh = function () {
        return true;
    };
    /**
     * Canonicalize a Litecoin address for a specific scriptHash version
     * @param address
     * @param scriptHashVersion 1 or 2, where 1 is the old version and 2 is the new version
     * @returns {*} address string
     */
    Ltc.prototype.canonicalAddress = function (address, scriptHashVersion) {
        if (scriptHashVersion === void 0) { scriptHashVersion = 2; }
        if (!this.isValidAddress(address, true)) {
            throw new errors_1.InvalidAddressError();
        }
        try {
            // try deserializing as bech32
            this.getCoinLibrary().address.fromBech32(address);
            // address may be all uppercase, but canonical bech32 addresses are all lowercase
            return address.toLowerCase();
        }
        catch (e) {
            // not a valid bech32, try to decode as base58
        }
        var addressDetails = this.getCoinLibrary().address.fromBase58Check(address);
        if (addressDetails.version === this.network.pubKeyHash) {
            // the pub keys never changed
            return address;
        }
        if ([1, 2].indexOf(scriptHashVersion) === -1) {
            throw new Error('scriptHashVersion needs to be either 1 or 2');
        }
        var scriptHashMap = {
            // altScriptHash is the old one
            1: this.altScriptHash,
            // by default we're using the new one
            2: this.network.scriptHash
        };
        var newScriptHash = scriptHashMap[scriptHashVersion];
        return this.getCoinLibrary().address.toBase58Check(addressDetails.hash, newScriptHash);
    };
    Ltc.prototype.calculateRecoveryAddress = function (scriptHashScript) {
        var bitgoAddress = this.getCoinLibrary().address.fromOutputScript(scriptHashScript, this.network);
        var blockrAddress = this.canonicalAddress(bitgoAddress, 1);
        return blockrAddress;
    };
    Ltc.prototype.recoveryBlockchainExplorerUrl = function (url) {
        return common.Environments[this.bitgo.env].ltcExplorerBaseUrl + url;
    };
    Ltc.prototype.getAddressInfoFromExplorer = function (addressBase58) {
        return co(function getAddressInfoFromExplorer() {
            var address, addrInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        address = this.canonicalAddress(addressBase58, 2);
                        return [4 /*yield*/, request.get(this.recoveryBlockchainExplorerUrl("/addr/" + address)).result()];
                    case 1:
                        addrInfo = _a.sent();
                        addrInfo.txCount = addrInfo.txApperances;
                        addrInfo.totalBalance = addrInfo.balanceSat;
                        return [2 /*return*/, addrInfo];
                }
            });
        }).call(this);
    };
    Ltc.prototype.getUnspentInfoFromExplorer = function (addressBase58) {
        return co(function getUnspentInfoFromExplorer() {
            var address, unspents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        address = this.canonicalAddress(addressBase58, 2);
                        return [4 /*yield*/, request.get(this.recoveryBlockchainExplorerUrl("/addr/" + address + "/utxo")).result()];
                    case 1:
                        unspents = _a.sent();
                        unspents.forEach(function processUnspent(unspent) {
                            unspent.amount = unspent.satoshis;
                            unspent.n = unspent.vout;
                        });
                        return [2 /*return*/, unspents];
                }
            });
        }).call(this);
    };
    return Ltc;
}(abstractUtxoCoin_1.AbstractUtxoCoin));
exports.Ltc = Ltc;
//# sourceMappingURL=data:application/json;base64,