"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var Bluebird = require("bluebird");
var _ = require("lodash");
var stellar = require("stellar-sdk");
var algosdk_1 = require("algosdk");
var baseCoin_1 = require("../baseCoin");
var keychains_1 = require("../keychains");
var co = Bluebird.coroutine;
var Algo = /** @class */ (function (_super) {
    __extends(Algo, _super);
    function Algo(bitgo) {
        return _super.call(this, bitgo) || this;
    }
    Algo.createInstance = function (bitgo) {
        return new Algo(bitgo);
    };
    Algo.prototype.getChain = function () {
        return 'algo';
    };
    Algo.prototype.getFamily = function () {
        return 'algo';
    };
    Algo.prototype.getFullName = function () {
        return 'Algorand';
    };
    Algo.prototype.getBaseFactor = function () {
        return 1e6;
    };
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    Algo.prototype.valuelessTransferAllowed = function () {
        // TODO: this sounds like its true with the staking txes - confirm before launch
        return false;
    };
    /**
     * Algorand supports account consolidations. These are transfers from the receive addresses
     * to the main address.
     */
    Algo.prototype.allowsAccountConsolidations = function () {
        return true;
    };
    /**
     * Generate ed25519 key pair
     *
     * @param seed
     * @returns {Object} object with generated pub, prv
     */
    Algo.prototype.generateKeyPair = function (seed) {
        var pair = seed ? algosdk_1.generateAccountFromSeed(seed) : algosdk_1.generateAccount();
        return {
            pub: pair.addr,
            prv: algosdk_1.Seed.encode(pair.sk),
        };
    };
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    Algo.prototype.isValidPub = function (pub) {
        return algosdk_1.isValidAddress(pub);
    };
    /**
     * Return boolean indicating whether input is valid seed for the coin
     * In Algorand, when the private key is encoded as base32 string only the first 32 bytes are taken,
     * so the encoded value is actually the seed
     *
     * @param {String} prv the prv to be checked
     * @returns {Boolean} is it valid?
     */
    Algo.prototype.isValidPrv = function (prv) {
        return algosdk_1.isValidSeed(prv);
    };
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param {String} address the pub to be checked
     * @returns {Boolean} is it valid?
     */
    Algo.prototype.isValidAddress = function (address) {
        return algosdk_1.isValidAddress(address);
    };
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     */
    Algo.prototype.signMessage = function (key, message) {
        // key.prv actually holds the encoded seed, but we use the prv name to avoid breaking the keypair schema.
        // See jsdoc comment in isValidPrv
        var seed = key.prv;
        if (!this.isValidPrv(seed)) {
            throw new Error("invalid seed: " + seed);
        }
        if (typeof seed === 'string') {
            try {
                seed = algosdk_1.Seed.decode(seed).seed;
            }
            catch (e) {
                throw new Error("could not decode seed: " + seed);
            }
        }
        var keyPair = algosdk_1.generateAccountFromSeed(seed);
        if (!Buffer.isBuffer(message)) {
            message = Buffer.from(message);
        }
        return Buffer.from(algosdk_1.NaclWrapper.sign(message, keyPair.sk));
    };
    /**
     * Specifies what key we will need for signing` - Algorand needs the backup, bitgo pubs.
     */
    Algo.prototype.keyIdsForSigning = function () {
        return [keychains_1.KeyIndices.USER, keychains_1.KeyIndices.BACKUP, keychains_1.KeyIndices.BITGO];
    };
    /**
     * Explain/parse transaction
     * @param params
     * @param callback
     */
    Algo.prototype.explainTransaction = function (params, callback) {
        return co(function () {
            var txHex, tx, type, senderAddress, voteKeyBase64, voteLastBlock, txToHex, decodedTx, txnForDecoding, id, fee, outputAmount, outputs, memo;
            return __generator(this, function (_a) {
                txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
                if (!txHex) {
                    throw new Error('missing required param txHex or halfSigned.txHex');
                }
                try {
                    txToHex = Buffer.from(txHex, 'base64');
                    decodedTx = algosdk_1.Encoding.decode(txToHex);
                    txnForDecoding = decodedTx.txn || decodedTx;
                    if (!!txnForDecoding.votekey) {
                        type = txnForDecoding.type;
                        senderAddress = algosdk_1.Address.encode(txnForDecoding.snd);
                        voteKeyBase64 = txnForDecoding.votekey.toString('base64');
                        voteLastBlock = txnForDecoding.votelst;
                    }
                    tx = algosdk_1.Multisig.MultiSigTransaction.from_obj_for_encoding(txnForDecoding);
                }
                catch (ex) {
                    throw new Error('txHex needs to be a valid tx encoded as base64 string');
                }
                id = tx.txID();
                fee = { fee: tx.fee };
                outputAmount = tx.amount || 0;
                outputs = [];
                if (tx.to) {
                    outputs.push({
                        amount: outputAmount,
                        address: algosdk_1.Address.encode(new Uint8Array(tx.to.publicKey)),
                    });
                }
                memo = tx.note;
                return [2 /*return*/, {
                        displayOrder: [
                            'id',
                            'outputAmount',
                            'changeAmount',
                            'outputs',
                            'changeOutputs',
                            'fee',
                            'memo',
                            'type',
                            'senderAddress',
                            'voteKeyBase64',
                            'voteLastBlock',
                        ],
                        id: id,
                        outputs: outputs,
                        outputAmount: outputAmount,
                        changeAmount: 0,
                        fee: fee,
                        changeOutputs: [],
                        memo: memo,
                        type: type,
                        senderAddress: senderAddress,
                        voteKeyBase64: voteKeyBase64,
                        voteLastBlock: voteLastBlock,
                    }];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    Algo.prototype.isStellarSeed = function (seed) {
        return stellar.StrKey.isValidEd25519SecretSeed(seed);
    };
    Algo.prototype.convertFromStellarSeed = function (seed) {
        // assume this is a trust custodial seed if its a valid ed25519 prv
        if (!this.isStellarSeed(seed)) {
            return null;
        }
        return algosdk_1.Seed.encode(stellar.StrKey.decodeEd25519SecretSeed(seed));
    };
    Algo.prototype.verifySignTransactionParams = function (params) {
        var prv = params.prv;
        var addressVersion = params.txPrebuild.addressVersion;
        var isHalfSigned = false;
        // it's possible this tx was already signed - take the halfSigned
        // txHex if it is
        var txHex = params.txPrebuild.txHex;
        if (params.txPrebuild.halfSigned) {
            isHalfSigned = true;
            txHex = params.txPrebuild.halfSigned.txHex;
        }
        if (_.isUndefined(txHex)) {
            throw new Error('missing txPrebuild parameter');
        }
        if (!_.isString(txHex)) {
            throw new Error("txPrebuild must be an object, got type " + typeof txHex);
        }
        if (_.isUndefined(prv)) {
            throw new Error('missing prv parameter to sign transaction');
        }
        if (!_.isString(prv)) {
            throw new Error("prv must be a string, got type " + typeof prv);
        }
        if (!_.has(params.txPrebuild, 'keys[0]') ||
            !_.has(params.txPrebuild, 'keys[1]') ||
            !_.has(params.txPrebuild, 'keys[2]')) {
            throw new Error('missing public keys parameter to sign transaction');
        }
        if (!_.isNumber(addressVersion)) {
            throw new Error('missing addressVersion parameter to sign transaction');
        }
        // we need to re-encode our public keys using algosdk's format
        var keys = [params.txPrebuild.keys[0], params.txPrebuild.keys[1], params.txPrebuild.keys[2]];
        // re-encode sk from our prv (this acts as a seed out of the keychain)
        var seed = algosdk_1.Seed.decode(prv).seed;
        var pair = algosdk_1.generateAccountFromSeed(seed);
        var sk = pair.sk;
        return { txHex: txHex, addressVersion: addressVersion, keys: keys, sk: sk, isHalfSigned: isHalfSigned };
    };
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {Object} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param params.wallet.addressVersion {String} this is the version of the Algorand multisig address generation format
     */
    Algo.prototype.signTransaction = function (params) {
        var _a = this.verifySignTransactionParams(params), txHex = _a.txHex, addressVersion = _a.addressVersion, keys = _a.keys, sk = _a.sk, isHalfSigned = _a.isHalfSigned;
        var encodedPublicKeys = _.map(keys, function (k) { return algosdk_1.Address.decode(k).publicKey; });
        // decode our unsigned/half-signed tx
        var transaction;
        var txToHex;
        try {
            txToHex = Buffer.from(txHex, 'base64');
            var initialDecodedTx = algosdk_1.Encoding.decode(txToHex);
            // we need to scrub the txn of sigs for half-signed
            var decodedTx = isHalfSigned ? initialDecodedTx.txn : initialDecodedTx;
            transaction = algosdk_1.Multisig.MultiSigTransaction.from_obj_for_encoding(decodedTx);
        }
        catch (e) {
            throw new Error('transaction needs to be a valid tx encoded as base64 string');
        }
        // sign our tx
        var signed = transaction.partialSignTxn({ version: addressVersion, threshold: 2, pks: encodedPublicKeys }, sk);
        // if we have already signed it, we'll have to merge that with our previous tx
        if (isHalfSigned) {
            signed = algosdk_1.mergeMultisigTransactions([Buffer.from(signed), txToHex]);
        }
        var signedBase64 = Buffer.from(signed).toString('base64');
        if (isHalfSigned) {
            return { txHex: signedBase64 };
        }
        else {
            return { halfSigned: { txHex: signedBase64 } };
        }
    };
    Algo.prototype.parseTransaction = function (params, callback) {
        return Bluebird.resolve({}).asCallback(callback);
    };
    Algo.prototype.verifyAddress = function (params) {
        return true;
    };
    Algo.prototype.verifyTransaction = function (params, callback) {
        return Bluebird.resolve(true).asCallback(callback);
    };
    return Algo;
}(baseCoin_1.BaseCoin));
exports.Algo = Algo;
//# sourceMappingURL=data:application/json;base64,