"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var btc_1 = require("./btc");
var bitcoin = require("bitgo-utxo-lib");
var Bluebird = require("bluebird");
var co = Bluebird.coroutine;
var common = require("../../common");
var errors = require("../../errors");
var request = require('superagent');
var Btg = /** @class */ (function (_super) {
    __extends(Btg, _super);
    function Btg(bitgo, network) {
        return _super.call(this, bitgo, network || bitcoin.networks.bitcoingold) || this;
    }
    Btg.createInstance = function (bitgo) {
        return new Btg(bitgo);
    };
    Btg.prototype.getChain = function () {
        return 'btg';
    };
    Btg.prototype.getFamily = function () {
        return 'btg';
    };
    Btg.prototype.getFullName = function () {
        return 'Bitcoin Gold';
    };
    Btg.prototype.supportsBlockTarget = function () {
        return false;
    };
    Btg.prototype.supportsP2shP2wsh = function () {
        return true;
    };
    Btg.prototype.supportsP2wsh = function () {
        return true;
    };
    /**
     *
     * @param txBuilder
     * @returns {*}
     */
    Btg.prototype.prepareTransactionBuilder = function (txBuilder) {
        txBuilder.setVersion(2);
        return txBuilder;
    };
    Object.defineProperty(Btg.prototype, "defaultSigHashType", {
        /**
         *
         * @returns {number}
         */
        get: function () {
            return bitcoin.Transaction.SIGHASH_ALL | bitcoin.Transaction.SIGHASH_BITCOINCASHBIP143;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Calculate the hash to verify the signature against
     * @param transaction Transaction object
     * @param inputIndex
     * @param pubScript
     * @param amount The previous output's amount
     * @param hashType
     * @param isSegwitInput
     * @returns {*}
     */
    Btg.prototype.calculateSignatureHash = function (transaction, inputIndex, pubScript, amount, hashType, isSegwitInput) {
        return transaction.hashForGoldSignature(inputIndex, pubScript, amount, hashType, isSegwitInput);
    };
    Btg.prototype.recoveryBlockchainExplorerUrl = function (url) {
        var baseUrl = common.Environments[this.bitgo.getEnv()].btgExplorerBaseUrl;
        if (!baseUrl) {
            throw new Error("Recoveries not supported for " + this.getChain() + " - no explorer available");
        }
        return common.Environments[this.bitgo.getEnv()].btgExplorerBaseUrl + url;
    };
    Btg.prototype.getAddressInfoFromExplorer = function (addressBase58) {
        var self = this;
        return co(function getAddressInfoFromExplorer() {
            var addrInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request.get(self.recoveryBlockchainExplorerUrl("/addr/" + addressBase58)).result()];
                    case 1:
                        addrInfo = _a.sent();
                        addrInfo.txCount = addrInfo.txApperances;
                        addrInfo.totalBalance = addrInfo.balanceSat;
                        return [2 /*return*/, addrInfo];
                }
            });
        }).call(this);
    };
    Btg.prototype.getUnspentInfoFromExplorer = function (addressBase58) {
        var self = this;
        return co(function getUnspentInfoFromExplorer() {
            var unspents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request.get(self.recoveryBlockchainExplorerUrl("/addr/" + addressBase58 + "/utxo")).result()];
                    case 1:
                        unspents = _a.sent();
                        unspents.forEach(function processUnspent(unspent) {
                            unspent.amount = unspent.satoshis;
                            unspent.n = unspent.vout;
                        });
                        return [2 /*return*/, unspents];
                }
            });
        }).call(this);
    };
    Btg.prototype.verifyRecoveryTransaction = function (txInfo) {
        return Bluebird.reject(new errors.MethodNotImplementedError());
    };
    return Btg;
}(btc_1.Btc));
exports.Btg = Btg;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnRnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL2NvaW5zL2J0Zy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSw2QkFBNEI7QUFDNUIsd0NBQTBDO0FBQzFDLG1DQUFxQztBQUNyQyxJQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO0FBQzlCLHFDQUF1QztBQUN2QyxxQ0FBdUM7QUFDdkMsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRXRDO0lBQXlCLHVCQUFHO0lBQzFCLGFBQVksS0FBWSxFQUFFLE9BQWE7ZUFDckMsa0JBQU0sS0FBSyxFQUFFLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztJQUN2RCxDQUFDO0lBRU0sa0JBQWMsR0FBckIsVUFBc0IsS0FBSztRQUN6QixPQUFPLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxzQkFBUSxHQUFSO1FBQ0UsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsdUJBQVMsR0FBVDtRQUNFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELHlCQUFXLEdBQVg7UUFDRSxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRUQsaUNBQW1CLEdBQW5CO1FBQ0UsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsK0JBQWlCLEdBQWpCO1FBQ0UsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsMkJBQWEsR0FBYjtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCx1Q0FBeUIsR0FBekIsVUFBMEIsU0FBYztRQUN0QyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFNRCxzQkFBSSxtQ0FBa0I7UUFKdEI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMseUJBQXlCLENBQUM7UUFDekYsQ0FBQzs7O09BQUE7SUFFRDs7Ozs7Ozs7O09BU0c7SUFDSCxvQ0FBc0IsR0FBdEIsVUFBdUIsV0FBVyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhO1FBQ3hGLE9BQU8sV0FBVyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNsRyxDQUFDO0lBRUQsMkNBQTZCLEdBQTdCLFVBQThCLEdBQVc7UUFDdkMsSUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsa0JBQWtCLENBQUM7UUFFNUUsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWdDLElBQUksQ0FBQyxRQUFRLEVBQUUsNkJBQTBCLENBQUMsQ0FBQztTQUM1RjtRQUVELE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0lBQzNFLENBQUM7SUFFRCx3Q0FBMEIsR0FBMUIsVUFBMkIsYUFBcUI7UUFDOUMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxDQUFDLFNBQVUsMEJBQTBCOzs7OzRCQUMzQixxQkFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxXQUFTLGFBQWUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUE7O3dCQUFuRyxRQUFRLEdBQUcsU0FBd0Y7d0JBRXpHLFFBQVEsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQzt3QkFDekMsUUFBUSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO3dCQUU1QyxzQkFBTyxRQUFRLEVBQUM7OztTQUNqQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFRCx3Q0FBMEIsR0FBMUIsVUFBMkIsYUFBcUI7UUFDOUMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxDQUFDLFNBQVUsMEJBQTBCOzs7OzRCQUMzQixxQkFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxXQUFTLGFBQWEsVUFBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBQTs7d0JBQXhHLFFBQVEsR0FBRyxTQUE2Rjt3QkFFOUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLGNBQWMsQ0FBQyxPQUFPOzRCQUM5QyxPQUFPLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7NEJBQ2xDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQzt3QkFDM0IsQ0FBQyxDQUFDLENBQUM7d0JBRUgsc0JBQU8sUUFBUSxFQUFDOzs7U0FDakIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRUQsdUNBQXlCLEdBQXpCLFVBQTBCLE1BQXdDO1FBQ2hFLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUNILFVBQUM7QUFBRCxDQUFDLEFBeEdELENBQXlCLFNBQUcsR0F3RzNCO0FBeEdZLGtCQUFHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQml0R28gfSBmcm9tICcuLi8uLi9iaXRnbyc7XG5pbXBvcnQge0Jhc2VDb2luLCBWZXJpZnlSZWNvdmVyeVRyYW5zYWN0aW9uT3B0aW9uc30gZnJvbSAnLi4vYmFzZUNvaW4nO1xuaW1wb3J0IHsgQnRjIH0gZnJvbSAnLi9idGMnO1xuaW1wb3J0ICogYXMgYml0Y29pbiBmcm9tICdiaXRnby11dHhvLWxpYic7XG5pbXBvcnQgKiBhcyBCbHVlYmlyZCBmcm9tICdibHVlYmlyZCc7XG5jb25zdCBjbyA9IEJsdWViaXJkLmNvcm91dGluZTtcbmltcG9ydCAqIGFzIGNvbW1vbiBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0ICogYXMgZXJyb3JzIGZyb20gXCIuLi8uLi9lcnJvcnNcIjtcbmNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCdzdXBlcmFnZW50Jyk7XG5cbmV4cG9ydCBjbGFzcyBCdGcgZXh0ZW5kcyBCdGMge1xuICBjb25zdHJ1Y3RvcihiaXRnbzogQml0R28sIG5ldHdvcms/OiBhbnkpIHtcbiAgICBzdXBlcihiaXRnbywgbmV0d29yayB8fCBiaXRjb2luLm5ldHdvcmtzLmJpdGNvaW5nb2xkKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVJbnN0YW5jZShiaXRnbyk6IEJhc2VDb2luIHtcbiAgICByZXR1cm4gbmV3IEJ0ZyhiaXRnbyk7XG4gIH1cblxuICBnZXRDaGFpbigpOiBzdHJpbmcge1xuICAgIHJldHVybiAnYnRnJztcbiAgfVxuXG4gIGdldEZhbWlseSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnYnRnJztcbiAgfVxuXG4gIGdldEZ1bGxOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdCaXRjb2luIEdvbGQnO1xuICB9XG5cbiAgc3VwcG9ydHNCbG9ja1RhcmdldCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdXBwb3J0c1Ayc2hQMndzaCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN1cHBvcnRzUDJ3c2goKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHR4QnVpbGRlclxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIHByZXBhcmVUcmFuc2FjdGlvbkJ1aWxkZXIodHhCdWlsZGVyOiBhbnkpOiBhbnkge1xuICAgIHR4QnVpbGRlci5zZXRWZXJzaW9uKDIpO1xuICAgIHJldHVybiB0eEJ1aWxkZXI7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldCBkZWZhdWx0U2lnSGFzaFR5cGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gYml0Y29pbi5UcmFuc2FjdGlvbi5TSUdIQVNIX0FMTCB8IGJpdGNvaW4uVHJhbnNhY3Rpb24uU0lHSEFTSF9CSVRDT0lOQ0FTSEJJUDE0MztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGhhc2ggdG8gdmVyaWZ5IHRoZSBzaWduYXR1cmUgYWdhaW5zdFxuICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gVHJhbnNhY3Rpb24gb2JqZWN0XG4gICAqIEBwYXJhbSBpbnB1dEluZGV4XG4gICAqIEBwYXJhbSBwdWJTY3JpcHRcbiAgICogQHBhcmFtIGFtb3VudCBUaGUgcHJldmlvdXMgb3V0cHV0J3MgYW1vdW50XG4gICAqIEBwYXJhbSBoYXNoVHlwZVxuICAgKiBAcGFyYW0gaXNTZWd3aXRJbnB1dFxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGNhbGN1bGF0ZVNpZ25hdHVyZUhhc2godHJhbnNhY3Rpb24sIGlucHV0SW5kZXgsIHB1YlNjcmlwdCwgYW1vdW50LCBoYXNoVHlwZSwgaXNTZWd3aXRJbnB1dCk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLmhhc2hGb3JHb2xkU2lnbmF0dXJlKGlucHV0SW5kZXgsIHB1YlNjcmlwdCwgYW1vdW50LCBoYXNoVHlwZSwgaXNTZWd3aXRJbnB1dCk7XG4gIH1cblxuICByZWNvdmVyeUJsb2NrY2hhaW5FeHBsb3JlclVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgYmFzZVVybCA9IGNvbW1vbi5FbnZpcm9ubWVudHNbdGhpcy5iaXRnby5nZXRFbnYoKV0uYnRnRXhwbG9yZXJCYXNlVXJsO1xuXG4gICAgaWYgKCFiYXNlVXJsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlY292ZXJpZXMgbm90IHN1cHBvcnRlZCBmb3IgJHt0aGlzLmdldENoYWluKCl9IC0gbm8gZXhwbG9yZXIgYXZhaWxhYmxlYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbW1vbi5FbnZpcm9ubWVudHNbdGhpcy5iaXRnby5nZXRFbnYoKV0uYnRnRXhwbG9yZXJCYXNlVXJsICsgdXJsO1xuICB9XG5cbiAgZ2V0QWRkcmVzc0luZm9Gcm9tRXhwbG9yZXIoYWRkcmVzc0Jhc2U1ODogc3RyaW5nKTogQmx1ZWJpcmQ8YW55PiB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIGNvKGZ1bmN0aW9uICpnZXRBZGRyZXNzSW5mb0Zyb21FeHBsb3JlcigpIHtcbiAgICAgIGNvbnN0IGFkZHJJbmZvID0geWllbGQgcmVxdWVzdC5nZXQoc2VsZi5yZWNvdmVyeUJsb2NrY2hhaW5FeHBsb3JlclVybChgL2FkZHIvJHthZGRyZXNzQmFzZTU4fWApKS5yZXN1bHQoKTtcblxuICAgICAgYWRkckluZm8udHhDb3VudCA9IGFkZHJJbmZvLnR4QXBwZXJhbmNlcztcbiAgICAgIGFkZHJJbmZvLnRvdGFsQmFsYW5jZSA9IGFkZHJJbmZvLmJhbGFuY2VTYXQ7XG5cbiAgICAgIHJldHVybiBhZGRySW5mbztcbiAgICB9KS5jYWxsKHRoaXMpO1xuICB9XG5cbiAgZ2V0VW5zcGVudEluZm9Gcm9tRXhwbG9yZXIoYWRkcmVzc0Jhc2U1ODogc3RyaW5nKTogQmx1ZWJpcmQ8YW55PiB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIGNvKGZ1bmN0aW9uICpnZXRVbnNwZW50SW5mb0Zyb21FeHBsb3JlcigpIHtcbiAgICAgIGNvbnN0IHVuc3BlbnRzID0geWllbGQgcmVxdWVzdC5nZXQoc2VsZi5yZWNvdmVyeUJsb2NrY2hhaW5FeHBsb3JlclVybChgL2FkZHIvJHthZGRyZXNzQmFzZTU4fS91dHhvYCkpLnJlc3VsdCgpO1xuXG4gICAgICB1bnNwZW50cy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NVbnNwZW50KHVuc3BlbnQpIHtcbiAgICAgICAgdW5zcGVudC5hbW91bnQgPSB1bnNwZW50LnNhdG9zaGlzO1xuICAgICAgICB1bnNwZW50Lm4gPSB1bnNwZW50LnZvdXQ7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHVuc3BlbnRzO1xuICAgIH0pLmNhbGwodGhpcyk7XG4gIH1cblxuICB2ZXJpZnlSZWNvdmVyeVRyYW5zYWN0aW9uKHR4SW5mbzogVmVyaWZ5UmVjb3ZlcnlUcmFuc2FjdGlvbk9wdGlvbnMpOiBCbHVlYmlyZDxhbnk+IHtcbiAgICByZXR1cm4gQmx1ZWJpcmQucmVqZWN0KG5ldyBlcnJvcnMuTWV0aG9kTm90SW1wbGVtZW50ZWRFcnJvcigpKTtcbiAgfVxufVxuIl19