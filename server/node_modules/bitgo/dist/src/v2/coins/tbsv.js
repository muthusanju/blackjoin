"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var bsv_1 = require("./bsv");
var bitcoin = require("bitgo-utxo-lib");
var Tbsv = /** @class */ (function (_super) {
    __extends(Tbsv, _super);
    function Tbsv(bitgo) {
        return _super.call(this, bitgo, bitcoin.networks.bitcoinsvTestnet) || this;
    }
    Tbsv.createInstance = function (bitgo) {
        return new Tbsv(bitgo);
    };
    Tbsv.prototype.getChain = function () {
        return 'tbsv';
    };
    Tbsv.prototype.getFullName = function () {
        return 'Testnet Bitcoin SV';
    };
    Tbsv.prototype.getAddressPrefix = function () {
        return 'bchtest';
    };
    /**
     * Checks if the unspent comes from the BitGo taint provider address
     * @param unspent
     * @returns {boolean}
     */
    Tbsv.prototype.isBitGoTaintedUnspent = function (unspent) {
        return unspent.address === '2MuMnPoSDgWEpNWH28X2nLtYMXQJCyT61eY';
    };
    return Tbsv;
}(bsv_1.Bsv));
exports.Tbsv = Tbsv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGJzdi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92Mi9jb2lucy90YnN2LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUtBLDZCQUE0QjtBQUM1Qix3Q0FBMEM7QUFFMUM7SUFBMEIsd0JBQUc7SUFDM0IsY0FBWSxLQUFZO2VBQ3RCLGtCQUFNLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDO0lBQ2pELENBQUM7SUFFTSxtQkFBYyxHQUFyQixVQUFzQixLQUFZO1FBQ2hDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELHVCQUFRLEdBQVI7UUFDRSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsMEJBQVcsR0FBWDtRQUNFLE9BQU8sb0JBQW9CLENBQUM7SUFDOUIsQ0FBQztJQUVELCtCQUFnQixHQUFoQjtRQUNFLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsb0NBQXFCLEdBQXJCLFVBQXNCLE9BQU87UUFDM0IsT0FBTyxPQUFPLENBQUMsT0FBTyxLQUFLLHFDQUFxQyxDQUFDO0lBQ25FLENBQUM7SUFDSCxXQUFDO0FBQUQsQ0FBQyxBQTdCRCxDQUEwQixTQUFHLEdBNkI1QjtBQTdCWSxvQkFBSSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKi9cbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuaW1wb3J0IHsgQmFzZUNvaW4gfSBmcm9tICcuLi9iYXNlQ29pbic7XG5pbXBvcnQgeyBCc3YgfSBmcm9tICcuL2Jzdic7XG5pbXBvcnQgKiBhcyBiaXRjb2luIGZyb20gJ2JpdGdvLXV0eG8tbGliJztcblxuZXhwb3J0IGNsYXNzIFRic3YgZXh0ZW5kcyBCc3Yge1xuICBjb25zdHJ1Y3RvcihiaXRnbzogQml0R28pIHtcbiAgICBzdXBlcihiaXRnbywgYml0Y29pbi5uZXR3b3Jrcy5iaXRjb2luc3ZUZXN0bmV0KTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVJbnN0YW5jZShiaXRnbzogQml0R28pOiBCYXNlQ29pbiB7XG4gICAgcmV0dXJuIG5ldyBUYnN2KGJpdGdvKTtcbiAgfVxuXG4gIGdldENoYWluKCkge1xuICAgIHJldHVybiAndGJzdic7XG4gIH1cblxuICBnZXRGdWxsTmFtZSgpIHtcbiAgICByZXR1cm4gJ1Rlc3RuZXQgQml0Y29pbiBTVic7XG4gIH1cblxuICBnZXRBZGRyZXNzUHJlZml4KCkge1xuICAgIHJldHVybiAnYmNodGVzdCc7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSB1bnNwZW50IGNvbWVzIGZyb20gdGhlIEJpdEdvIHRhaW50IHByb3ZpZGVyIGFkZHJlc3NcbiAgICogQHBhcmFtIHVuc3BlbnRcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc0JpdEdvVGFpbnRlZFVuc3BlbnQodW5zcGVudCkge1xuICAgIHJldHVybiB1bnNwZW50LmFkZHJlc3MgPT09ICcyTXVNblBvU0RnV0VwTldIMjhYMm5MdFlNWFFKQ3lUNjFlWSc7XG4gIH1cbn1cbiJdfQ==