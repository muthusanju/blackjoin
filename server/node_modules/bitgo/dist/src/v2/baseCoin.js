"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var bignumber_js_1 = require("bignumber.js");
var bitcoin = require("bitgo-utxo-lib");
var bitcoin_1 = require("../bitcoin");
var bitcoinMessage = require('bitcoinjs-message');
var Bluebird = require("bluebird");
var errors = require("../errors");
var co = Bluebird.coroutine;
var wallet_1 = require("./wallet");
var wallets_1 = require("./wallets");
var markets_1 = require("./markets");
var webhooks_1 = require("./webhooks");
var pendingApprovals_1 = require("./pendingApprovals");
var keychains_1 = require("./keychains");
var enterprises_1 = require("./enterprises");
var BaseCoin = /** @class */ (function () {
    function BaseCoin(bitgo) {
        this.bitgo = bitgo;
        this._url = this.bitgo.url('/', 2);
        this._wallets = new wallets_1.Wallets(this.bitgo, this);
        this._keychains = new keychains_1.Keychains(this.bitgo, this);
        this._webhooks = new webhooks_1.Webhooks(this.bitgo, this);
        this._pendingApprovals = new pendingApprovals_1.PendingApprovals(this.bitgo, this);
        this._enterprises = new enterprises_1.Enterprises(this.bitgo, this);
        this._markets = new markets_1.Markets(this.bitgo, this);
    }
    BaseCoin.prototype.url = function (suffix) {
        return this._url + this.getChain() + suffix;
    };
    BaseCoin.prototype.wallets = function () {
        return this._wallets;
    };
    BaseCoin.prototype.enterprises = function () {
        return this._enterprises;
    };
    BaseCoin.prototype.keychains = function () {
        return this._keychains;
    };
    BaseCoin.prototype.webhooks = function () {
        return this._webhooks;
    };
    BaseCoin.prototype.pendingApprovals = function () {
        return this._pendingApprovals;
    };
    BaseCoin.prototype.markets = function () {
        return this._markets;
    };
    Object.defineProperty(BaseCoin, "coinTokenPatternSeparator", {
        get: function () {
            return this._coinTokenPatternSeparator;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseCoin.prototype, "type", {
        get: function () {
            return this.getChain();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Flag for sending value of 0.
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    BaseCoin.prototype.valuelessTransferAllowed = function () {
        return false;
    };
    /**
     * Flag for sending data along with transactions
     * @returns {boolean} True if okay to send tx data (ETH), false otherwise
     */
    BaseCoin.prototype.transactionDataAllowed = function () {
        return false;
    };
    /**
     * Flag for determining whether this coin supports account consolidations
     * from its receive addresses to the root address.
     * @returns {boolean} True if okay to consolidate over this coin; false, otherwise
     */
    BaseCoin.prototype.allowsAccountConsolidations = function () {
        return false;
    };
    /**
     * Convert a currency amount represented in base units (satoshi, wei, atoms, drops, stroops)
     * to big units (btc, eth, rmg, xrp, xlm)
     */
    BaseCoin.prototype.baseUnitsToBigUnits = function (baseUnits) {
        var dividend = this.getBaseFactor();
        var bigNumber = new bignumber_js_1.BigNumber(baseUnits).dividedBy(dividend);
        // set the format so commas aren't added to large coin amounts
        // @ts-ignore
        return bigNumber.toFormat(null, null, { groupSeparator: '', decimalSeparator: '.' });
    };
    /**
     * Convert a currency amount represented in big units (btc, eth, rmg, xrp, xlm)
     * to base units (satoshi, wei, atoms, drops, stroops)
     * @param bigUnits
     */
    BaseCoin.prototype.bigUnitsToBaseUnits = function (bigUnits) {
        var multiplier = this.getBaseFactor();
        var bigNumber = new bignumber_js_1.BigNumber(bigUnits).times(multiplier);
        if (!bigNumber.isInteger()) {
            throw new Error("non-integer output resulted from multiplying " + bigUnits + " by " + multiplier);
        }
        return bigNumber.toFixed(0);
    };
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     */
    BaseCoin.prototype.signMessage = function (key, message) {
        var privateKey = bitcoin.HDNode.fromBase58(key.prv).getKey();
        var privateKeyBuffer = privateKey.d.toBuffer(32);
        var isCompressed = privateKey.compressed;
        var prefix = bitcoin.networks.bitcoin.messagePrefix;
        return bitcoinMessage.sign(message, privateKeyBuffer, isCompressed, prefix);
    };
    /**
     * Check whether a coin supports blockTarget for transactions to be included in
     * @returns {boolean}
     */
    BaseCoin.prototype.supportsBlockTarget = function () {
        return false;
    };
    /**
     * Hook to add additional parameters to the wallet generation
     * @param walletParams
     * @param keychains
     * @return {*}
     */
    BaseCoin.prototype.supplementGenerateWallet = function (walletParams, keychains) {
        return Bluebird.resolve(walletParams);
    };
    /**
     * Get extra parameters for prebuilding a tx. Add things like hop transaction params
     */
    BaseCoin.prototype.getExtraPrebuildParams = function (buildParams, callback) {
        return Bluebird.resolve({}).asCallback(callback);
    };
    /**
     * Modify prebuild after receiving it from the server. Add things like nlocktime
     */
    BaseCoin.prototype.postProcessPrebuild = function (prebuildResponse, callback) {
        return Bluebird.resolve(prebuildResponse).asCallback(callback);
    };
    /**
     * Coin-specific things done before signing a transaction, i.e. verification
     */
    BaseCoin.prototype.presignTransaction = function (params, callback) {
        return Bluebird.resolve(params).asCallback(callback);
    };
    /**
     * Create a new wallet object from a wallet data object
     * @param walletParams
     */
    BaseCoin.prototype.newWalletObject = function (walletParams) {
        return new wallet_1.Wallet(this.bitgo, this, walletParams);
    };
    /**
     * Fetch fee estimate information from the server
     * @param {Object} params The params passed into the function
     * @param {Integer} params.numBlocks The number of blocks to target for conformation (Only works for btc)
     * @param callback
     * @returns {Object} The info returned from the merchant server
     */
    BaseCoin.prototype.feeEstimate = function (params, callback) {
        var self = this;
        return co(function coFeeEstimate() {
            var query;
            return __generator(this, function (_a) {
                query = {};
                if (params && params.numBlocks) {
                    query.numBlocks = params.numBlocks;
                }
                return [2 /*return*/, self.bitgo
                        .get(self.url('/tx/fee'))
                        .query(query)
                        .result()];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * The cold wallet tool uses this function to derive an extended key that is based on the passed key and seed
     * @param key
     * @param seed
     * @returns {{key: string, derivationPath: string}}
     */
    BaseCoin.prototype.deriveKeyWithSeed = function (_a) {
        var key = _a.key, seed = _a.seed;
        var derivationPathInput = bitcoin.crypto.hash256("" + seed).toString('hex');
        var derivationPathParts = [
            parseInt(derivationPathInput.slice(0, 7), 16),
            parseInt(derivationPathInput.slice(7, 14), 16),
        ];
        var derivationPath = 'm/999999/' + derivationPathParts.join('/');
        var keyNode = bitcoin.HDNode.fromBase58(key);
        var derivedKeyNode = bitcoin_1.hdPath(keyNode).derive(derivationPath);
        return {
            key: derivedKeyNode.toBase58(),
            derivationPath: derivationPath,
        };
    };
    /**
     * Specifies what key we will need for signing - right now we just need the
     * user key.
     */
    BaseCoin.prototype.keyIdsForSigning = function () {
        return [keychains_1.KeyIndices.USER];
    };
    /**
     * Perform additional checks before adding a bitgo key. Base controller
     * is a no-op, but coin-specific controller may do something
     * @param params
     */
    BaseCoin.prototype.preCreateBitGo = function (params) { };
    BaseCoin.prototype.initiateRecovery = function (params) {
        var self = this;
        return co(function initiateRecovery() {
            function validatePassphraseKey(userKey, passphrase) {
                try {
                    if (!userKey.startsWith('xprv') && !userKey.startsWith('xpub')) {
                        userKey = self.bitgo.decrypt({
                            input: userKey,
                            password: passphrase,
                        });
                    }
                    return bitcoin.HDNode.fromBase58(userKey);
                }
                catch (e) {
                    throw new Error('Failed to decrypt user key with passcode - try again!');
                }
            }
            var keys, userKey, backupKey, bitgoXpub, destinationAddress, passphrase, isKrsRecovery, key, backupHDNode, bitgoHDNode;
            return __generator(this, function (_a) {
                keys = [];
                userKey = params.userKey;
                backupKey = params.backupKey;
                bitgoXpub = params.bitgoKey;
                destinationAddress = params.recoveryDestination;
                passphrase = params.walletPassphrase;
                isKrsRecovery = backupKey.startsWith('xpub') && !userKey.startsWith('xpub');
                key = validatePassphraseKey(userKey, passphrase);
                keys.push(key);
                // Validate the backup key
                try {
                    if (!backupKey.startsWith('xprv') && !isKrsRecovery && !backupKey.startsWith('xpub')) {
                        backupKey = self.bitgo.decrypt({
                            input: backupKey,
                            password: passphrase,
                        });
                    }
                    backupHDNode = bitcoin.HDNode.fromBase58(backupKey);
                    keys.push(backupHDNode);
                }
                catch (e) {
                    throw new Error('Failed to decrypt backup key with passcode - try again!');
                }
                try {
                    bitgoHDNode = bitcoin.HDNode.fromBase58(bitgoXpub);
                    keys.push(bitgoHDNode);
                }
                catch (e) {
                    if (self.getFamily() !== 'xrp') {
                        // in XRP recoveries, the BitGo xpub is optional
                        throw new Error('Failed to parse bitgo xpub!');
                    }
                }
                // Validate the destination address
                try {
                    if (!self.isValidAddress(destinationAddress)) {
                        throw new Error('Invalid destination address!');
                    }
                }
                catch (e) {
                    // if isValidAddress is not implemented, assume the destination
                    // address is valid and let the tx go through. If the destination
                    // is actually invalid (`isValidAddress` returns false and does
                    // not throw), this method will still throw
                    if (!(e instanceof errors.MethodNotImplementedError)) {
                        throw e;
                    }
                }
                return [2 /*return*/, keys];
            });
        }).call(this);
    };
    // Some coins can have their tx info verified, if a public tx decoder is available
    BaseCoin.prototype.verifyRecoveryTransaction = function (txInfo) {
        return Bluebird.reject(new errors.MethodNotImplementedError());
    };
    /**
     * Return wether the given m of n wallet signers/ key amounts are valid for the coin
     */
    BaseCoin.prototype.isValidMofNSetup = function (_a) {
        var m = _a.m, n = _a.n;
        return m === 2 && n === 3;
    };
    BaseCoin._coinTokenPatternSeparator = ':';
    return BaseCoin;
}());
exports.BaseCoin = BaseCoin;
//# sourceMappingURL=data:application/json;base64,