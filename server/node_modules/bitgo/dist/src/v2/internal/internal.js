"use strict";
/**
 * @prettier
 * @hidden
 */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 */
var Bluebird = require("bluebird");
var lodash_1 = require("lodash");
var co = Bluebird.coroutine;
/**
 * Internal function to centralize this route for wallet-scoped and enterprise-scoped queries
 * Params must contain either walletId or enterpriseId
 * @param params Id to query for pending transaction
 * @param baseCoin The coin object
 * @param bitgo The BitGo object
 * @returns result of the query
 */
function getFirstPendingTransaction(params, baseCoin, bitgo) {
    return co(function () {
        return __generator(this, function (_a) {
            // These errors should never happen when this is called from wallet.js or enterprise.js
            if (lodash_1.isUndefined(baseCoin)) {
                throw new Error('Must provide baseCoin');
            }
            if (lodash_1.isUndefined(bitgo)) {
                throw new Error('Must provide BitGo object');
            }
            if (lodash_1.isUndefined(params.walletId) && lodash_1.isUndefined(params.enterpriseId)) {
                throw new Error('Must provide either walletId or enterpriseId');
            }
            return [2 /*return*/, bitgo
                    .get(baseCoin.url('/tx/pending/first'))
                    .query(params)
                    .result()];
        });
    }).call(this);
}
exports.getFirstPendingTransaction = getFirstPendingTransaction;
/**
 * convert a 4 element Uint8Array to a 4 byte Number
 *
 * @param bytes
 * @return 4 byte number
 */
function bytesToWord(bytes) {
    if (!(bytes instanceof Uint8Array) || bytes.length !== 4) {
        throw new Error('bytes must be a Uint8Array with length 4');
    }
    return bytes.reduce(function (num, byte) { return num * 0x100 + byte; }, 0);
}
exports.bytesToWord = bytesToWord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdjIvaW50ZXJuYWwvaW50ZXJuYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSDtHQUNHO0FBQ0gsbUNBQXFDO0FBR3JDLGlDQUFxQztBQUVyQyxJQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO0FBRTlCOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQiwwQkFBMEIsQ0FDeEMsTUFBb0QsRUFDcEQsUUFBa0IsRUFDbEIsS0FBWTtJQUVaLE9BQU8sRUFBRSxDQUFDOztZQUNSLHVGQUF1RjtZQUN2RixJQUFJLG9CQUFXLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQzthQUMxQztZQUNELElBQUksb0JBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2FBQzlDO1lBQ0QsSUFBSSxvQkFBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxvQkFBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDcEUsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO2FBQ2pFO1lBQ0Qsc0JBQU8sS0FBSztxQkFDVCxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO3FCQUN0QyxLQUFLLENBQUMsTUFBTSxDQUFDO3FCQUNiLE1BQU0sRUFBRSxFQUFDOztLQUNiLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEIsQ0FBQztBQXJCRCxnRUFxQkM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLFdBQVcsQ0FBQyxLQUFrQjtJQUM1QyxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksVUFBVSxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDeEQsTUFBTSxJQUFJLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLElBQUksSUFBSyxPQUFBLEdBQUcsR0FBRyxLQUFLLEdBQUcsSUFBSSxFQUFsQixDQUFrQixFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFORCxrQ0FNQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKiBAaGlkZGVuXG4gKi9cblxuLyoqXG4gKi9cbmltcG9ydCAqIGFzIEJsdWViaXJkIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuaW1wb3J0IHsgQmFzZUNvaW4gfSBmcm9tICcuLi9iYXNlQ29pbic7XG5pbXBvcnQgeyBpc1VuZGVmaW5lZCB9IGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IGNvID0gQmx1ZWJpcmQuY29yb3V0aW5lO1xuXG4vKipcbiAqIEludGVybmFsIGZ1bmN0aW9uIHRvIGNlbnRyYWxpemUgdGhpcyByb3V0ZSBmb3Igd2FsbGV0LXNjb3BlZCBhbmQgZW50ZXJwcmlzZS1zY29wZWQgcXVlcmllc1xuICogUGFyYW1zIG11c3QgY29udGFpbiBlaXRoZXIgd2FsbGV0SWQgb3IgZW50ZXJwcmlzZUlkXG4gKiBAcGFyYW0gcGFyYW1zIElkIHRvIHF1ZXJ5IGZvciBwZW5kaW5nIHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0gYmFzZUNvaW4gVGhlIGNvaW4gb2JqZWN0XG4gKiBAcGFyYW0gYml0Z28gVGhlIEJpdEdvIG9iamVjdFxuICogQHJldHVybnMgcmVzdWx0IG9mIHRoZSBxdWVyeVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rmlyc3RQZW5kaW5nVHJhbnNhY3Rpb24oXG4gIHBhcmFtczogeyB3YWxsZXRJZD86IHN0cmluZzsgZW50ZXJwcmlzZUlkPzogc3RyaW5nIH0sXG4gIGJhc2VDb2luOiBCYXNlQ29pbixcbiAgYml0Z286IEJpdEdvXG4pOiBCbHVlYmlyZDxhbnk+IHtcbiAgcmV0dXJuIGNvKGZ1bmN0aW9uKigpIHtcbiAgICAvLyBUaGVzZSBlcnJvcnMgc2hvdWxkIG5ldmVyIGhhcHBlbiB3aGVuIHRoaXMgaXMgY2FsbGVkIGZyb20gd2FsbGV0LmpzIG9yIGVudGVycHJpc2UuanNcbiAgICBpZiAoaXNVbmRlZmluZWQoYmFzZUNvaW4pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBiYXNlQ29pbicpO1xuICAgIH1cbiAgICBpZiAoaXNVbmRlZmluZWQoYml0Z28pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBCaXRHbyBvYmplY3QnKTtcbiAgICB9XG4gICAgaWYgKGlzVW5kZWZpbmVkKHBhcmFtcy53YWxsZXRJZCkgJiYgaXNVbmRlZmluZWQocGFyYW1zLmVudGVycHJpc2VJZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGVpdGhlciB3YWxsZXRJZCBvciBlbnRlcnByaXNlSWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIGJpdGdvXG4gICAgICAuZ2V0KGJhc2VDb2luLnVybCgnL3R4L3BlbmRpbmcvZmlyc3QnKSlcbiAgICAgIC5xdWVyeShwYXJhbXMpXG4gICAgICAucmVzdWx0KCk7XG4gIH0pLmNhbGwodGhpcyk7XG59XG5cbi8qKlxuICogY29udmVydCBhIDQgZWxlbWVudCBVaW50OEFycmF5IHRvIGEgNCBieXRlIE51bWJlclxuICpcbiAqIEBwYXJhbSBieXRlc1xuICogQHJldHVybiA0IGJ5dGUgbnVtYmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvV29yZChieXRlcz86IFVpbnQ4QXJyYXkpOiBudW1iZXIge1xuICBpZiAoIShieXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHx8IGJ5dGVzLmxlbmd0aCAhPT0gNCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYnl0ZXMgbXVzdCBiZSBhIFVpbnQ4QXJyYXkgd2l0aCBsZW5ndGggNCcpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzLnJlZHVjZSgobnVtLCBieXRlKSA9PiBudW0gKiAweDEwMCArIGJ5dGUsIDApO1xufVxuIl19