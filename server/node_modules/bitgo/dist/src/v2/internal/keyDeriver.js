"use strict";
/**
 * @prettier
 * @hidden
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 */
var createHmac = require("create-hmac");
/**
 * Heirarchical determinisitic key derivation for the ed25519 elliptic curve,
 * as defined in SLIP-0010.
 *
 * https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0005.md
 * https://github.com/satoshilabs/slips/blob/master/slip-0010.md
 */
var Ed25519KeyDeriver = /** @class */ (function () {
    function Ed25519KeyDeriver() {
    }
    /**
     * Derive a SLIP-0010 key given a path and master key seed.
     *
     * @param path derivation path
     * @param seed key seed
     */
    Ed25519KeyDeriver.derivePath = function (path, seed) {
        var _this = this;
        if (!this.isValidPath(path)) {
            throw new Error('Invalid derivation path');
        }
        var _a = this.getMasterKeyFromSeed(seed), key = _a.key, chainCode = _a.chainCode;
        var segments = path
            .split('/')
            .slice(1)
            .map(this.replaceDerive);
        return segments.reduce(function (parentKeys, segment) { return _this.CKDPriv(parentKeys, segment + Ed25519KeyDeriver.HARDENED_OFFSET); }, { key: key, chainCode: chainCode });
    };
    /**
     * Generate a SLIP-0010 master key from the entropy seed
     *
     * @param seed master key seed used to recreate master key
     */
    Ed25519KeyDeriver.getMasterKeyFromSeed = function (seed) {
        var hmac = createHmac('sha512', Ed25519KeyDeriver.ED25519_CURVE);
        var I = hmac.update(Buffer.from(seed, 'hex')).digest();
        var IL = I.slice(0, 32);
        var IR = I.slice(32);
        return {
            key: IL,
            chainCode: IR,
        };
    };
    /**
     * Calculate a child private key given the parent key, the chain code, and the child index.
     *
     * @param key parent key
     * @param chainCode chain code for parent key
     * @param index index of child to derive
     */
    Ed25519KeyDeriver.CKDPriv = function (_a, index) {
        var key = _a.key, chainCode = _a.chainCode;
        var indexBuffer = Buffer.allocUnsafe(4);
        indexBuffer.writeUInt32BE(index, 0);
        var data = Buffer.concat([Buffer.alloc(1, 0), key, indexBuffer]);
        var I = createHmac('sha512', chainCode)
            .update(data)
            .digest();
        var IL = I.slice(0, 32);
        var IR = I.slice(32);
        return {
            key: IL,
            chainCode: IR,
        };
    };
    Ed25519KeyDeriver.isValidPath = function (path) {
        if (!Ed25519KeyDeriver.PATH_REGEX.test(path)) {
            return false;
        }
        return !path
            .split('/')
            .slice(1)
            .map(this.replaceDerive)
            .some(isNaN);
    };
    /**
     * This key derivation code was copied and adapted from:
     * https://github.com/chatch/stellar-hd-wallet/blob/612c12325ca9047dce460016fb7d148f55f575ca/src/hd-key.js
     *
     * There have been some slight modifications to improve typescript support.
     *
     * The original ed25519-hd-key module is licensed under "GPL-3".
     */
    Ed25519KeyDeriver.ED25519_CURVE = 'ed25519 seed';
    Ed25519KeyDeriver.HARDENED_OFFSET = 0x80000000;
    Ed25519KeyDeriver.PATH_REGEX = new RegExp("^m(\\/[0-9]+')+$");
    Ed25519KeyDeriver.replaceDerive = function (val) { return parseInt(val.replace("'", ''), 10); };
    return Ed25519KeyDeriver;
}());
exports.Ed25519KeyDeriver = Ed25519KeyDeriver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5RGVyaXZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92Mi9pbnRlcm5hbC9rZXlEZXJpdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7O0FBRUg7R0FDRztBQUNILHdDQUEwQztBQU8xQzs7Ozs7O0dBTUc7QUFDSDtJQUFBO0lBb0ZBLENBQUM7SUF0RUM7Ozs7O09BS0c7SUFDVyw0QkFBVSxHQUF4QixVQUF5QixJQUFZLEVBQUUsSUFBWTtRQUFuRCxpQkFhQztRQVpDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUM1QztRQUNLLElBQUEsb0NBQW9ELEVBQWxELFlBQUcsRUFBRSx3QkFBNkMsQ0FBQztRQUMzRCxJQUFNLFFBQVEsR0FBRyxJQUFJO2FBQ2xCLEtBQUssQ0FBQyxHQUFHLENBQUM7YUFDVixLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ1IsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMzQixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQ3BCLFVBQUMsVUFBVSxFQUFFLE9BQU8sSUFBSyxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsRUFBckUsQ0FBcUUsRUFDOUYsRUFBRSxHQUFHLEtBQUEsRUFBRSxTQUFTLFdBQUEsRUFBRSxDQUNuQixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDWSxzQ0FBb0IsR0FBbkMsVUFBb0MsSUFBWTtRQUM5QyxJQUFNLElBQUksR0FBRyxVQUFVLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ25FLElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN6RCxJQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxQixJQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLE9BQU87WUFDTCxHQUFHLEVBQUUsRUFBRTtZQUNQLFNBQVMsRUFBRSxFQUFFO1NBQ2QsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDWSx5QkFBTyxHQUF0QixVQUF1QixFQUE2QixFQUFFLEtBQWE7WUFBMUMsWUFBRyxFQUFFLHdCQUFTO1FBQ3JDLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEMsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ25FLElBQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDO2FBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUM7YUFDWixNQUFNLEVBQUUsQ0FBQztRQUNaLElBQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLElBQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkIsT0FBTztZQUNMLEdBQUcsRUFBRSxFQUFFO1lBQ1AsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFDO0lBQ0osQ0FBQztJQUdjLDZCQUFXLEdBQTFCLFVBQTJCLElBQVk7UUFDckMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE9BQU8sQ0FBQyxJQUFJO2FBQ1QsS0FBSyxDQUFDLEdBQUcsQ0FBQzthQUNWLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDUixHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakIsQ0FBQztJQWxGRDs7Ozs7OztPQU9HO0lBRXFCLCtCQUFhLEdBQUcsY0FBYyxDQUFDO0lBQy9CLGlDQUFlLEdBQUcsVUFBVSxDQUFDO0lBQzdCLDRCQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQTZEckQsK0JBQWEsR0FBRyxVQUFDLEdBQVcsSUFBYSxPQUFBLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBbEMsQ0FBa0MsQ0FBQztJQVc3Rix3QkFBQztDQUFBLEFBcEZELElBb0ZDO0FBcEZZLDhDQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKiBAaGlkZGVuXG4gKi9cblxuLyoqXG4gKi9cbmltcG9ydCAqIGFzIGNyZWF0ZUhtYWMgZnJvbSAnY3JlYXRlLWhtYWMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEhkS2V5cGFpciB7XG4gIGtleTogQnVmZmVyO1xuICBjaGFpbkNvZGU6IEJ1ZmZlcjtcbn1cblxuLyoqXG4gKiBIZWlyYXJjaGljYWwgZGV0ZXJtaW5pc2l0aWMga2V5IGRlcml2YXRpb24gZm9yIHRoZSBlZDI1NTE5IGVsbGlwdGljIGN1cnZlLFxuICogYXMgZGVmaW5lZCBpbiBTTElQLTAwMTAuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL3N0ZWxsYXIvc3RlbGxhci1wcm90b2NvbC9ibG9iL21hc3Rlci9lY29zeXN0ZW0vc2VwLTAwMDUubWRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zYXRvc2hpbGFicy9zbGlwcy9ibG9iL21hc3Rlci9zbGlwLTAwMTAubWRcbiAqL1xuZXhwb3J0IGNsYXNzIEVkMjU1MTlLZXlEZXJpdmVyIHtcbiAgLyoqXG4gICAqIFRoaXMga2V5IGRlcml2YXRpb24gY29kZSB3YXMgY29waWVkIGFuZCBhZGFwdGVkIGZyb206XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGF0Y2gvc3RlbGxhci1oZC13YWxsZXQvYmxvYi82MTJjMTIzMjVjYTkwNDdkY2U0NjAwMTZmYjdkMTQ4ZjU1ZjU3NWNhL3NyYy9oZC1rZXkuanNcbiAgICpcbiAgICogVGhlcmUgaGF2ZSBiZWVuIHNvbWUgc2xpZ2h0IG1vZGlmaWNhdGlvbnMgdG8gaW1wcm92ZSB0eXBlc2NyaXB0IHN1cHBvcnQuXG4gICAqXG4gICAqIFRoZSBvcmlnaW5hbCBlZDI1NTE5LWhkLWtleSBtb2R1bGUgaXMgbGljZW5zZWQgdW5kZXIgXCJHUEwtM1wiLlxuICAgKi9cblxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBFRDI1NTE5X0NVUlZFID0gJ2VkMjU1MTkgc2VlZCc7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEhBUkRFTkVEX09GRlNFVCA9IDB4ODAwMDAwMDA7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFBBVEhfUkVHRVggPSBuZXcgUmVnRXhwKFwiXm0oXFxcXC9bMC05XSsnKSskXCIpO1xuXG4gIC8qKlxuICAgKiBEZXJpdmUgYSBTTElQLTAwMTAga2V5IGdpdmVuIGEgcGF0aCBhbmQgbWFzdGVyIGtleSBzZWVkLlxuICAgKlxuICAgKiBAcGFyYW0gcGF0aCBkZXJpdmF0aW9uIHBhdGhcbiAgICogQHBhcmFtIHNlZWQga2V5IHNlZWRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVyaXZlUGF0aChwYXRoOiBzdHJpbmcsIHNlZWQ6IHN0cmluZyk6IEhkS2V5cGFpciB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWRQYXRoKHBhdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGVyaXZhdGlvbiBwYXRoJyk7XG4gICAgfVxuICAgIGNvbnN0IHsga2V5LCBjaGFpbkNvZGUgfSA9IHRoaXMuZ2V0TWFzdGVyS2V5RnJvbVNlZWQoc2VlZCk7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBwYXRoXG4gICAgICAuc3BsaXQoJy8nKVxuICAgICAgLnNsaWNlKDEpXG4gICAgICAubWFwKHRoaXMucmVwbGFjZURlcml2ZSk7XG4gICAgcmV0dXJuIHNlZ21lbnRzLnJlZHVjZShcbiAgICAgIChwYXJlbnRLZXlzLCBzZWdtZW50KSA9PiB0aGlzLkNLRFByaXYocGFyZW50S2V5cywgc2VnbWVudCArIEVkMjU1MTlLZXlEZXJpdmVyLkhBUkRFTkVEX09GRlNFVCksXG4gICAgICB7IGtleSwgY2hhaW5Db2RlIH1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgU0xJUC0wMDEwIG1hc3RlciBrZXkgZnJvbSB0aGUgZW50cm9weSBzZWVkXG4gICAqXG4gICAqIEBwYXJhbSBzZWVkIG1hc3RlciBrZXkgc2VlZCB1c2VkIHRvIHJlY3JlYXRlIG1hc3RlciBrZXlcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGdldE1hc3RlcktleUZyb21TZWVkKHNlZWQ6IHN0cmluZykge1xuICAgIGNvbnN0IGhtYWMgPSBjcmVhdGVIbWFjKCdzaGE1MTInLCBFZDI1NTE5S2V5RGVyaXZlci5FRDI1NTE5X0NVUlZFKTtcbiAgICBjb25zdCBJID0gaG1hYy51cGRhdGUoQnVmZmVyLmZyb20oc2VlZCwgJ2hleCcpKS5kaWdlc3QoKTtcbiAgICBjb25zdCBJTCA9IEkuc2xpY2UoMCwgMzIpO1xuICAgIGNvbnN0IElSID0gSS5zbGljZSgzMik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleTogSUwsXG4gICAgICBjaGFpbkNvZGU6IElSLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGEgY2hpbGQgcHJpdmF0ZSBrZXkgZ2l2ZW4gdGhlIHBhcmVudCBrZXksIHRoZSBjaGFpbiBjb2RlLCBhbmQgdGhlIGNoaWxkIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0ga2V5IHBhcmVudCBrZXlcbiAgICogQHBhcmFtIGNoYWluQ29kZSBjaGFpbiBjb2RlIGZvciBwYXJlbnQga2V5XG4gICAqIEBwYXJhbSBpbmRleCBpbmRleCBvZiBjaGlsZCB0byBkZXJpdmVcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIENLRFByaXYoeyBrZXksIGNoYWluQ29kZSB9OiBIZEtleXBhaXIsIGluZGV4OiBudW1iZXIpOiBIZEtleXBhaXIge1xuICAgIGNvbnN0IGluZGV4QnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQpO1xuICAgIGluZGV4QnVmZmVyLndyaXRlVUludDMyQkUoaW5kZXgsIDApO1xuICAgIGNvbnN0IGRhdGEgPSBCdWZmZXIuY29uY2F0KFtCdWZmZXIuYWxsb2MoMSwgMCksIGtleSwgaW5kZXhCdWZmZXJdKTtcbiAgICBjb25zdCBJID0gY3JlYXRlSG1hYygnc2hhNTEyJywgY2hhaW5Db2RlKVxuICAgICAgLnVwZGF0ZShkYXRhKVxuICAgICAgLmRpZ2VzdCgpO1xuICAgIGNvbnN0IElMID0gSS5zbGljZSgwLCAzMik7XG4gICAgY29uc3QgSVIgPSBJLnNsaWNlKDMyKTtcbiAgICByZXR1cm4ge1xuICAgICAga2V5OiBJTCxcbiAgICAgIGNoYWluQ29kZTogSVIsXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHJlcGxhY2VEZXJpdmUgPSAodmFsOiBzdHJpbmcpOiBudW1iZXIgPT4gcGFyc2VJbnQodmFsLnJlcGxhY2UoXCInXCIsICcnKSwgMTApO1xuICBwcml2YXRlIHN0YXRpYyBpc1ZhbGlkUGF0aChwYXRoOiBzdHJpbmcpIHtcbiAgICBpZiAoIUVkMjU1MTlLZXlEZXJpdmVyLlBBVEhfUkVHRVgudGVzdChwYXRoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gIXBhdGhcbiAgICAgIC5zcGxpdCgnLycpXG4gICAgICAuc2xpY2UoMSlcbiAgICAgIC5tYXAodGhpcy5yZXBsYWNlRGVyaXZlKVxuICAgICAgLnNvbWUoaXNOYU4pO1xuICB9XG59XG4iXX0=