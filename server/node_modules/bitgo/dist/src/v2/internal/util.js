"use strict";
/**
 * @prettier
 * @hidden
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 */
var bitcoin = require("bitgo-utxo-lib");
var Big = require("big.js");
var _ = require("lodash");
var crypto = require("crypto");
var debugLib = require("debug");
var errors_1 = require("../../errors");
var debug = debugLib('bitgo:v2:util');
var ethUtil;
var isEthAvailable = false;
var ethImport = 'ethereumjs-util';
Promise.resolve().then(function () { return require('ethereumjs-util'); }).then(function (eth) {
    ethUtil = eth;
    isEthAvailable = true;
})
    .catch(function (e) {
    // ethereum currently not supported
    debug('unable to load ethereumjs-util:');
    debug(e.stack);
});
/**
 * Create a request tracer for tracing workflows which involve multiple round trips to the server
 */
var RequestTracer = /** @class */ (function () {
    function RequestTracer() {
        this._seq = 0;
        this._seed = crypto.randomBytes(10);
    }
    RequestTracer.prototype.inc = function () {
        this._seq++;
    };
    RequestTracer.prototype.toString = function () {
        return this._seed.toString('hex') + "-" + _.padStart(this._seq.toString(16), 4, '0');
    };
    return RequestTracer;
}());
exports.RequestTracer = RequestTracer;
var Util = /** @class */ (function () {
    function Util() {
    }
    /**
     * @deprecated
     */
    Util.isEthAvailable = function () {
        return isEthAvailable;
    };
    /**
     * Convert a big.js big number to an array of unsigned bytes
     * @param bn
     * @deprecated
     */
    Util.bnToByteArrayUnsigned = function (bn) {
        var ba = bn.abs().toByteArray();
        if (ba.length) {
            if (ba[0] === 0) {
                ba = ba.slice(1);
            }
            return ba.map(function (v) {
                return v < 0 ? v + 256 : v;
            });
        }
        else {
            // Empty array, nothing to do
            return ba;
        }
    };
    /**
     * Generate the output script for a BTC P2SH multisig address
     * @param m
     * @param pubKeys
     * @deprecated
     */
    Util.p2shMultisigOutputScript = function (m, pubKeys) {
        var redeemScript = bitcoin.script.multisig.output.encode(m, pubKeys);
        var hash = bitcoin.crypto.hash160(redeemScript);
        return bitcoin.script.scriptHash.output.encode(hash);
    };
    /**
     * Utility method for handling arguments of pageable queries
     * @param params
     * @deprecated
     */
    Util.preparePageableQuery = function (params) {
        if (params === void 0) { params = {}; }
        var query = {};
        if (params.limit) {
            if (!_.isNumber(params.limit)) {
                throw new Error('invalid limit argument, expecting number');
            }
            query.limit = params.limit;
        }
        if (params.skip) {
            if (!_.isNumber(params.skip)) {
                throw new Error('invalid skip argument, expecting number');
            }
            query.skip = params.skip;
        }
        return query;
    };
    /**
     * Create a request identifier for tracing multi-request workflows
     */
    Util.createRequestId = function () {
        return new RequestTracer();
    };
    /**
     * Convert a BTC xpub to an Ethereum address (with 0x) prefix
     * @param xpub
     * @deprecated
     */
    Util.xpubToEthAddress = function (xpub) {
        if (!isEthAvailable) {
            throw new errors_1.EthereumLibraryUnavailableError(ethImport);
        }
        var hdNode = bitcoin.HDNode.fromBase58(xpub);
        var ethPublicKey = hdNode.keyPair.__Q.getEncoded(false).slice(1);
        return ethUtil.bufferToHex(ethUtil.publicToAddress(ethPublicKey, false));
    };
    /**
     * Convert a BTC xpriv to an Ethereum private key (without 0x prefix)
     * @param xprv
     * @deprecated
     */
    Util.xprvToEthPrivateKey = function (xprv) {
        var hdNode = bitcoin.HDNode.fromBase58(xprv);
        var ethPrivateKey = hdNode.keyPair.d.toBuffer(32);
        return ethPrivateKey.toString('hex');
    };
    /**
     * Sign a message using Ethereum's ECsign method and return the signature string
     * @param msgHash
     * @param privKey
     * @deprecated
     */
    Util.ethSignMsgHash = function (msgHash, privKey) {
        if (!isEthAvailable) {
            throw new errors_1.EthereumLibraryUnavailableError(ethImport);
        }
        var signatureInParts = ethUtil.ecsign(new Buffer(ethUtil.stripHexPrefix(msgHash), 'hex'), new Buffer(privKey, 'hex'));
        // Assemble strings from r, s and v
        var r = ethUtil.setLengthLeft(signatureInParts.r, 32).toString('hex');
        var s = ethUtil.setLengthLeft(signatureInParts.s, 32).toString('hex');
        var v = ethUtil.stripHexPrefix(ethUtil.intToHex(signatureInParts.v));
        // Concatenate the r, s and v parts to make the signature string
        return ethUtil.addHexPrefix(r.concat(s, v));
    };
    /**
     * Convert from wei string (or BN) to Ether (multiply by 1e18)
     * @param wei
     * @deprecated
     */
    Util.weiToEtherString = function (wei) {
        if (!isEthAvailable) {
            throw new errors_1.EthereumLibraryUnavailableError(ethImport);
        }
        var bn = wei;
        if (!(wei instanceof ethUtil.BN)) {
            bn = new ethUtil.BN(wei);
        }
        Big.E_POS = 256;
        Big.E_NEG = -18;
        var weiString = bn.toString(10);
        var big = new Big(weiString);
        // 10^18
        var ether = big.div('1000000000000000000');
        return ether.toPrecision();
    };
    /**
     * Recover an ethereum address from a signature and message hash
     * @param msgHash
     * @param signature
     * @deprecated
     */
    Util.ecRecoverEthAddress = function (msgHash, signature) {
        msgHash = ethUtil.stripHexPrefix(msgHash);
        signature = ethUtil.stripHexPrefix(signature);
        var v = parseInt(signature.slice(128, 130), 16);
        var r = new Buffer(signature.slice(0, 64), 'hex');
        var s = new Buffer(signature.slice(64, 128), 'hex');
        var pubKey = ethUtil.ecrecover(new Buffer(msgHash, 'hex'), v, r, s);
        return ethUtil.bufferToHex(ethUtil.pubToAddress(pubKey));
    };
    return Util;
}());
exports.Util = Util;
//# sourceMappingURL=data:application/json;base64,