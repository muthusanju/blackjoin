"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var statics_1 = require("@bitgo/statics");
var coins_1 = require("./coins");
var config_1 = require("../config");
var errors = require("../errors");
var CoinFactory = /** @class */ (function () {
    function CoinFactory() {
        this.coinConstructors = new Map();
    }
    /**
     *
     * @param bitgo
     * @param name
     * @throws CoinNotDefinedError
     * @throws UnsupportedCoinError
     */
    CoinFactory.prototype.getInstance = function (bitgo, name) {
        var staticsCoin;
        try {
            staticsCoin = statics_1.coins.get(name);
        }
        catch (e) {
            if (!(e instanceof statics_1.CoinNotDefinedError)) {
                throw e;
            }
        }
        var constructor = this.coinConstructors.get(name);
        if (constructor) {
            return constructor(bitgo, staticsCoin);
        }
        var ethConstructor = this.coinConstructors.get('eth');
        if (ethConstructor) {
            var ethCoin = ethConstructor(bitgo, staticsCoin);
            if (ethCoin.isValidAddress(name)) {
                var unknownTokenConstructor = coins_1.Erc20Token.createTokenConstructor({
                    type: 'unknown',
                    coin: 'eth',
                    network: 'Mainnet',
                    name: 'Unknown',
                    tokenContractAddress: name,
                    decimalPlaces: 0,
                });
                return unknownTokenConstructor(bitgo);
            }
        }
        throw new errors.UnsupportedCoinError(name);
    };
    CoinFactory.prototype.registerCoinConstructor = function (name, constructor) {
        if (this.coinConstructors.has(name)) {
            throw new Error("coin '" + name + "' is already defined");
        }
        this.coinConstructors.set(name, constructor);
    };
    return CoinFactory;
}());
exports.CoinFactory = CoinFactory;
exports.GlobalCoinFactory = new CoinFactory();
exports.GlobalCoinFactory.registerCoinConstructor('btc', coins_1.Btc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbtc', coins_1.Tbtc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('bch', coins_1.Bch.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbch', coins_1.Tbch.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('bsv', coins_1.Bsv.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbsv', coins_1.Tbsv.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('btg', coins_1.Btg.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbtg', coins_1.Tbtg.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('ltc', coins_1.Ltc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tltc', coins_1.Tltc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('eos', coins_1.Eos.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('teos', coins_1.Teos.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('eth', coins_1.Eth.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('teth', coins_1.Teth.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('rmg', coins_1.Rmg.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('trmg', coins_1.Trmg.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('xrp', coins_1.Xrp.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('txrp', coins_1.Txrp.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('xlm', coins_1.Xlm.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('txlm', coins_1.Txlm.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('dash', coins_1.Dash.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tdash', coins_1.Tdash.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('zec', coins_1.Zec.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tzec', coins_1.Tzec.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('algo', coins_1.Algo.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('talgo', coins_1.Talgo.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('trx', coins_1.Trx.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('ttrx', coins_1.Ttrx.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('ofc', coins_1.Ofc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('susd', coins_1.Susd.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tsusd', coins_1.Tsusd.createInstance);
for (var _i = 0, _a = config_1.tokens.bitcoin.eth.tokens.concat(config_1.tokens.testnet.eth.tokens); _i < _a.length; _i++) {
    var token = _a[_i];
    var tokenConstructor = coins_1.Erc20Token.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
    exports.GlobalCoinFactory.registerCoinConstructor(token.tokenContractAddress, tokenConstructor);
}
for (var _b = 0, _c = config_1.tokens.bitcoin.xlm.tokens.concat(config_1.tokens.testnet.xlm.tokens); _b < _c.length; _b++) {
    var token = _c[_b];
    var tokenConstructor = coins_1.StellarToken.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
}
for (var _d = 0, _e = config_1.tokens.bitcoin.ofc.tokens.concat(config_1.tokens.testnet.ofc.tokens); _d < _e.length; _d++) {
    var ofcToken = _e[_d];
    var tokenConstructor = coins_1.OfcToken.createTokenConstructor(ofcToken);
    exports.GlobalCoinFactory.registerCoinConstructor(ofcToken.type, tokenConstructor);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29pbkZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdjIvY29pbkZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7R0FFRztBQUNILDBDQUF5RjtBQUd6RixpQ0FtQ2lCO0FBQ2pCLG9DQUFtQztBQUVuQyxrQ0FBb0M7QUFJcEM7SUFBQTtRQUNVLHFCQUFnQixHQUFHLElBQUksR0FBRyxFQUEyQixDQUFDO0lBaURoRSxDQUFDO0lBL0NDOzs7Ozs7T0FNRztJQUNJLGlDQUFXLEdBQWxCLFVBQW1CLEtBQVksRUFBRSxJQUFZO1FBQzNDLElBQUksV0FBVyxDQUFDO1FBQ2hCLElBQUk7WUFDRixXQUFXLEdBQUcsZUFBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvQjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLDZCQUFtQixDQUFDLEVBQUU7Z0JBQ3ZDLE1BQU0sQ0FBQyxDQUFDO2FBQ1Q7U0FDRjtRQUVELElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEQsSUFBSSxXQUFXLEVBQUU7WUFDZixPQUFPLFdBQVcsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDeEM7UUFFRCxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hELElBQUksY0FBYyxFQUFFO1lBQ2xCLElBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDbkQsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNoQyxJQUFNLHVCQUF1QixHQUFHLGtCQUFVLENBQUMsc0JBQXNCLENBQUM7b0JBQ2hFLElBQUksRUFBRSxTQUFTO29CQUNmLElBQUksRUFB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RSxJQUFNLEtBQUssU0FBQTtJQUNkLElBQU0sZ0JBQWdCLEdBQUcsa0JBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRSx5QkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDeEUseUJBQWlCLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLGdCQUFnQixDQUFDLENBQUM7Q0FDekY7QUFFRCxLQUFvQixVQUE0RCxFQUE1RCxLQUFJLGVBQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sUUFBSyxlQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBNUQsY0FBNEQsRUFBNUQsSUFBNEQsRUFBRTtJQUE3RSxJQUFNLEtBQUssU0FBQTtJQUNkLElBQU0sZ0JBQWdCLEdBQUcsb0JBQVksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwRSx5QkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUM7Q0FDekU7QUFFRCxLQUF1QixVQUE0RCxFQUE1RCxLQUFJLGVBQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sUUFBSyxlQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBNUQsY0FBNEQsRUFBNUQsSUFBNEQsRUFBRTtJQUFoRixJQUFNLFFBQVEsU0FBQTtJQUNqQixJQUFNLGdCQUFnQixHQUFHLGdCQUFRLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkUseUJBQWlCLENBQUMsdUJBQXVCLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0NBQzVFIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0IHsgY29pbnMsIEJhc2VDb2luIGFzIFN0YXRpY3NCYXNlQ29pbiwgQ29pbk5vdERlZmluZWRFcnJvciB9IGZyb20gJ0BiaXRnby9zdGF0aWNzJztcbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vYml0Z28nO1xuaW1wb3J0IHsgQmFzZUNvaW4gfSBmcm9tICcuL2Jhc2VDb2luJztcbmltcG9ydCB7XG4gIEFsZ28sXG4gIEJjaCxcbiAgQnN2LFxuICBCdGMsXG4gIEJ0ZyxcbiAgRGFzaCxcbiAgRW9zLFxuICBFdGgsXG4gIEx0YyxcbiAgT2ZjLFxuICBSbWcsXG4gIFN1c2QsXG4gIFRhbGdvLFxuICBUYmNoLFxuICBUYnN2LFxuICBUYnRjLFxuICBUYnRnLFxuICBUZGFzaCxcbiAgVGVvcyxcbiAgVGV0aCxcbiAgVGx0YyxcbiAgVHJtZyxcbiAgVHN1c2QsXG4gIFRyeCxcbiAgVHRyeCxcbiAgVHhsbSxcbiAgVHhycCxcbiAgVHplYyxcbiAgWGxtLFxuICBYcnAsXG4gIEVyYzIwVG9rZW4sXG4gIFN0ZWxsYXJUb2tlbixcbiAgT2ZjVG9rZW4sXG4gIFplYyxcbn0gZnJvbSAnLi9jb2lucyc7XG5pbXBvcnQgeyB0b2tlbnMgfSBmcm9tICcuLi9jb25maWcnO1xuXG5pbXBvcnQgKiBhcyBlcnJvcnMgZnJvbSAnLi4vZXJyb3JzJztcblxuZXhwb3J0IHR5cGUgQ29pbkNvbnN0cnVjdG9yID0gKGJpdGdvOiBCaXRHbywgc3RhdGljc0NvaW4/OiBSZWFkb25seTxTdGF0aWNzQmFzZUNvaW4+KSA9PiBCYXNlQ29pbjtcblxuZXhwb3J0IGNsYXNzIENvaW5GYWN0b3J5IHtcbiAgcHJpdmF0ZSBjb2luQ29uc3RydWN0b3JzID0gbmV3IE1hcDxzdHJpbmcsIENvaW5Db25zdHJ1Y3Rvcj4oKTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGJpdGdvXG4gICAqIEBwYXJhbSBuYW1lXG4gICAqIEB0aHJvd3MgQ29pbk5vdERlZmluZWRFcnJvclxuICAgKiBAdGhyb3dzIFVuc3VwcG9ydGVkQ29pbkVycm9yXG4gICAqL1xuICBwdWJsaWMgZ2V0SW5zdGFuY2UoYml0Z286IEJpdEdvLCBuYW1lOiBzdHJpbmcpOiBCYXNlQ29pbiB7XG4gICAgbGV0IHN0YXRpY3NDb2luO1xuICAgIHRyeSB7XG4gICAgICBzdGF0aWNzQ29pbiA9IGNvaW5zLmdldChuYW1lKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoIShlIGluc3RhbmNlb2YgQ29pbk5vdERlZmluZWRFcnJvcikpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb25zdHJ1Y3RvciA9IHRoaXMuY29pbkNvbnN0cnVjdG9ycy5nZXQobmFtZSk7XG4gICAgaWYgKGNvbnN0cnVjdG9yKSB7XG4gICAgICByZXR1cm4gY29uc3RydWN0b3IoYml0Z28sIHN0YXRpY3NDb2luKTtcbiAgICB9XG5cbiAgICBjb25zdCBldGhDb25zdHJ1Y3RvciA9IHRoaXMuY29pbkNvbnN0cnVjdG9ycy5nZXQoJ2V0aCcpO1xuICAgIGlmIChldGhDb25zdHJ1Y3Rvcikge1xuICAgICAgY29uc3QgZXRoQ29pbiA9IGV0aENvbnN0cnVjdG9yKGJpdGdvLCBzdGF0aWNzQ29pbik7XG4gICAgICBpZiAoZXRoQ29pbi5pc1ZhbGlkQWRkcmVzcyhuYW1lKSkge1xuICAgICAgICBjb25zdCB1bmtub3duVG9rZW5Db25zdHJ1Y3RvciA9IEVyYzIwVG9rZW4uY3JlYXRlVG9rZW5Db25zdHJ1Y3Rvcih7XG4gICAgICAgICAgdHlwZTogJ3Vua25vd24nLFxuICAgICAgICAgIGNvaW46ICdldGgnLFxuICAgICAgICAgIG5ldHdvcms6ICdNYWlubmV0JyxcbiAgICAgICAgICBuYW1lOiAnVW5rbm93bicsXG4gICAgICAgICAgdG9rZW5Db250cmFjdEFkZHJlc3M6IG5hbWUsXG4gICAgICAgICAgZGVjaW1hbFBsYWNlczogMCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1bmtub3duVG9rZW5Db25zdHJ1Y3RvcihiaXRnbyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IGVycm9ycy5VbnN1cHBvcnRlZENvaW5FcnJvcihuYW1lKTtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlckNvaW5Db25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGNvbnN0cnVjdG9yOiBDb2luQ29uc3RydWN0b3IpIHtcbiAgICBpZiAodGhpcy5jb2luQ29uc3RydWN0b3JzLmhhcyhuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb2luICcke25hbWV9JyBpcyBhbHJlYWR5IGRlZmluZWRgKTtcbiAgICB9XG4gICAgdGhpcy5jb2luQ29uc3RydWN0b3JzLnNldChuYW1lLCBjb25zdHJ1Y3Rvcik7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEdsb2JhbENvaW5GYWN0b3J5OiBDb2luRmFjdG9yeSA9IG5ldyBDb2luRmFjdG9yeSgpO1xuXG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcignYnRjJywgQnRjLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0YnRjJywgVGJ0Yy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcignYmNoJywgQmNoLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0YmNoJywgVGJjaC5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcignYnN2JywgQnN2LmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0YnN2JywgVGJzdi5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcignYnRnJywgQnRnLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0YnRnJywgVGJ0Zy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcignbHRjJywgTHRjLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0bHRjJywgVGx0Yy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcignZW9zJywgRW9zLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0ZW9zJywgVGVvcy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcignZXRoJywgRXRoLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0ZXRoJywgVGV0aC5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3Rvcigncm1nJywgUm1nLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0cm1nJywgVHJtZy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigneHJwJywgWHJwLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0eHJwJywgVHhycC5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigneGxtJywgWGxtLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0eGxtJywgVHhsbS5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcignZGFzaCcsIERhc2guY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3RkYXNoJywgVGRhc2guY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3plYycsIFplYy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndHplYycsIFR6ZWMuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2FsZ28nLCBBbGdvLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0YWxnbycsIFRhbGdvLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0cngnLCBUcnguY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3R0cngnLCBUdHJ4LmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCdvZmMnLCBPZmMuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3N1c2QnLCBTdXNkLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0c3VzZCcsIFRzdXNkLmNyZWF0ZUluc3RhbmNlKTtcblxuZm9yIChjb25zdCB0b2tlbiBvZiBbLi4udG9rZW5zLmJpdGNvaW4uZXRoLnRva2VucywgLi4udG9rZW5zLnRlc3RuZXQuZXRoLnRva2Vuc10pIHtcbiAgY29uc3QgdG9rZW5Db25zdHJ1Y3RvciA9IEVyYzIwVG9rZW4uY3JlYXRlVG9rZW5Db25zdHJ1Y3Rvcih0b2tlbik7XG4gIEdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKHRva2VuLnR5cGUsIHRva2VuQ29uc3RydWN0b3IpO1xuICBHbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3Rvcih0b2tlbi50b2tlbkNvbnRyYWN0QWRkcmVzcywgdG9rZW5Db25zdHJ1Y3Rvcik7XG59XG5cbmZvciAoY29uc3QgdG9rZW4gb2YgWy4uLnRva2Vucy5iaXRjb2luLnhsbS50b2tlbnMsIC4uLnRva2Vucy50ZXN0bmV0LnhsbS50b2tlbnNdKSB7XG4gIGNvbnN0IHRva2VuQ29uc3RydWN0b3IgPSBTdGVsbGFyVG9rZW4uY3JlYXRlVG9rZW5Db25zdHJ1Y3Rvcih0b2tlbik7XG4gIEdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKHRva2VuLnR5cGUsIHRva2VuQ29uc3RydWN0b3IpO1xufVxuXG5mb3IgKGNvbnN0IG9mY1Rva2VuIG9mIFsuLi50b2tlbnMuYml0Y29pbi5vZmMudG9rZW5zLCAuLi50b2tlbnMudGVzdG5ldC5vZmMudG9rZW5zXSkge1xuICBjb25zdCB0b2tlbkNvbnN0cnVjdG9yID0gT2ZjVG9rZW4uY3JlYXRlVG9rZW5Db25zdHJ1Y3RvcihvZmNUb2tlbik7XG4gIEdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKG9mY1Rva2VuLnR5cGUsIHRva2VuQ29uc3RydWN0b3IpO1xufVxuIl19