"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var bitcoin = require("bitgo-utxo-lib");
var common = require("../common");
var wallet_1 = require("./wallet");
var Bluebird = require("bluebird");
var _ = require("lodash");
var bitcoin_1 = require("../bitcoin");
var util_1 = require("./internal/util");
var co = Bluebird.coroutine;
var Wallets = /** @class */ (function () {
    function Wallets(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    /**
     * Get a wallet by ID (proxy for getWallet)
     * @param params
     * @param callback
     */
    Wallets.prototype.get = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.getWallet(params, callback);
    };
    /**
     * List a user's wallets
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallets.prototype.list = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var queryObject, body;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryObject = {};
                        if (params.skip && params.prevId) {
                            throw new Error('cannot specify both skip and prevId');
                        }
                        if (params.getbalances) {
                            if (!_.isBoolean(params.getbalances)) {
                                throw new Error('invalid getbalances argument, expecting boolean');
                            }
                            queryObject.getbalances = params.getbalances;
                        }
                        if (params.prevId) {
                            if (!_.isString(params.prevId)) {
                                throw new Error('invalid prevId argument, expecting string');
                            }
                            queryObject.prevId = params.prevId;
                        }
                        if (params.limit) {
                            if (!_.isNumber(params.limit)) {
                                throw new Error('invalid limit argument, expecting number');
                            }
                            queryObject.limit = params.limit;
                        }
                        if (params.allTokens) {
                            if (!_.isBoolean(params.allTokens)) {
                                throw new Error('invalid allTokens argument, expecting boolean');
                            }
                            queryObject.allTokens = params.allTokens;
                        }
                        return [4 /*yield*/, self.bitgo
                                .get(self.baseCoin.url('/wallet'))
                                .query(queryObject)
                                .result()];
                    case 1:
                        body = _a.sent();
                        body.wallets = body.wallets.map(function (w) { return new wallet_1.Wallet(self.bitgo, self.baseCoin, w); });
                        return [2 /*return*/, body];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * add
     * Add a new wallet (advanced mode).
     * This allows you to manually submit the keys, type, m and n of the wallet
     * Parameters include:
     *    "label": label of the wallet to be shown in UI
     *    "m": number of keys required to unlock wallet (2)
     *    "n": number of keys available on the wallet (3)
     *    "keys": array of keychain ids
     */
    Wallets.prototype.add = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var walletParams, newWallet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        common.validateParams(params, [], ['label', 'enterprise', 'type'], callback);
                        // no need to pass keys for (single) custodial wallets
                        if (params.type !== 'custodial') {
                            if (Array.isArray(params.keys) === false || !_.isNumber(params.m) || !_.isNumber(params.n)) {
                                throw new Error('invalid argument');
                            }
                            // TODO: support more types of multisig
                            if (!self.baseCoin.isValidMofNSetup(params)) {
                                throw new Error('unsupported multi-sig type');
                            }
                        }
                        if (params.tags && Array.isArray(params.tags) === false) {
                            throw new Error('invalid argument for tags - array expected');
                        }
                        if (params.clientFlags && Array.isArray(params.clientFlags) === false) {
                            throw new Error('invalid argument for clientFlags - array expected');
                        }
                        if (params.isCold && !_.isBoolean(params.isCold)) {
                            throw new Error('invalid argument for isCold - boolean expected');
                        }
                        if (params.isCustodial && !_.isBoolean(params.isCustodial)) {
                            throw new Error('invalid argument for isCustodial - boolean expected');
                        }
                        if (params.address && (!_.isString(params.address) || !this.baseCoin.isValidAddress(params.address))) {
                            throw new Error('invalid argument for address - valid address string expected');
                        }
                        walletParams = _.pick(params, [
                            'label',
                            'm',
                            'n',
                            'keys',
                            'enterprise',
                            'isCold',
                            'isCustodial',
                            'tags',
                            'clientFlags',
                            'type',
                            'address',
                        ]);
                        // Additional params needed for xrp
                        if (params.rootPub) {
                            walletParams.rootPub = params.rootPub;
                        }
                        // In XLM this private key is used only for wallet creation purposes, once the wallet is initialized then we
                        // update its weight to 0 making it an invalid key.
                        // https://www.stellar.org/developers/guides/concepts/multi-sig.html#additional-signing-keys
                        if (params.rootPrivateKey) {
                            walletParams.rootPrivateKey = params.rootPrivateKey;
                        }
                        if (params.initializationTxs) {
                            walletParams.initializationTxs = params.initializationTxs;
                        }
                        if (params.disableTransactionNotifications) {
                            walletParams.disableTransactionNotifications = params.disableTransactionNotifications;
                        }
                        return [4 /*yield*/, self.bitgo
                                .post(self.baseCoin.url('/wallet'))
                                .send(walletParams)
                                .result()];
                    case 1:
                        newWallet = _a.sent();
                        return [2 /*return*/, {
                                wallet: new wallet_1.Wallet(self.bitgo, self.baseCoin, newWallet),
                            }];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Generate a new wallet
     * 1. Creates the user keychain locally on the client, and encrypts it with the provided passphrase
     * 2. If no pub was provided, creates the backup keychain locally on the client, and encrypts it with the provided passphrase
     * 3. Uploads the encrypted user and backup keychains to BitGo
     * 4. Creates the BitGo key on the service
     * 5. Creates the wallet on BitGo with the 3 public keys above
     * @param params
     * @param params.label
     * @param params.passphrase
     * @param params.userKey User xpub
     * @param params.backupXpub Backup xpub
     * @param params.backupXpubProvider
     * @param params.enterprise
     * @param params.disableTransactionNotifications
     * @param params.passcodeEncryptionCode
     * @param params.coldDerivationSeed
     * @param params.gasPrice
     * @param params.disableKRSEmail
     * @param callback
     * @returns {*}
     */
    Wallets.prototype.generateWallet = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var label, passphrase, canEncrypt, isCold, walletParams, hasBackupXpub, hasBackupXpubProvider, krsSpecific, derivationPath, reqId, userKeychainPromise, backupKeychainPromise, _a, userKeychain, backupKeychain, bitgoKeychain, prv, keychains, finalWalletParams, newWallet, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        common.validateParams(params, ['label'], ['passphrase', 'userKey', 'backupXpub'], callback);
                        if (!_.isString(params.label)) {
                            throw new Error('missing required string parameter label');
                        }
                        label = params.label;
                        passphrase = params.passphrase;
                        canEncrypt = !!passphrase && typeof passphrase === 'string';
                        isCold = !canEncrypt || !!params.userKey;
                        walletParams = {
                            label: label,
                            m: 2,
                            n: 3,
                            keys: [],
                            isCold: isCold,
                        };
                        hasBackupXpub = !!params.backupXpub;
                        hasBackupXpubProvider = !!params.backupXpubProvider;
                        if (hasBackupXpub && hasBackupXpubProvider) {
                            throw new Error('Cannot provide more than one backupXpub or backupXpubProvider flag');
                        }
                        if (!_.isUndefined(params.passcodeEncryptionCode)) {
                            if (!_.isString(params.passcodeEncryptionCode)) {
                                throw new Error('passcodeEncryptionCode must be a string');
                            }
                        }
                        if (!_.isUndefined(params.enterprise)) {
                            if (!_.isString(params.enterprise)) {
                                throw new Error('invalid enterprise argument, expecting string');
                            }
                            walletParams.enterprise = params.enterprise;
                        }
                        if (!_.isUndefined(params.disableTransactionNotifications)) {
                            if (!_.isBoolean(params.disableTransactionNotifications)) {
                                throw new Error('invalid disableTransactionNotifications argument, expecting boolean');
                            }
                            walletParams.disableTransactionNotifications = params.disableTransactionNotifications;
                        }
                        if (!_.isUndefined(params.gasPrice)) {
                            if (!_.isNumber(params.gasPrice)) {
                                throw new Error('invalid gas price argument, expecting number');
                            }
                            walletParams.gasPrice = params.gasPrice;
                        }
                        if (!_.isUndefined(params.disableKRSEmail)) {
                            if (!_.isBoolean(params.disableKRSEmail)) {
                                throw new Error('invalid disableKRSEmail argument, expecting boolean');
                            }
                            walletParams.disableKRSEmail = params.disableKRSEmail;
                        }
                        krsSpecific = params.krsSpecific;
                        if (!_.isUndefined(krsSpecific)) {
                            Object.keys(krsSpecific).forEach(function (key) {
                                var val = krsSpecific[key];
                                if (!_.isBoolean(val) && !_.isString(val) && !_.isNumber(val)) {
                                    throw new Error('krsSpecific object contains illegal values. values must be strings, booleans, or numbers');
                                }
                            });
                        }
                        derivationPath = undefined;
                        reqId = new util_1.RequestTracer();
                        userKeychainPromise = co(function () {
                            var userKeychainParams, userKeychain, derivation, newUserKeychain;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        // User provided user key
                                        if (params.userKey) {
                                            userKeychain = { pub: params.userKey };
                                            userKeychainParams = userKeychain;
                                            if (params.coldDerivationSeed) {
                                                derivation = self.baseCoin.deriveKeyWithSeed({
                                                    key: params.userKey,
                                                    seed: params.coldDerivationSeed,
                                                });
                                                derivationPath = derivation.derivationPath;
                                                userKeychain.pub = derivation.key;
                                            }
                                        }
                                        else {
                                            if (!canEncrypt) {
                                                throw new Error('cannot generate user keypair without passphrase');
                                            }
                                            // Create the user key.
                                            userKeychain = self.baseCoin.keychains().create();
                                            userKeychain.encryptedPrv = self.bitgo.encrypt({ password: passphrase, input: userKeychain.prv });
                                            userKeychainParams = {
                                                pub: userKeychain.pub,
                                                encryptedPrv: userKeychain.encryptedPrv,
                                                originalPasscodeEncryptionCode: params.passcodeEncryptionCode,
                                            };
                                        }
                                        userKeychainParams.reqId = reqId;
                                        return [4 /*yield*/, self.baseCoin.keychains().add(userKeychainParams)];
                                    case 1:
                                        newUserKeychain = _a.sent();
                                        return [2 /*return*/, _.extend({}, newUserKeychain, userKeychain)];
                                }
                            });
                        }).call(this);
                        backupKeychainPromise = co(function () {
                            return __generator(this, function (_a) {
                                if (params.backupXpubProvider || self.baseCoin.getFamily() === 'rmg') {
                                    // If requested, use a KRS or backup key provider
                                    return [2 /*return*/, self.baseCoin.keychains().createBackup({
                                            provider: params.backupXpubProvider || 'defaultRMGBackupProvider',
                                            disableKRSEmail: params.disableKRSEmail,
                                            krsSpecific: params.krsSpecific,
                                            type: self.baseCoin.getChain(),
                                            reqId: reqId,
                                        })];
                                }
                                // User provided backup xpub
                                if (params.backupXpub) {
                                    // user provided backup ethereum address
                                    return [2 /*return*/, self.baseCoin.keychains().add({
                                            pub: params.backupXpub,
                                            source: 'backup',
                                            reqId: reqId,
                                        })];
                                }
                                else {
                                    if (!canEncrypt) {
                                        throw new Error('cannot generate backup keypair without passphrase');
                                    }
                                    // No provided backup xpub or address, so default to creating one here
                                    return [2 /*return*/, self.baseCoin.keychains().createBackup({ reqId: reqId })];
                                }
                                return [2 /*return*/];
                            });
                        }).call(this);
                        return [4 /*yield*/, Bluebird.props({
                                userKeychain: userKeychainPromise,
                                backupKeychain: backupKeychainPromise,
                                bitgoKeychain: self.baseCoin.keychains().createBitGo({ enterprise: params.enterprise, reqId: reqId }),
                            })];
                    case 1:
                        _a = _b.sent(), userKeychain = _a.userKeychain, backupKeychain = _a.backupKeychain, bitgoKeychain = _a.bitgoKeychain;
                        walletParams.keys = [userKeychain.id, backupKeychain.id, bitgoKeychain.id];
                        walletParams.isCold = isCold;
                        prv = userKeychain.prv;
                        if (_.isString(prv)) {
                            walletParams.keySignatures = {
                                backup: self.baseCoin.signMessage({ prv: prv }, backupKeychain.pub).toString('hex'),
                                bitgo: self.baseCoin.signMessage({ prv: prv }, bitgoKeychain.pub).toString('hex'),
                            };
                        }
                        if (_.includes(['xrp', 'xlm'], self.baseCoin.getFamily()) && !_.isUndefined(params.rootPrivateKey)) {
                            walletParams.rootPrivateKey = params.rootPrivateKey;
                        }
                        keychains = {
                            userKeychain: userKeychain,
                            backupKeychain: backupKeychain,
                            bitgoKeychain: bitgoKeychain,
                        };
                        return [4 /*yield*/, self.baseCoin.supplementGenerateWallet(walletParams, keychains)];
                    case 2:
                        finalWalletParams = _b.sent();
                        self.bitgo.setRequestTracer(reqId);
                        return [4 /*yield*/, self.bitgo
                                .post(self.baseCoin.url('/wallet'))
                                .send(finalWalletParams)
                                .result()];
                    case 3:
                        newWallet = _b.sent();
                        result = {
                            wallet: new wallet_1.Wallet(self.bitgo, self.baseCoin, newWallet),
                            userKeychain: userKeychain,
                            backupKeychain: backupKeychain,
                            bitgoKeychain: bitgoKeychain,
                        };
                        if (!_.isUndefined(backupKeychain.prv)) {
                            result.warning = 'Be sure to backup the backup keychain -- it is not stored anywhere else!';
                        }
                        if (!_.isUndefined(derivationPath)) {
                            userKeychain.derivationPath = derivationPath;
                        }
                        return [2 /*return*/, result];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * List the user's wallet shares
     * @param params
     * @param callback
     */
    Wallets.prototype.listShares = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.bitgo
            .get(this.baseCoin.url('/walletshare'))
            .result()
            .asCallback(callback);
    };
    /**
     * Gets a wallet share information, including the encrypted sharing keychain. requires unlock if keychain is present.
     * @param params
     * @param params.walletShareId - the wallet share to get information on
     * @param callback
     */
    Wallets.prototype.getShare = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['walletShareId'], [], callback);
        return this.bitgo
            .get(this.baseCoin.url('/walletshare/' + params.walletShareId))
            .result()
            .nodeify(callback);
    };
    /**
     * Update a wallet share
     * @param params.walletShareId - the wallet share to update
     * @param params.state - the new state of the wallet share
     * @param params
     * @param callback
     */
    Wallets.prototype.updateShare = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['walletShareId'], [], callback);
        return this.bitgo
            .post(this.baseCoin.url('/walletshare/' + params.walletShareId))
            .send(params)
            .result()
            .nodeify(callback);
    };
    /**
     * Resend a wallet share invitation email
     * @param params
     * @param params.walletShareId - the wallet share whose invitiation should be resent
     * @param callback
     */
    Wallets.prototype.resendShareInvite = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var urlParts;
            return __generator(this, function (_a) {
                common.validateParams(params, ['walletShareId'], [], callback);
                urlParts = params.walletShareId + '/resendemail';
                return [2 /*return*/, self.bitgo.post(self.baseCoin.url('/walletshare/' + urlParts)).result()];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Cancel a wallet share
     * @param params
     * @param params.walletShareId - the wallet share to update
     * @param callback
     */
    Wallets.prototype.cancelShare = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['walletShareId'], [], callback);
        return this.bitgo
            .del(this.baseCoin.url('/walletshare/' + params.walletShareId))
            .send()
            .result()
            .nodeify(callback);
    };
    /**
     * Accepts a wallet share, adding the wallet to the user's list
     * Needs a user's password to decrypt the shared key
     *
     * @param params
     * @param params.walletShareId - the wallet share to accept
     * @param params.userPassword - (required if more a keychain was shared) user's password to decrypt the shared wallet
     * @param params.newWalletPassphrase - new wallet passphrase for saving the shared wallet prv.
     *                                     If left blank and a wallet with more than view permissions was shared,
     *                                     then the user's login password is used.
     * @param params.overrideEncryptedPrv - set only if the prv was received out-of-band.
     * @param callback
     */
    Wallets.prototype.acceptShare = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var encryptedPrv, walletShare, sharingKeychain, rootExtKey, privKey, secret, decryptedSharedWalletPrv, newWalletPassphrase, updateParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        common.validateParams(params, ['walletShareId'], ['overrideEncryptedPrv', 'userPassword', 'newWalletPassphrase'], callback);
                        encryptedPrv = params.overrideEncryptedPrv;
                        return [4 /*yield*/, self.getShare({ walletShareId: params.walletShareId })];
                    case 1:
                        walletShare = _a.sent();
                        // Return right away if there is no keychain to decrypt, or if explicit encryptedPrv was provided
                        if (!walletShare.keychain || !walletShare.keychain.encryptedPrv || encryptedPrv) {
                            return [2 /*return*/, self.updateShare({
                                    walletShareId: params.walletShareId,
                                    state: 'accepted',
                                })];
                        }
                        // More than viewing was requested, so we need to process the wallet keys using the shared ecdh scheme
                        if (_.isUndefined(params.userPassword)) {
                            throw new Error('userPassword param must be provided to decrypt shared key');
                        }
                        return [4 /*yield*/, self.bitgo.getECDHSharingKeychain()];
                    case 2:
                        sharingKeychain = _a.sent();
                        if (_.isUndefined(sharingKeychain.encryptedXprv)) {
                            throw new Error('encryptedXprv was not found on sharing keychain');
                        }
                        // Now we have the sharing keychain, we can work out the secret used for sharing the wallet with us
                        sharingKeychain.prv = self.bitgo.decrypt({
                            password: params.userPassword,
                            input: sharingKeychain.encryptedXprv,
                        });
                        rootExtKey = bitcoin.HDNode.fromBase58(sharingKeychain.prv);
                        privKey = bitcoin_1.hdPath(rootExtKey).deriveKey(walletShare.keychain.path);
                        secret = self.bitgo.getECDHSecret({
                            eckey: privKey,
                            otherPubKeyHex: walletShare.keychain.fromPubKey,
                        });
                        decryptedSharedWalletPrv = self.bitgo.decrypt({
                            password: secret,
                            input: walletShare.keychain.encryptedPrv,
                        });
                        newWalletPassphrase = params.newWalletPassphrase || params.userPassword;
                        encryptedPrv = self.bitgo.encrypt({
                            password: newWalletPassphrase,
                            input: decryptedSharedWalletPrv,
                        });
                        updateParams = {
                            walletShareId: params.walletShareId,
                            state: 'accepted',
                        };
                        if (encryptedPrv) {
                            updateParams.encryptedPrv = encryptedPrv;
                        }
                        return [2 /*return*/, self.updateShare(updateParams)];
                }
            });
        })
            .call(this)
            .nodeify(callback);
    };
    /**
     * Get a wallet by its ID
     * @param params
     * @param params.id wallet id
     * @param callback
     * @returns {*}
     */
    Wallets.prototype.getWallet = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var query, wallet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        common.validateParams(params, ['id'], [], callback);
                        query = {};
                        if (params.allTokens) {
                            if (!_.isBoolean(params.allTokens)) {
                                throw new Error('invalid allTokens argument, expecting boolean');
                            }
                            query.allTokens = params.allTokens;
                        }
                        self.bitgo.setRequestTracer(params.reqId || new util_1.RequestTracer());
                        return [4 /*yield*/, self.bitgo
                                .get(self.baseCoin.url('/wallet/' + params.id))
                                .query(query)
                                .result()];
                    case 1:
                        wallet = _a.sent();
                        return [2 /*return*/, new wallet_1.Wallet(self.bitgo, self.baseCoin, wallet)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Get a wallet by its address
     * @param params
     * @param params.address wallet address
     * @param callback
     * @returns {*}
     */
    Wallets.prototype.getWalletByAddress = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var wallet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        common.validateParams(params, ['address'], [], callback);
                        self.bitgo.setRequestTracer(params.reqId || new util_1.RequestTracer());
                        return [4 /*yield*/, self.bitgo.get(self.baseCoin.url('/wallet/address/' + params.address)).result()];
                    case 1:
                        wallet = _a.sent();
                        return [2 /*return*/, new wallet_1.Wallet(self.bitgo, self.baseCoin, wallet)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * For any given supported coin, get total balances for all wallets of that
     * coin type on the account.
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallets.prototype.getTotalBalances = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.bitgo
            .get(this.baseCoin.url('/wallet/balances'))
            .result()
            .asCallback(callback);
    };
    return Wallets;
}());
exports.Wallets = Wallets;
//# sourceMappingURL=data:application/json;base64,