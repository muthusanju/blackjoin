"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var Bluebird = require("bluebird");
var util_1 = require("./internal/util");
var common_1 = require("../common");
var co = Bluebird.coroutine;
var KeyIndices;
(function (KeyIndices) {
    KeyIndices[KeyIndices["USER"] = 0] = "USER";
    KeyIndices[KeyIndices["BACKUP"] = 1] = "BACKUP";
    KeyIndices[KeyIndices["BITGO"] = 2] = "BITGO";
})(KeyIndices = exports.KeyIndices || (exports.KeyIndices = {}));
var Keychains = /** @class */ (function () {
    function Keychains(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    /**
     * Get a keychain by ID
     * @param params
     * @param params.id
     * @param params.xpub (optional)
     * @param params.ethAddress (optional)
     * @param params.reqId (optional)
     * @param callback
     */
    Keychains.prototype.get = function (params, callback) {
        common_1.validateParams(params, [], ['xpub', 'ethAddress'], callback);
        if (_.isUndefined(params.id)) {
            throw new Error('id must be defined');
        }
        var id = params.id;
        if (params.reqId) {
            this.bitgo.setRequestTracer(params.reqId);
        }
        return this.bitgo.get(this.baseCoin.url('/key/' + encodeURIComponent(id)))
            .result()
            .nodeify(callback);
    };
    /**
     * list the users keychains
     * @param params
     * @param params.limit - Max number of results in a single call.
     * @param params.prevId - Continue iterating (provided by nextBatchPrevId in the previous list)
     * @param callback
     * @returns {*}
     */
    Keychains.prototype.list = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var queryObject;
            return __generator(this, function (_a) {
                queryObject = {};
                if (!_.isUndefined(params.limit)) {
                    if (!_.isNumber(params.limit)) {
                        throw new Error('invalid limit argument, expecting number');
                    }
                    queryObject.limit = params.limit;
                }
                if (!_.isUndefined(params.prevId)) {
                    if (!_.isString(params.prevId)) {
                        throw new Error('invalid prevId argument, expecting string');
                    }
                    queryObject.prevId = params.prevId;
                }
                return [2 /*return*/, self.bitgo.get(self.baseCoin.url('/key')).query(queryObject).result()];
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Change the decryption password for all possible keychains associated with a user.
     *
     * This function iterates through all keys associated with the user, decrypts
     * them with the old password and re-encrypts them with the new password.
     *
     * This should be called when a user changes their login password, and are expecting
     * that their wallet passwords are changed to match the new login password.
     *
     * @param params
     * @param params.oldPassword - The old password used for encrypting the key
     * @param params.newPassword - The new password to be used for encrypting the key
     * @param callback
     * @returns changedKeys Object - e.g.:
     *  {
     *    xpub1: encryptedPrv,
     *    ...
     *  }
     */
    Keychains.prototype.updatePassword = function (params, callback) {
        var self = this;
        return co(function () {
            var changedKeys, prevId, keysLeft, result, _i, _a, key, oldEncryptedPrv, updatedKeychain;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        common_1.validateParams(params, ['oldPassword', 'newPassword'], [], callback);
                        changedKeys = {};
                        keysLeft = true;
                        _b.label = 1;
                    case 1:
                        if (!keysLeft) return [3 /*break*/, 3];
                        return [4 /*yield*/, self.list({ limit: 500, prevId: prevId })];
                    case 2:
                        result = _b.sent();
                        for (_i = 0, _a = result.keys; _i < _a.length; _i++) {
                            key = _a[_i];
                            oldEncryptedPrv = key.encryptedPrv;
                            if (_.isUndefined(oldEncryptedPrv)) {
                                continue;
                            }
                            try {
                                updatedKeychain = self.updateSingleKeychainPassword({
                                    keychain: key,
                                    oldPassword: params.oldPassword,
                                    newPassword: params.newPassword
                                });
                                if (updatedKeychain.encryptedPrv) {
                                    changedKeys[updatedKeychain.pub] = updatedKeychain.encryptedPrv;
                                }
                            }
                            catch (e) {
                                // if the password was incorrect, silence the error, throw otherwise
                                if (!e.message.includes('private key is incorrect')) {
                                    throw e;
                                }
                            }
                        }
                        if (result.nextBatchPrevId) {
                            prevId = result.nextBatchPrevId;
                        }
                        else {
                            keysLeft = false;
                        }
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/, changedKeys];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Update the password used to decrypt a single keychain
     * @param params
     * @param params.keychain - The keychain whose password should be updated
     * @param params.oldPassword - The old password used for encrypting the key
     * @param params.newPassword - The new password to be used for encrypting the key
     * @returns {object}
     */
    Keychains.prototype.updateSingleKeychainPassword = function (params) {
        if (params === void 0) { params = {}; }
        if (!_.isString(params.oldPassword)) {
            throw new Error('expected old password to be a string');
        }
        if (!_.isString(params.newPassword)) {
            throw new Error('expected new password to be a string');
        }
        if (!_.isObject(params.keychain) || !_.isString(params.keychain.encryptedPrv)) {
            throw new Error('expected keychain to be an object with an encryptedPrv property');
        }
        var oldEncryptedPrv = params.keychain.encryptedPrv;
        try {
            var decryptedPrv = this.bitgo.decrypt({ input: oldEncryptedPrv, password: params.oldPassword });
            var newEncryptedPrv = this.bitgo.encrypt({ input: decryptedPrv, password: params.newPassword });
            return _.assign({}, params.keychain, { encryptedPrv: newEncryptedPrv });
        }
        catch (e) {
            // catching an error here means that the password was incorrect or, less likely, the input to decrypt is corrupted
            throw new Error('password used to decrypt keychain private key is incorrect');
        }
    };
    /**
     * Create a public/private key pair
     * @param params.seed
     */
    Keychains.prototype.create = function (params) {
        if (params === void 0) { params = {}; }
        return this.baseCoin.generateKeyPair(params.seed);
    };
    /**
     * Add a keychain to BitGo's records
     * @param params
     * @param callback
     */
    Keychains.prototype.add = function (params, callback) {
        if (params === void 0) { params = {}; }
        params = params || {};
        common_1.validateParams(params, [], ['pub', 'encryptedPrv', 'type', 'source', 'originalPasscodeEncryptionCode', 'enterprise', 'derivedFromParentWithSeed'], callback);
        if (!_.isUndefined(params.disableKRSEmail)) {
            if (!_.isBoolean(params.disableKRSEmail)) {
                throw new Error('invalid disableKRSEmail argument, expecting boolean');
            }
        }
        if (params.reqId) {
            this.bitgo.setRequestTracer(params.reqId);
        }
        return this.bitgo.post(this.baseCoin.url('/key'))
            .send({
            pub: params.pub,
            encryptedPrv: params.encryptedPrv,
            type: params.type,
            source: params.source,
            provider: params.provider,
            originalPasscodeEncryptionCode: params.originalPasscodeEncryptionCode,
            enterprise: params.enterprise,
            derivedFromParentWithSeed: params.derivedFromParentWithSeed,
            disableKRSEmail: params.disableKRSEmail,
            krsSpecific: params.krsSpecific
        })
            .result()
            .nodeify(callback);
    };
    /**
     * Create a BitGo key
     * @param params (empty)
     * @param callback
     */
    Keychains.prototype.createBitGo = function (params, callback) {
        if (params === void 0) { params = {}; }
        params.source = 'bitgo';
        this.baseCoin.preCreateBitGo(params);
        return this.add(params, callback);
    };
    /**
     * Create a backup key
     * @param params
     * @param params.provider (optional)
     * @param callback
     */
    Keychains.prototype.createBackup = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var key, serverResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params.source = 'backup';
                        if (_.isUndefined(params.provider)) {
                            key = self.create();
                            _.extend(params, key);
                        }
                        return [4 /*yield*/, self.add(params, callback)];
                    case 1:
                        serverResponse = _a.sent();
                        return [2 /*return*/, _.extend({}, serverResponse, _.pick(params, ['prv', 'encryptedPrv', 'provider', 'source']))];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Gets keys for signing from a wallet
     * @param params
     * @param callback
     * @returns {Bluebird[]}
     */
    Keychains.prototype.getKeysForSigning = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var wallet, reqId, ids, keychainQueriesBluebirds;
            return __generator(this, function (_a) {
                if (!_.isObject(params.wallet)) {
                    throw new Error('missing required param wallet');
                }
                wallet = params.wallet;
                reqId = params.reqId || new util_1.RequestTracer();
                ids = wallet.baseCoin.keyIdsForSigning();
                keychainQueriesBluebirds = ids.map(function (id) { return self.get({ id: wallet.keyIds()[id], reqId: reqId }); });
                return [2 /*return*/, Bluebird.all(keychainQueriesBluebirds)];
            });
        }).call(this).asCallback(callback);
    };
    return Keychains;
}());
exports.Keychains = Keychains;
//# sourceMappingURL=data:application/json;base64,