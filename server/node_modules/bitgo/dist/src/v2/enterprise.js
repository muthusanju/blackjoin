"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var Bluebird = require("bluebird");
var _ = require("lodash");
var wallet_1 = require("./wallet");
var internal_1 = require("./internal/internal");
var settlements_1 = require("./trading/settlements");
var affirmations_1 = require("./trading/affirmations");
var co = Bluebird.coroutine;
var Enterprise = /** @class */ (function () {
    function Enterprise(bitgo, baseCoin, enterpriseData) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
        if (!_.isObject(enterpriseData)) {
            throw new Error('enterpriseData has to be an object');
        }
        if (!_.isString(enterpriseData.id)) {
            throw new Error('enterprise id has to be a string');
        }
        if (!_.isString(enterpriseData.name)) {
            throw new Error('enterprise name has to be a string');
        }
        this.id = enterpriseData.id;
        this.name = enterpriseData.name;
    }
    /**
     * Enterprise URL for v1 methods, such as getting users
     * @param query
     */
    Enterprise.prototype.url = function (query) {
        if (query === void 0) { query = ''; }
        return this.bitgo.url("/enterprise/" + this.id + query);
    };
    /**
     * Enterprise URL for v2 methods, such as getting fee address balances
     * @param query
     */
    Enterprise.prototype.coinUrl = function (query) {
        if (query === void 0) { query = ''; }
        return this.baseCoin.url("/enterprise/" + this.id + query);
    };
    /**
     * Get the wallets associated with this Enterprise
     * @param params
     * @param callback
     */
    Enterprise.prototype.coinWallets = function (params, callback) {
        if (params === void 0) { params = {}; }
        return co(function coCoinWallets() {
            var walletData;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bitgo.get(this.baseCoin.url('/wallet/enterprise/' + this.id)).result()];
                    case 1:
                        walletData = _a.sent();
                        walletData.wallets = walletData.wallets.map(function (w) {
                            return new wallet_1.Wallet(_this.bitgo, _this.baseCoin, w);
                        });
                        return [2 /*return*/, walletData];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Get the users associated with this Enterprise
     * @param params
     * @param callback
     */
    Enterprise.prototype.users = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.bitgo
            .get(this.url('/user'))
            .result()
            .asCallback(callback);
    };
    /**
     * Get the fee address balance for this Enterprise
     * @param params
     * @param callback
     */
    Enterprise.prototype.getFeeAddressBalance = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.bitgo
            .get(this.coinUrl('/feeAddressBalance'))
            .result()
            .asCallback(callback);
    };
    /**
     * Add a user to this Enterprise
     * @param params
     * @param callback
     */
    Enterprise.prototype.addUser = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.bitgo
            .post(this.url('/user'))
            .send(params)
            .result()
            .asCallback(callback);
    };
    /**
     * Remove a user from this Enterprise
     * @param params
     * @param callback
     */
    Enterprise.prototype.removeUser = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.bitgo
            .del(this.url('/user'))
            .send(params)
            .result()
            .asCallback(callback);
    };
    /**
     * Get the first pending transaction for this Enterprise
     * @param params
     * @param callback
     */
    Enterprise.prototype.getFirstPendingTransaction = function (params, callback) {
        if (params === void 0) { params = {}; }
        return internal_1.getFirstPendingTransaction({ enterpriseId: this.id }, this.baseCoin, this.bitgo).asCallback(callback);
    };
    /**
     * Manage settlements for an enterprise
     */
    Enterprise.prototype.settlements = function () {
        return new settlements_1.Settlements(this.bitgo, this.id);
    };
    /**
     * Manage affirmations for an enterprise
     */
    Enterprise.prototype.affirmations = function () {
        return new affirmations_1.Affirmations(this.bitgo, this.id);
    };
    return Enterprise;
}());
exports.Enterprise = Enterprise;
//# sourceMappingURL=data:application/json;base64,