"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = require("bignumber.js");
var Bluebird = require("bluebird");
var _ = require("lodash");
var debugLib = require("debug");
var bitcoin_1 = require("../bitcoin");
var common = require("../common");
var errors_1 = require("../errors");
var internal = require("./internal/internal");
var keycard_1 = require("./internal/keycard");
var tradingAccount_1 = require("./trading/tradingAccount");
var pendingApproval_1 = require("./pendingApproval");
var util_1 = require("./internal/util");
var debug = debugLib('bitgo:v2:wallet');
var co = Bluebird.coroutine;
var Wallet = /** @class */ (function () {
    function Wallet(bitgo, baseCoin, walletData) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
        this._wallet = walletData;
        var userId = _.get(bitgo, '_user.id');
        if (_.isString(userId)) {
            var userDetails = _.find(walletData.users, { user: userId });
            this._permissions = _.get(userDetails, 'permissions');
        }
    }
    /**
     * Build a URL using this wallet's id which can be used for BitGo API operations
     * @param extra API specific string to append to the wallet id
     */
    Wallet.prototype.url = function (extra) {
        if (extra === void 0) { extra = ''; }
        return this.baseCoin.url('/wallet/' + this.id() + extra);
    };
    /**
     * Get this wallet's id
     */
    Wallet.prototype.id = function () {
        return this._wallet.id;
    };
    /**
     * Get the number of approvals required for spending funds from this wallet
     */
    Wallet.prototype.approvalsRequired = function () {
        return this._wallet.approvalsRequired;
    };
    /**
     * Get the current balance of this wallet
     */
    Wallet.prototype.balance = function () {
        return this._wallet.balance;
    };
    Wallet.prototype.prebuildWhitelistedParams = function () {
        return [
            'recipients', 'numBlocks', 'feeRate', 'maxFeeRate', 'minConfirms', 'enforceMinConfirmsForChange',
            'targetWalletUnspents', 'message', 'minValue', 'maxValue', 'sequenceId', 'lastLedgerSequence',
            'ledgerSequenceDelta', 'gasPrice', 'gasLimit', 'noSplitChange', 'unspents', 'changeAddress', 'instant', 'memo', 'addressType',
            'cpfpTxIds', 'cpfpFeeRate', 'maxFee', 'idfVersion', 'idfSignedTimestamp', 'idfUserId', 'strategy',
            'validFromBlock', 'validToBlock', 'type', 'trustlines', 'reservation',
        ];
    };
    /**
     * This is a strict sub-set of prebuildWhitelistedParams.
     */
    Wallet.prototype.prebuildConsolidateTransactionParams = function () {
        return [
            'feeRate', 'maxFeeRate', 'memo', 'validFromBlock', 'validToBlock',
        ];
    };
    /**
     * Get the confirmed balance of this wallet
     */
    Wallet.prototype.confirmedBalance = function () {
        return this._wallet.confirmedBalance;
    };
    /**
     * Get the spendable balance of this wallet
     */
    Wallet.prototype.spendableBalance = function () {
        return this._wallet.spendableBalance;
    };
    /**
     * Get a string representation of the balance of this wallet
     *
     * This is useful when balances have the potential to overflow standard javascript numbers
     */
    Wallet.prototype.balanceString = function () {
        return this._wallet.balanceString;
    };
    /**
     * Get a string representation of the confirmed balance of this wallet
     *
     * This is useful when balances have the potential to overflow standard javascript numbers
     */
    Wallet.prototype.confirmedBalanceString = function () {
        return this._wallet.confirmedBalanceString;
    };
    /**
     * Get a string representation of the spendable balance of this wallet
     *
     * This is useful when balances have the potential to overflow standard javascript numbers
     */
    Wallet.prototype.spendableBalanceString = function () {
        return this._wallet.spendableBalanceString;
    };
    /**
     * Get the coin identifier for the type of coin this wallet holds
     */
    Wallet.prototype.coin = function () {
        return this._wallet.coin;
    };
    /**
     * Get the label (name) for this wallet
     */
    Wallet.prototype.label = function () {
        return this._wallet.label;
    };
    /**
     * Get the public object ids for the keychains on this wallet.
     */
    Wallet.prototype.keyIds = function () {
        return this._wallet.keys;
    };
    /**
     * Get a receive address for this wallet
     */
    Wallet.prototype.receiveAddress = function () {
        return this._wallet.receiveAddress.address;
    };
    /**
     * Get the wallet id of the wallet that this wallet was migrated from.
     *
     * For example, if this is a BCH wallet that was created from a BTC wallet,
     * the BCH wallet migrated from field would have the BTC wallet id.
     */
    Wallet.prototype.migratedFrom = function () {
        return this._wallet.migratedFrom;
    };
    /**
     * Return the token flush thresholds for this wallet
     * @return {*|Object} pairs of { [tokenName]: thresholds } base units
     */
    Wallet.prototype.tokenFlushThresholds = function () {
        if (this.baseCoin.getFamily() !== 'eth') {
            throw new Error('not supported for this wallet');
        }
        return this._wallet.coinSpecific.tokenFlushThresholds;
    };
    /**
     * Get wallet properties which are specific to certain coin implementations
     */
    Wallet.prototype.coinSpecific = function () {
        return this._wallet.coinSpecific;
    };
    /**
     * Get all pending approvals on this wallet
     */
    Wallet.prototype.pendingApprovals = function () {
        var _this = this;
        return this._wallet.pendingApprovals.map(function (currentApproval) {
            return new pendingApproval_1.PendingApproval(_this.bitgo, _this.baseCoin, currentApproval, _this);
        });
    };
    /**
     * Refresh the wallet object by syncing with the back-end
     * @param params
     * @param callback
     * @returns {Wallet}
     */
    Wallet.prototype.refresh = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = self;
                        return [4 /*yield*/, self.bitgo.get(self.url()).result()];
                    case 1:
                        _a._wallet = _b.sent();
                        return [2 /*return*/, this];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * List the transactions for a given wallet
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.transactions = function (params, callback) {
        if (params === void 0) { params = {}; }
        var query = {};
        if (params.prevId) {
            if (!_.isString(params.prevId)) {
                throw new Error('invalid prevId argument, expecting string');
            }
            query.prevId = params.prevId;
        }
        if (params.limit) {
            if (!_.isNumber(params.limit)) {
                throw new Error('invalid limit argument, expecting number');
            }
            query.limit = params.limit;
        }
        return this.bitgo.get(this.baseCoin.url('/wallet/' + this._wallet.id + '/tx'))
            .query(query)
            .result()
            .nodeify(callback);
    };
    /**
     * List the transactions for a given wallet
     * @param params
     *  - txHash the transaction hash to search for
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.getTransaction = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['txHash'], [], callback);
        var query = {};
        if (!_.isUndefined(params.prevId)) {
            if (!_.isString(params.prevId)) {
                throw new Error('invalid prevId argument, expecting string');
            }
            query.prevId = params.prevId;
        }
        if (!_.isUndefined(params.limit)) {
            if (!_.isInteger(params.limit) || params.limit < 1) {
                throw new Error('invalid limit argument, expecting positive integer');
            }
            query.limit = params.limit;
        }
        return this.bitgo.get(this.url('/tx/' + params.txHash))
            .query(query)
            .result()
            .nodeify(callback);
    };
    /**
     * List the transfers for a given wallet
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.transfers = function (params, callback) {
        if (params === void 0) { params = {}; }
        var query = {};
        if (params.prevId) {
            if (!_.isString(params.prevId)) {
                throw new Error('invalid prevId argument, expecting string');
            }
            query.prevId = params.prevId;
        }
        if (params.limit) {
            if (!_.isNumber(params.limit)) {
                throw new Error('invalid limit argument, expecting number');
            }
            query.limit = params.limit;
        }
        if (params.allTokens) {
            if (!_.isBoolean(params.allTokens)) {
                throw new Error('invalid allTokens argument, expecting boolean');
            }
            query.allTokens = params.allTokens;
        }
        if (params.searchLabel) {
            if (!_.isString(params.searchLabel)) {
                throw new Error('invalid searchLabel argument, expecting string');
            }
            query.searchLabel = params.searchLabel;
        }
        if (params.address) {
            if (!_.isArray(params.address) && !_.isString(params.address)) {
                throw new Error('invalid address argument, expecting string or array');
            }
            if (_.isArray(params.address)) {
                params.address.forEach(function (address) {
                    if (!_.isString(address)) {
                        throw new Error('invalid address argument, expecting array of address strings');
                    }
                });
            }
            query.address = params.address;
        }
        if (params.dateGte) {
            if (!_.isString(params.dateGte)) {
                throw new Error('invalid dateGte argument, expecting string');
            }
            query.dateGte = params.dateGte;
        }
        if (params.dateLt) {
            if (!_.isString(params.dateLt)) {
                throw new Error('invalid dateLt argument, expecting string');
            }
            query.dateLt = params.dateLt;
        }
        if (!_.isNil(params.valueGte)) {
            if (!_.isNumber(params.valueGte)) {
                throw new Error('invalid valueGte argument, expecting number');
            }
            query.valueGte = params.valueGte;
        }
        if (!_.isNil(params.valueLt)) {
            if (!_.isNumber(params.valueLt)) {
                throw new Error('invalid valueLt argument, expecting number');
            }
            query.valueLt = params.valueLt;
        }
        if (!_.isNil(params.includeHex)) {
            if (!_.isBoolean(params.includeHex)) {
                throw new Error('invalid includeHex argument, expecting boolean');
            }
            query.includeHex = params.includeHex;
        }
        if (!_.isNil(params.state)) {
            if (!Array.isArray(params.state) && !_.isString(params.state)) {
                throw new Error('invalid state argument, expecting string or array');
            }
            if (Array.isArray(params.state)) {
                params.state.forEach(function (state) {
                    if (!_.isString(state)) {
                        throw new Error('invalid state argument, expecting array of state strings');
                    }
                });
            }
            query.state = params.state;
        }
        if (!_.isNil(params.type)) {
            if (!_.isString(params.type)) {
                throw new Error('invalid type argument, expecting string');
            }
            query.type = params.type;
        }
        return this.bitgo.get(this.url('/transfer'))
            .query(query)
            .result()
            .nodeify(callback);
    };
    /**
     * Get transfers on this wallet
     * @param params
     * @param callback
     */
    Wallet.prototype.getTransfer = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['id'], [], callback);
        return this.bitgo.get(this.url('/transfer/' + params.id))
            .result()
            .nodeify(callback);
    };
    /**
     * Get a transaction by sequence id for a given wallet
     * @param params
     * @param callback
     */
    Wallet.prototype.transferBySequenceId = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['sequenceId'], [], callback);
        return this.bitgo.get(this.url('/transfer/sequenceId/' + params.sequenceId))
            .result()
            .nodeify(callback);
    };
    /**
     * Get the maximum amount you can spend in a single transaction
     *
     * @param {Object} params - parameters object
     * @param {Number} params.limit - maximum number of selectable unspents
     * @param {Number} params.minValue - the minimum value of unspents to use in satoshis
     * @param {Number} params.maxValue - the maximum value of unspents to use in satoshis
     * @param {Number} params.minHeight - the minimum height of unspents on the block chain to use
     * @param {Number} params.minConfirms - all selected unspents will have at least this many confirmations
     * @param {Boolean} params.enforceMinConfirmsForChange - Enforces minConfirms on change inputs
     * @param {Number} params.feeRate - fee rate to use in calculation of maximum spendable in satoshis/kB
     * @param {Number} params.maxFeeRate - upper limit for feeRate in satoshis/kB
     * @param {String} params.recipientAddress - recipient addresses for a more accurate calculation of the maximum available to send
     * @param callback
     * @returns {{maximumSpendable: Number, coin: String}}
     * NOTE : feeTxConfirmTarget omitted on purpose because gauging the maximum spendable amount with dynamic fees does not make sense
     */
    Wallet.prototype.maximumSpendable = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var filteredParams;
            return __generator(this, function (_a) {
                filteredParams = _.pick(params, [
                    'minValue', 'maxValue', 'minHeight', 'target', 'plainTarget', 'limit', 'minConfirms',
                    'enforceMinConfirmsForChange', 'feeRate', 'maxFeeRate', 'recipientAddress'
                ]);
                return [2 /*return*/, self.bitgo.get(self.url('/maximumSpendable'))
                        .query(filteredParams)
                        .result()];
            });
        }).call(this).asCallback(callback);
    };
    /**
     * List the unspents for a given wallet
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.unspents = function (params, callback) {
        if (params === void 0) { params = {}; }
        var query = _.pick(params, ['prevId', 'limit', 'minValue', 'maxValue', 'minHeight', 'minConfirms', 'target', 'segwit', 'chains']);
        return this.bitgo.get(this.url('/unspents'))
            .query(query)
            .result()
            .nodeify(callback);
    };
    /**
     * Consolidate or fanout unspents on a wallet
     *
     * @param {String} routeName - either `consolidate` or `fanout`
     *
     * @param {Object} params - parameters object
     *
     * Wallet parameters:
     * @param {String} params.walletPassphrase - the users wallet passphrase
     * @param {String} params.xprv - the private key in string form if the walletPassphrase is not available
     *
     * Fee parameters:
     * @param {Number} params.feeRate - The fee rate to use for the consolidation in satoshis/kB
     * @param {Number} params.maxFeeRate - upper limit for feeRate in satoshis/kB
     * @param {Number} params.maxFeePercentage - the maximum relative portion that you're willing to spend towards fees
     * @param {Number} params.feeTxConfirmTarget - estimate the fees to aim for first confirmation with this number of blocks
     *
     * Input parameters:
     * @param {Number} params.minValue - the minimum value of unspents to use in satoshis
     * @param {Number} params.maxValue - the maximum value of unspents to use in satoshis
     * @param {Number} params.minHeight - the minimum height of unspents on the block chain to use
     * @param {Number} params.minConfirms - all selected unspents will have at least this many confirmations
     * @param {Boolean} params.enforceMinConfirmsForChange - if true, minConfirms also applies to change outputs
     * @param {Number} params.limit                for routeName === 'consolidate'
     *                 params.maxNumUnspentsToUse  for routeName === 'fanout'
     *                  - maximum number of unspents you want to use in the transaction
     * Output parameters:
     * @param {Number} params.numUnspentsToMake - the number of new unspents to make
     *
     * @param callback
     */
    Wallet.prototype.manageUnspents = function (routeName, params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var reqId, filteredParams, response, keychain, transactionParams, signedTransaction, selectParams, finalTxParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        common.validateParams(params, [], ['walletPassphrase', 'xprv'], callback);
                        reqId = new util_1.RequestTracer();
                        filteredParams = _.pick(params, [
                            'feeRate',
                            'maxFeeRate',
                            'maxFeePercentage',
                            'feeTxConfirmTarget',
                            'minValue',
                            'maxValue',
                            'minHeight',
                            'minConfirms',
                            'enforceMinConfirmsForChange',
                            routeName === 'consolidate' ? 'limit' : 'maxNumUnspentsToUse',
                            'numUnspentsToMake',
                        ]);
                        self.bitgo.setRequestTracer(reqId);
                        return [4 /*yield*/, self.bitgo.post(self.url("/" + routeName + "Unspents"))
                                .send(filteredParams)
                                .result()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, self.baseCoin.keychains().get({ id: self._wallet.keys[0], reqId: reqId })];
                    case 2:
                        keychain = _a.sent();
                        transactionParams = _.extend({}, params, { txPrebuild: response, keychain: keychain });
                        return [4 /*yield*/, self.signTransaction(transactionParams)];
                    case 3:
                        signedTransaction = _a.sent();
                        selectParams = _.pick(params, ['comment', 'otp']);
                        finalTxParams = _.extend({}, signedTransaction, selectParams);
                        self.bitgo.setRequestTracer(reqId);
                        return [2 /*return*/, self.bitgo.post(self.baseCoin.url('/wallet/' + self._wallet.id + '/tx/send'))
                                .send(finalTxParams)
                                .result()];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Consolidate unspents on a wallet
     *
     * @param {Object} params - parameters object
     * @param {String} params.walletPassphrase - the users wallet passphrase
     * @param {String} params.xprv - the private key in string form if the walletPassphrase is not available
     * @param {Number} params.feeRate - The fee rate to use for the consolidation in satoshis/kB
     * @param {Number} params.maxFeeRate - upper limit for feeRate in satoshis/kB
     * @param {Number} params.maxFeePercentage - the maximum relative portion that you're willing to spend towards fees
     * @param {Number} params.feeTxConfirmTarget - estimate the fees to aim for first confirmation with this number of blocks
     * @param {Number} params.minValue - the minimum value of unspents to use in satoshis
     * @param {Number} params.maxValue - the maximum value of unspents to use in satoshis
     * @param {Number} params.minHeight - the minimum height of unspents on the block chain to use
     * @param {Number} params.minConfirms - all selected unspents will have at least this many confirmations
     * @param {Boolean} params.enforceMinConfirmsForChange - if true, minConfirms also applies to change outputs
     * @param {Number} params.limit                for routeName === 'consolidate'
     *                 params.maxNumUnspentsToUse  for routeName === 'fanout'
     *                  - maximum number of unspents you want to use in the transaction
     * @param {Number} params.numUnspentsToMake - the number of new unspents to make
     * @param callback
     */
    Wallet.prototype.consolidateUnspents = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.manageUnspents('consolidate', params, callback);
    };
    /**
     * Fanout unspents on a wallet
     *
     * @param {Object} params - parameters object
     * @param {String} params.walletPassphrase - the users wallet passphrase
     * @param {String} params.xprv - the private key in string form if the walletPassphrase is not available
     * @param {Number} params.minValue - the minimum value of unspents to use
     * @param {Number} params.maxValue - the maximum value of unspents to use
     * @param {Number} params.minHeight - the minimum height of unspents on the block chain to use
     * @param {Number} params.minConfirms - all selected unspents will have at least this many confirmations
     * @param {Number} params.maxFeePercentage - the maximum proportion of an unspent you are willing to lose to fees
     * @param {Number} params.feeTxConfirmTarget - estimate the fees to aim for first confirmation with this number of blocks
     * @param {Number} params.feeRate - The desired fee rate for the transaction in satoshis/kB
     * @param {Number} params.maxFeeRate - The max limit for a fee rate in satoshis/kB
     * @param {Number} params.maxNumInputsToUse - the number of unspents you want to use in the transaction
     * @param {Number} params.numUnspentsToMake - the number of new unspents to make
     * @param callback
     */
    Wallet.prototype.fanoutUnspents = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.manageUnspents('fanout', params, callback);
    };
    /**
     * Set the token flush thresholds for the wallet. Updates the wallet.
     * Tokens will only be flushed from forwarder contracts if the balance is greater than the threshold defined here.
     * @param thresholds {Object} - pairs of { [tokenName]: threshold } (base units)
     * @param [callback]
     */
    Wallet.prototype.updateTokenFlushThresholds = function (thresholds, callback) {
        if (thresholds === void 0) { thresholds = {}; }
        var self = this;
        return co(function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (self.baseCoin.getFamily() !== 'eth') {
                            throw new Error('not supported for this wallet');
                        }
                        _a = self;
                        return [4 /*yield*/, self.bitgo.put(self.url()).send({
                                tokenFlushThresholds: thresholds
                            }).result()];
                    case 1:
                        _a._wallet = _b.sent();
                        return [2 /*return*/];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Sweep funds for a wallet
     *
     * @param {Object} params - parameters object
     * @param {String} params.address - The address to send all the funds in the wallet to
     * @param {String} params.walletPassphrase - the users wallet passphrase
     * @param {String} params.xprv - the private key in string form if the walletPassphrase is not available
     * @param {String} params.otp - Two factor auth code to enable sending the transaction
     * @param {Number} params.feeTxConfirmTarget - Estimate the fees to aim for first confirmation within this number of blocks
     * @param {Number} params.feeRate - The desired fee rate for the transaction in satoshis/kB
     * @param {Number} [params.maxFeeRate] - upper limit for feeRate in satoshis/kB
     * @param {Boolean} [params.allowPartialSweep] - allows sweeping 200 unspents when the wallet has more than that
     * @param [callback]
     * @returns txHex {String} the txHex of the signed transaction
     */
    Wallet.prototype.sweep = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var value, reqId, filteredParams, response, keychain, transactionParams, signedTransaction, selectParams, finalTxParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = params || {};
                        common.validateParams(params, ['address'], ['walletPassphrase', 'xprv', 'otp'], callback);
                        if (['eth', 'xrp'].includes(self.baseCoin.getFamily())) {
                            if (self.confirmedBalanceString() !== self.balanceString()) {
                                throw new Error('cannot sweep when unconfirmed funds exist on the wallet, please wait until all inbound transactions confirm');
                            }
                            value = self.spendableBalanceString();
                            if (_.isUndefined(value) || value === '0') {
                                throw new Error('no funds to sweep');
                            }
                            params.recipients = [{
                                    address: params.address,
                                    amount: value,
                                }];
                            return [2 /*return*/, self.sendMany(params)];
                        }
                        reqId = new util_1.RequestTracer();
                        filteredParams = _.pick(params, ['address', 'feeRate', 'maxFeeRate', 'feeTxConfirmTarget', 'allowPartialSweep']);
                        self.bitgo.setRequestTracer(reqId);
                        return [4 /*yield*/, self.bitgo.post(self.url('/sweepWallet'))
                                .send(filteredParams)
                                .result()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, self.baseCoin.keychains().get({ id: self._wallet.keys[0], reqId: reqId })];
                    case 2:
                        keychain = _a.sent();
                        transactionParams = _.extend({}, params, { txPrebuild: response, keychain: keychain, prv: params.xprv });
                        return [4 /*yield*/, self.signTransaction(transactionParams)];
                    case 3:
                        signedTransaction = _a.sent();
                        selectParams = _.pick(params, ['otp']);
                        finalTxParams = _.extend({}, signedTransaction, selectParams);
                        self.bitgo.setRequestTracer(reqId);
                        return [2 /*return*/, self.bitgo.post(self.baseCoin.url('/wallet/' + self._wallet.id + '/tx/send'))
                                .send(finalTxParams)
                                .result()];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Freeze a given wallet
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.freeze = function (params, callback) {
        if (params === void 0) { params = {}; }
        params = params || {};
        common.validateParams(params, [], [], callback);
        if (params.duration) {
            if (!_.isNumber(params.duration)) {
                throw new Error('invalid duration: should be number of seconds');
            }
        }
        return this.bitgo.post(this.url('/freeze'))
            .result()
            .nodeify(callback);
    };
    /**
     * Update comment of a transfer
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.transferComment = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['id'], ['comment'], callback);
        return this.bitgo.post(this.baseCoin.url('/wallet/' + this._wallet.id + '/transfer/' + params.id + '/comment'))
            .send(params)
            .result()
            .nodeify(callback);
    };
    /**
     * List the addresses for a given wallet
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.addresses = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, [], [], callback);
        var query = {};
        if (params.mine) {
            query.mine = !!params.mine;
        }
        if (!_.isUndefined(params.prevId)) {
            if (!_.isString(params.prevId)) {
                throw new Error('invalid prevId argument, expecting string');
            }
            query.prevId = params.prevId;
        }
        if (params.sort) {
            if (!_.isNumber(params.sort)) {
                throw new Error('invalid sort argument, expecting number');
            }
            query.sort = params.sort;
        }
        if (params.limit) {
            if (!_.isNumber(params.limit)) {
                throw new Error('invalid limit argument, expecting number');
            }
            query.limit = params.limit;
        }
        if (params.labelContains) {
            if (!_.isString(params.labelContains)) {
                throw new Error('invalid labelContains argument, expecting string');
            }
            query.labelContains = params.labelContains;
        }
        if (!_.isUndefined(params.segwit)) {
            if (!_.isBoolean(params.segwit)) {
                throw new Error('invalid segwit argument, expecting boolean');
            }
            query.segwit = params.segwit;
        }
        if (!_.isUndefined(params.chains)) {
            if (!_.isArray(params.chains)) {
                throw new Error('invalid chains argument, expecting array of numbers');
            }
            query.chains = params.chains;
        }
        return this.bitgo.get(this.baseCoin.url('/wallet/' + this._wallet.id + '/addresses'))
            .query(query)
            .result()
            .nodeify(callback);
    };
    /**
     * Get a single wallet address by its id
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.getAddress = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, [], ['address', 'id'], callback);
        var query;
        if (_.isUndefined(params.address) && _.isUndefined(params.id)) {
            throw new Error('address or id of address required');
        }
        if (params.address) {
            query = params.address;
        }
        else {
            query = params.id;
        }
        if (params.reqId) {
            this.bitgo.setRequestTracer(params.reqId);
        }
        return this.bitgo.get(this.baseCoin.url("/wallet/" + this._wallet.id + "/address/" + encodeURIComponent(query)))
            .result()
            .nodeify(callback);
    };
    /**
     * Create one or more new address(es) for use with this wallet.
     *
     * If the `count` field is defined and greater than 1, an object with a single
     * array property named `addresses` containing `count` address objects
     * will be returned. Otherwise, a single address object is returned.
     *
     * @param params
     * @param {Number} params.chain on which the new address should be created
     * @param {(Number|String)} params.gasPrice gas price for new address creation, if applicable
     * @param {String} params.label label for the new address(es)
     * @param {Number} params.count=1 number of new addresses which should be created (maximum 250)
     * @param {Boolean} params.lowPriority Ethereum-specific param to create address using low priority fee address
     * @param callback
     */
    Wallet.prototype.createAddress = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var addressParams, reqId, chain, gasPrice, label, lowPriority, _a, count, keychains, rootAddress, newAddresses, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        addressParams = {};
                        reqId = new util_1.RequestTracer();
                        chain = params.chain, gasPrice = params.gasPrice, label = params.label, lowPriority = params.lowPriority, _a = params.count, count = _a === void 0 ? 1 : _a;
                        if (!_.isUndefined(chain)) {
                            if (!_.isInteger(chain)) {
                                throw new Error('chain has to be an integer');
                            }
                            addressParams.chain = chain;
                        }
                        if (!_.isUndefined(gasPrice)) {
                            if (!_.isInteger(gasPrice) && (isNaN(Number(gasPrice)) || !_.isString(gasPrice))) {
                                throw new Error('gasPrice has to be an integer or numeric string');
                            }
                            addressParams.gasPrice = gasPrice;
                        }
                        if (!_.isUndefined(label)) {
                            if (!_.isString(label)) {
                                throw new Error('label has to be a string');
                            }
                            addressParams.label = label;
                        }
                        if (!_.isInteger(count) || count <= 0 || count > 250) {
                            throw new Error('count has to be a number between 1 and 250');
                        }
                        if (!_.isUndefined(lowPriority)) {
                            if (!_.isBoolean(lowPriority)) {
                                throw new Error('lowPriority has to be a boolean');
                            }
                            addressParams.lowPriority = lowPriority;
                        }
                        return [4 /*yield*/, Bluebird.map(self._wallet.keys, function (k) { return self.baseCoin.keychains().get({ id: k, reqId: reqId }); })];
                    case 1:
                        keychains = _c.sent();
                        rootAddress = _.get(self._wallet, 'receiveAddress.address');
                        newAddresses = _.times(count, co(function createAndVerifyAddress() {
                            var newAddress, AbstractUtxoCoin_1, verificationData;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        self.bitgo.setRequestTracer(reqId);
                                        return [4 /*yield*/, self.bitgo.post(self.baseCoin.url('/wallet/' + self._wallet.id + '/address'))
                                                .send(addressParams)
                                                .result()];
                                    case 1:
                                        newAddress = _a.sent();
                                        // infer its address type
                                        if (_.isObject(newAddress.coinSpecific)) {
                                            AbstractUtxoCoin_1 = require('./coins/abstractUtxoCoin').AbstractUtxoCoin;
                                            newAddress.addressType = AbstractUtxoCoin_1.inferAddressType(newAddress);
                                        }
                                        newAddress.keychains = keychains;
                                        verificationData = _.merge({}, newAddress, { rootAddress: rootAddress });
                                        if (verificationData.error) {
                                            throw new errors_1.AddressGenerationError(verificationData.error);
                                        }
                                        self.baseCoin.verifyAddress(verificationData);
                                        return [2 /*return*/, newAddress];
                                }
                            });
                        }).bind(this));
                        if (newAddresses.length === 1) {
                            return [2 /*return*/, newAddresses[0]];
                        }
                        _b = {};
                        return [4 /*yield*/, Promise.all(newAddresses)];
                    case 2: return [2 /*return*/, (_b.addresses = _c.sent(),
                            _b)];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Update properties on an address
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.updateAddress = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var address, putParams, url;
            return __generator(this, function (_a) {
                address = params.address;
                if (!_.isString(address)) {
                    throw new Error('missing required string parameter address');
                }
                putParams = _.pick(params, ['label']);
                url = self.url('/address/' + encodeURIComponent(address));
                return [2 /*return*/, self.bitgo.put(url).send(putParams).result()];
            });
        }).call(this).asCallback(callback);
    };
    /**
     * List webhooks on this wallet
     * @param params
     * @param callback
     */
    Wallet.prototype.listWebhooks = function (params, callback) {
        if (params === void 0) { params = {}; }
        var query = {};
        if (params.prevId) {
            if (!_.isString(params.prevId)) {
                throw new Error('invalid prevId argument, expecting string');
            }
            query.prevId = params.prevId;
        }
        if (params.limit) {
            if (!_.isNumber(params.limit)) {
                throw new Error('invalid limit argument, expecting number');
            }
            query.limit = params.limit;
        }
        return this.bitgo.get(this.url('/webhooks'))
            .query(query)
            .result()
            .nodeify(callback);
    };
    /**
     * Simulate wallet webhook, currently for webhooks of type transfer and pending approval
     * @param params
     * - webhookId (required) id of the webhook to be simulated
     * - transferId (optional but required for transfer webhooks) id of the simulated transfer
     * - pendingApprovalId (optional but required for pending approval webhooks) id of the simulated pending approval
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.simulateWebhook = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['webhookId'], ['transferId', 'pendingApprovalId'], callback);
        var hasTransferId = !!params.transferId;
        var hasPendingApprovalId = !!params.pendingApprovalId;
        if (!hasTransferId && !hasPendingApprovalId) {
            throw new Error('must supply either transferId or pendingApprovalId');
        }
        if (hasTransferId && hasPendingApprovalId) {
            throw new Error('must supply either transferId or pendingApprovalId, but not both');
        }
        // depending on the coin type of the wallet, the txHash has to adhere to its respective format
        // but the server takes care of that
        // only take the transferId and pendingApprovalId properties
        var filteredParams = _.pick(params, ['transferId', 'pendingApprovalId']);
        var webhookId = params.webhookId;
        return this.bitgo.post(this.url('/webhooks/' + webhookId + '/simulate'))
            .send(filteredParams)
            .result()
            .nodeify(callback);
    };
    /**
     * Add a webhook to this wallet
     * @param params
     * @param callback
     */
    Wallet.prototype.addWebhook = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['url', 'type'], [], callback);
        return this.bitgo.post(this.url('/webhooks'))
            .send(params)
            .result()
            .nodeify(callback);
    };
    /**
     * Remove a webhook from this wallet
     * @param params
     * @param callback
     */
    Wallet.prototype.removeWebhook = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['url', 'type'], [], callback);
        return this.bitgo.del(this.url('/webhooks'))
            .send(params)
            .result()
            .nodeify(callback);
    };
    /**
     * Gets the user key chain for this wallet
     *
     * The user key chain is the first keychain of the wallet and usually has the encrypted prv stored on BitGo.
     * Useful when trying to get the users' keychain from the server before decrypting to sign a transaction.
     * @param params
     * @param callback
     */
    Wallet.prototype.getEncryptedUserKeychain = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        var tryKeyChain = co(function (index) {
            var params, keychain;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!self._wallet.keys || index >= self._wallet.keys.length) {
                            throw new Error('No encrypted keychains on this wallet.');
                        }
                        params = { id: self._wallet.keys[index] };
                        return [4 /*yield*/, self.baseCoin.keychains().get(params)];
                    case 1:
                        keychain = _a.sent();
                        // If we find the prv, then this is probably the user keychain we're looking for
                        if (keychain.encryptedPrv) {
                            return [2 /*return*/, keychain];
                        }
                        return [2 /*return*/, tryKeyChain(index + 1)];
                }
            });
        }).bind(this);
        return tryKeyChain(0).nodeify(callback);
    };
    /**
     * Gets the unencrypted private key for this wallet (be careful!)
     * Requires wallet passphrase
     *
     * @param params
     * @param callback
     */
    Wallet.prototype.getPrv = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var userKeychain, userEncryptedPrv, userPrv;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        common.validateParams(params, [], ['walletPassphrase', 'prv'], callback);
                        // Prepare signing key
                        if (_.isUndefined(params.prv) && _.isUndefined(params.walletPassphrase)) {
                            throw new Error('must either provide prv or wallet passphrase');
                        }
                        if (!_.isUndefined(params.prv) && !_.isString(params.prv)) {
                            throw new Error('prv must be a string');
                        }
                        if (!_.isUndefined(params.walletPassphrase) && !_.isString(params.walletPassphrase)) {
                            throw new Error('walletPassphrase must be a string');
                        }
                        if (params.prv) {
                            return [2 /*return*/, params.prv];
                        }
                        return [4 /*yield*/, self.getEncryptedUserKeychain()];
                    case 1:
                        userKeychain = _a.sent();
                        userEncryptedPrv = userKeychain.encryptedPrv;
                        try {
                            userPrv = self.bitgo.decrypt({ input: userEncryptedPrv, password: params.walletPassphrase });
                        }
                        catch (e) {
                            throw new Error('error decrypting wallet passphrase');
                        }
                        return [2 /*return*/, userPrv];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Send an encrypted wallet share to BitGo.
     * @param params
     * @param callback
     */
    Wallet.prototype.createShare = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['user', 'permissions'], [], callback);
        if (params.keychain && !_.isEmpty(params.keychain)) {
            if (!params.keychain.pub || !params.keychain.encryptedPrv || !params.keychain.fromPubKey || !params.keychain.toPubKey || !params.keychain.path) {
                throw new Error('requires keychain parameters - pub, encryptedPrv, fromPubKey, toPubKey, path');
            }
        }
        return this.bitgo.post(this.url('/share'))
            .send(params)
            .result()
            .nodeify(callback);
    };
    /**
     * Share this wallet with another BitGo user.
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.shareWallet = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var needsKeychain, sharing, sharedKeychain, keychain, eckey, secret, newEncryptedPrv, e_1, options;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        common.validateParams(params, ['email', 'permissions'], ['walletPassphrase', 'message'], callback);
                        if (params.reshare !== undefined && !_.isBoolean(params.reshare)) {
                            throw new Error('Expected reshare to be a boolean.');
                        }
                        if (params.skipKeychain !== undefined && !_.isBoolean(params.skipKeychain)) {
                            throw new Error('Expected skipKeychain to be a boolean. ');
                        }
                        needsKeychain = !params.skipKeychain && params.permissions && params.permissions.indexOf('spend') !== -1;
                        if (params.disableEmail !== undefined && !_.isBoolean(params.disableEmail)) {
                            throw new Error('Expected disableEmail to be a boolean.');
                        }
                        if (!_.isString(params.email)) {
                            throw new Error('missing required string parameter email');
                        }
                        return [4 /*yield*/, self.bitgo.getSharingKey({ email: params.email.toLowerCase() })];
                    case 1:
                        sharing = _a.sent();
                        if (!needsKeychain) return [3 /*break*/, 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, self.getEncryptedUserKeychain({})];
                    case 3:
                        keychain = _a.sent();
                        // Decrypt the user key with a passphrase
                        if (keychain.encryptedPrv) {
                            if (!params.walletPassphrase) {
                                throw new Error('Missing walletPassphrase argument');
                            }
                            try {
                                keychain.prv = self.bitgo.decrypt({ password: params.walletPassphrase, input: keychain.encryptedPrv });
                            }
                            catch (e) {
                                throw new Error('Unable to decrypt user keychain');
                            }
                            eckey = bitcoin_1.makeRandomKey();
                            secret = self.bitgo.getECDHSecret({ eckey: eckey, otherPubKeyHex: sharing.pubkey });
                            newEncryptedPrv = self.bitgo.encrypt({ password: secret, input: keychain.prv });
                            sharedKeychain = {
                                pub: keychain.pub,
                                encryptedPrv: newEncryptedPrv,
                                fromPubKey: eckey.getPublicKeyBuffer().toString('hex'),
                                toPubKey: sharing.pubkey,
                                path: sharing.path,
                            };
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        if (e_1.message === 'No encrypted keychains on this wallet.') {
                            sharedKeychain = {};
                            // ignore this error because this looks like a cold wallet
                        }
                        else {
                            throw e_1;
                        }
                        return [3 /*break*/, 5];
                    case 5:
                        options = {
                            user: sharing.userId,
                            permissions: params.permissions,
                            reshare: params.reshare,
                            message: params.message,
                            disableEmail: params.disableEmail,
                        };
                        if (sharedKeychain) {
                            options.keychain = sharedKeychain;
                        }
                        else if (params.skipKeychain) {
                            options.keychain = {};
                        }
                        return [2 /*return*/, self.createShare(options)];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Remove user from wallet
     * @param params
     * - userId Id of the user to remove
     * @param callback
     * @return {*}
     */
    Wallet.prototype.removeUser = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['userId'], [], callback);
        var userId = params.userId;
        return this.bitgo.del(this.url('/user/' + userId))
            .result()
            .nodeify(callback);
    };
    /**
     * Fetch a transaction prebuild (unsigned transaction) from BitGo
     *
     * @param {Object} params
     * @param {{address: string, amount: string}} params.recipients - list of recipients and necessary recipient information
     * @param {Number} params.numBlocks - Estimates the approximate fee per kilobyte necessary for a transaction confirmation within numBlocks blocks
     * @param {Number} params.feeRate - the desired feeRate for the transaction in base units/kB
     * @param {Number} params.maxFeeRate - upper limit for feeRate in base units/kB
     * @param {Number} params.minConfirms - Minimum number of confirmations unspents going into this transaction should have
     * @param {Boolean} params.enforceMinConfirmsForChange - Enforce minimum number of confirmations on change (internal) inputs.
     * @param {Number} params.targetWalletUnspents - The desired count of unspents in the wallet. If the wallet’s current unspent count is lower than the target, up to four additional change outputs will be added to the transaction.
     * @param {Number} params.minValue - Ignore unspents smaller than this amount of base units
     * @param {Number} params.maxValue - Ignore unspents larger than this amount of base units
     * @param {Number} params.sequenceId - The sequence ID of the transaction
     * @param {Number} params.lastLedgerSequence - Absolute max ledger the transaction should be accepted in, whereafter it will be rejected.
     * @param {String} params.ledgerSequenceDelta - Relative ledger height (in relation to the current ledger) that the transaction should be accepted in, whereafter it will be rejected.
     * @param {Number} params.gasPrice - Custom gas price to be used for sending the transaction
     * @param {Number} params.gasLimit - Custom gas limit to be used for sending the transaction
     * @param {Boolean} params.noSplitChange - Set to true to disable automatic change splitting for purposes of unspent management
     * @param {Array} params.unspents - The unspents to use in the transaction. Each unspent should be in the form prevTxId:nOutput
     * @param {String} params.changeAddress - Specifies the destination of the change output
     * @param {Number} params.validFromBlock - (Algorand) The minimum round this will run on
     * @param {Number} params.validToBlock - (Algorand) The maximum round this will run on
     * @param {Boolean} params.instant - Build this transaction to conform with instant sending coin-specific method (if available)
     * @param {{value: String, type: String}} params.memo - Memo to use in transaction (supported by Stellar)
     * @param {String} params.addressType - The type of address to create for change. One of `p2sh`, `p2shP2wsh`, and `p2wsh`. Case-sensitive.
     * @param {Boolean} params.hop - Build this as an Ethereum hop transaction
     * @param {Object} params.reservation - Object to reserve the unspents that this tx build uses. Format is reservation = { expireTime: ISODateString, pendingApprovalId: String }
     * @param {String} params.walletPassphrase The passphrase to the wallet user key, to sign commitment data for Ethereum hop transactions
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.prebuildTransaction = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var whitelistedParams, extraParams, buildQuery, utxoCoin, blockHeightQuery, queries, _a, buildResponse, blockHeight, prebuild;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        whitelistedParams = _.pick(params, self.prebuildWhitelistedParams());
                        debug('prebuilding transaction: %O', whitelistedParams);
                        if (params.reqId) {
                            self.bitgo.setRequestTracer(params.reqId);
                        }
                        return [4 /*yield*/, self.baseCoin.getExtraPrebuildParams(Object.assign(params, { wallet: self }))];
                    case 1:
                        extraParams = _b.sent();
                        Object.assign(whitelistedParams, extraParams);
                        buildQuery = self.bitgo.post(self.baseCoin.url('/wallet/' + self.id() + '/tx/build'))
                            .send(whitelistedParams)
                            .result();
                        utxoCoin = self.baseCoin;
                        blockHeightQuery = _.isFunction(utxoCoin.getLatestBlockHeight) ?
                            utxoCoin.getLatestBlockHeight(params.reqId) :
                            Promise.resolve(undefined);
                        queries = [buildQuery, blockHeightQuery];
                        return [4 /*yield*/, Promise.all(queries)];
                    case 2:
                        _a = _b.sent(), buildResponse = _a[0], blockHeight = _a[1];
                        debug('postprocessing transaction prebuild: %O', buildResponse);
                        if (!_.isUndefined(blockHeight)) {
                            buildResponse.blockHeight = blockHeight;
                        }
                        return [4 /*yield*/, self.baseCoin.postProcessPrebuild(Object.assign(buildResponse, { wallet: self, buildParams: whitelistedParams }))];
                    case 3:
                        prebuild = _b.sent();
                        delete prebuild.wallet;
                        delete prebuild.buildParams;
                        prebuild = _.extend({}, prebuild, { walletId: self.id() });
                        debug('final transaction prebuild: %O', prebuild);
                        return [2 /*return*/, prebuild];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Sign a transaction
     * @param params
     * - txPrebuild
     * - [keychain / key] (object) or prv (string)
     * - walletPassphrase
     * @param callback
     * @return {*}
     */
    Wallet.prototype.signTransaction = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var txPrebuild, presign, userPrv, signingParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        txPrebuild = params.txPrebuild;
                        if (!txPrebuild || typeof txPrebuild !== 'object') {
                            throw new Error('txPrebuild must be an object');
                        }
                        return [4 /*yield*/, self.baseCoin.presignTransaction(params)];
                    case 1:
                        presign = _a.sent();
                        userPrv = self.getUserPrv(presign);
                        signingParams = _.extend({}, presign, { txPrebuild: txPrebuild, prv: userPrv });
                        return [2 /*return*/, self.baseCoin.signTransaction(signingParams)];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Get the user private key from either a derivation or an encrypted keychain
     * @param [params.keychain / params.key] (object) or params.prv (string)
     * @param params.walletPassphrase (string)
     */
    Wallet.prototype.getUserPrv = function (params) {
        if (params === void 0) { params = {}; }
        var userKeychain = params.keychain || params.key;
        var userPrv = params.prv;
        if (userPrv && typeof userPrv !== 'string') {
            throw new Error('prv must be a string');
        }
        if (userPrv && params.coldDerivationSeed) {
            // the derivation only makes sense when a key already exists
            var derivation = this.baseCoin.deriveKeyWithSeed({ key: userPrv, seed: params.coldDerivationSeed });
            userPrv = derivation.key;
        }
        else if (!userPrv) {
            if (!userKeychain || typeof userKeychain !== 'object') {
                throw new Error('keychain must be an object');
            }
            var userEncryptedPrv = userKeychain.encryptedPrv;
            if (!userEncryptedPrv) {
                throw new Error('keychain does not have property encryptedPrv');
            }
            if (!params.walletPassphrase) {
                throw new Error('walletPassphrase property missing');
            }
            userPrv = this.bitgo.decrypt({ input: userEncryptedPrv, password: params.walletPassphrase });
        }
        return userPrv;
    };
    /**
     * Get a transaction prebuild from BitGo, validate it, and then decrypt the user key and sign the transaction
     * @param params
     * @param callback
     */
    Wallet.prototype.prebuildAndSignTransaction = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var error, error, error, txPrebuildQuery, keychains, txPrebuild, verificationParams, e_2, signingParams, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (params.prebuildTx && params.recipients) {
                            error = new Error('Only one of prebuildTx and recipients may be specified');
                            error.code = 'both_prebuildtx_and_recipients_specified';
                            throw error;
                        }
                        if (params.recipients && !Array.isArray(params.recipients)) {
                            error = new Error('expecting recipients array');
                            error.code = 'recipients_not_array';
                            throw error;
                        }
                        if (_.isArray(self._permissions) && !self._permissions.includes('spend')) {
                            error = new Error('no spend permission on this wallet');
                            error.code = 'user_not_allowed_to_spend_from_wallet';
                            throw error;
                        }
                        txPrebuildQuery = params.prebuildTx ? Promise.resolve(params.prebuildTx) : self.prebuildTransaction(params);
                        return [4 /*yield*/, self.baseCoin.keychains().getKeysForSigning({ wallet: self, reqId: params.reqId })];
                    case 1:
                        keychains = _a.sent();
                        return [4 /*yield*/, txPrebuildQuery];
                    case 2:
                        txPrebuild = _a.sent();
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        verificationParams = _.pick(params.verification || {}, ['disableNetworking', 'keychains', 'addresses']);
                        return [4 /*yield*/, self.baseCoin.verifyTransaction({
                                txParams: params,
                                txPrebuild: txPrebuild,
                                wallet: self,
                                verification: verificationParams,
                                reqId: params.reqId,
                            })];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        e_2 = _a.sent();
                        debug('Transaction prebuild failure:', e_2);
                        console.error('transaction prebuild failed local validation:');
                        throw e_2;
                    case 6:
                        signingParams = _.extend({}, params, {
                            txPrebuild: txPrebuild,
                            wallet: {
                                // this is the version of the multisig address at wallet creation time
                                addressVersion: self._wallet.coinSpecific.addressVersion
                            },
                            keychain: keychains[0],
                            backupKeychain: (keychains.length > 1) ? keychains[1] : null,
                            bitgoKeychain: (keychains.length > 2) ? keychains[2] : null,
                        });
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 9, , 10]);
                        return [4 /*yield*/, self.signTransaction(signingParams)];
                    case 8: return [2 /*return*/, _a.sent()];
                    case 9:
                        error_1 = _a.sent();
                        if (error_1.message.includes('insufficient funds')) {
                            error_1.code = 'insufficient_funds';
                            error_1.walletBalances = {
                                balanceString: self.balanceString(),
                                confirmedBalanceString: self.confirmedBalanceString(),
                                spendableBalanceString: self.spendableBalanceString(),
                                balance: self.balance(),
                                confirmedBalance: self.confirmedBalance(),
                                spendableBalance: self.spendableBalance()
                            };
                            error_1.txParams = _.omit(params, ['keychain', 'prv', 'passphrase', 'walletPassphrase', 'key']);
                        }
                        throw error_1;
                    case 10: return [2 /*return*/];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Accelerate a transaction's confirmation using Child-Pays-For-Parent (CPFP)
     * @param params
     * @param callback
     */
    Wallet.prototype.accelerateTransaction = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var error, error, error, error, error, submitParams, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // TODO(BG-9349): change the last check to > 0 and the error message once platform allows multiple transactions to
                        //                be bumped in the same CPFP transaction
                        if (_.isUndefined(params.cpfpTxIds) || !Array.isArray(params.cpfpTxIds) || params.cpfpTxIds.length !== 1) {
                            error = new Error('expecting cpfpTxIds to be an array of length 1');
                            error.code = 'cpfptxids_not_array';
                            throw error;
                        }
                        if (_.isUndefined(params.cpfpFeeRate)) {
                            if (params.noCpfpFeeRate !== true) {
                                error = new Error('cpfpFeeRate must be set unless noCpfpFeeRate is set');
                                error.code = 'cpfpfeerate_not_set';
                                throw error;
                            }
                        }
                        else {
                            if (!_.isInteger(params.cpfpFeeRate) || params.cpfpFeeRate < 0) {
                                error = new Error('cpfpFeeRate must be a non-negative integer');
                                error.code = 'cpfpfeerate_not_nonnegative_integer';
                                throw error;
                            }
                        }
                        if (_.isUndefined(params.maxFee)) {
                            if (params.noMaxFee !== true) {
                                error = new Error('maxFee must be set unless noMaxFee is set');
                                error.code = 'maxfee_not_set';
                                throw error;
                            }
                        }
                        else {
                            if (!_.isInteger(params.maxFee) || params.maxFee < 0) {
                                error = new Error('maxFee must be a non-negative integer');
                                error.code = 'maxfee_not_nonnegative_integer';
                                throw error;
                            }
                        }
                        if (params.recipients !== undefined) {
                            if (!Array.isArray(params.recipients) || params.recipients.length !== 0) {
                                throw new Error("invalid value for 'recipients': must be empty array when set");
                            }
                        }
                        params.recipients = [];
                        _b = (_a = Object).assign;
                        _c = [params];
                        return [4 /*yield*/, self.prebuildAndSignTransaction(params)];
                    case 1:
                        submitParams = _b.apply(_a, _c.concat([_d.sent()]));
                        delete submitParams.wallet;
                        return [4 /*yield*/, self.submitTransaction(submitParams)];
                    case 2: return [2 /*return*/, _d.sent()];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Submit a half-signed transaction to BitGo
     * @param params
     * - txHex: transaction hex to submit
     * - halfSigned: object containing transaction (txHex or txBase64) to submit
     * @param callback
     */
    Wallet.prototype.submitTransaction = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, [], ['otp', 'txHex'], callback);
        var hasTxHex = !!params.txHex;
        var hasHalfSigned = !!params.halfSigned;
        if ((hasTxHex && hasHalfSigned) || (!hasTxHex && !hasHalfSigned)) {
            throw new Error('must supply either txHex or halfSigned, but not both');
        }
        return this.bitgo.post(this.baseCoin.url('/wallet/' + this.id() + '/tx/send'))
            .send(params)
            .result()
            .nodeify(callback);
    };
    /**
     * Send coins to a recipient
     * @param params
     * @param params.address - the destination address
     * @param params.amount - the amount in satoshis/wei/base value to be sent
     * @param params.message - optional message to attach to transaction
     * @param params.data - [Ethereum Specific] optional data to pass to transaction
     * @param params.walletPassphrase - the passphrase to be used to decrypt the user key on this wallet
     * @param params.prv - the private key in string form, if walletPassphrase is not available
     * @param params.minConfirms - the minimum confirmation threshold for inputs
     * @param params.enforceMinConfirmsForChange - whether to enforce minConfirms for change inputs
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.send = function (params, callback) {
        if (params === void 0) { params = {}; }
        common.validateParams(params, ['address'], ['message', 'data'], callback);
        if (_.isUndefined(params.amount)) {
            throw new Error('missing required parameter amount');
        }
        if (_.isUndefined(params.address)) {
            throw new Error('missing required parameter amount');
        }
        var coin = this.baseCoin;
        var amount = new bignumber_js_1.BigNumber(params.amount);
        if (amount.isNegative()) {
            throw new Error('invalid argument for amount - positive number greater than zero or numeric string expected');
        }
        if (!coin.valuelessTransferAllowed() && amount.isZero()) {
            throw new Error('invalid argument for amount - positive number greater than zero or numeric string expected');
        }
        var recipients = [{
                address: params.address,
                amount: params.amount,
            }];
        if (params.data && coin.transactionDataAllowed()) {
            recipients[0].data = params.data;
        }
        var sendManyOptions = Object.assign({}, params, { recipients: recipients });
        return this.sendMany(sendManyOptions).nodeify(callback);
    };
    /**
     * Send money to multiple recipients
     * 1. Gets the user keychain by checking the wallet for a key which has an encrypted prv
     * 2. Decrypts user key
     * 3. Creates the transaction with default fee
     * 4. Signs transaction with decrypted user key
     * 5. Sends the transaction to BitGo
     * @param {object} params
     * @param {{address: string, amount: string}} params.recipients - list of recipients and necessary recipient information
     * @param {Number} params.numBlocks - Estimates the approximate fee per kilobyte necessary for a transaction confirmation within numBlocks blocks
     * @param {Number} params.feeRate - the desired feeRate for the transaction in satothis/kB
     * @param {Number} params.maxFeeRate - upper limit for feeRate in satoshis/kB
     * @param {Number} params.minConfirms - all selected unspents will have at least this many confirmations
     * @param {Boolean} params.enforceMinConfirmsForChange - Enforces minConfirms on change inputs
     * @param {Number} params.targetWalletUnspents - The desired count of unspents in the wallet
     * @param {String} params.message - optional message to attach to transaction
     * @param {Number} params.minValue - Ignore unspents smaller than this amount of satoshis
     * @param {Number} params.maxValue - Ignore unspents larger than this amount of satoshis
     * @param {Number} params.sequenceId - The sequence ID of the transaction
     * @param {Number} params.lastLedgerSequence - Absolute max ledger the transaction should be accepted in, whereafter it will be rejected.
     * @param {String} params.ledgerSequenceDelta - Relative ledger height (in relation to the current ledger) that the transaction should be accepted in, whereafter it will be rejected.
     * @param {Number} params.gasPrice - Custom gas price to be used for sending the transaction
     * @param {Boolean} params.noSplitChange - Set to true to disable automatic change splitting for purposes of unspent management
     * @param {Array} params.unspents - The unspents to use in the transaction. Each unspent should be in the form prevTxId:nOutput
     * @param {String} params.comment - Any additional comment to attach to the transaction
     * @param {String} params.otp - Two factor auth code to enable sending the transaction
     * @param {String} params.changeAddress - Specifies the destination of the change output
     * @param {Boolean} params.instant - Send this transaction using coin-specific instant sending method (if available)
     * @param {{value: String, type: String}} params.memo - Memo to use in transaction (supported by Stellar)
     * @param {String} params.type - Type of the transaction (e.g. trustline)
     * @param {{token: params, action: String, limit: String}[]} options.trustlines - Array of trustlines to manage (supported by Stellar)
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.sendMany = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var reqId, coin, halfSignedTransaction, selectParams, finalTxParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        common.validateParams(params, [], ['comment', 'otp'], callback);
                        debug('sendMany called');
                        reqId = params.reqId || new util_1.RequestTracer();
                        params.reqId = reqId;
                        coin = self.baseCoin;
                        if (_.isObject(params.recipients)) {
                            params.recipients.map(function (recipient) {
                                var amount = new bignumber_js_1.BigNumber(recipient.amount);
                                if (amount.isNegative()) {
                                    throw new Error('invalid argument for amount - positive number greater than zero or numeric string expected');
                                }
                                if (!coin.valuelessTransferAllowed() && amount.isZero()) {
                                    throw new Error('invalid argument for amount - positive number greater than zero or numeric string expected');
                                }
                            });
                        }
                        return [4 /*yield*/, self.prebuildAndSignTransaction(params)];
                    case 1:
                        halfSignedTransaction = _a.sent();
                        selectParams = _.pick(params, [
                            'recipients', 'numBlocks', 'feeRate', 'maxFeeRate', 'minConfirms',
                            'enforceMinConfirmsForChange', 'targetWalletUnspents',
                            'message', 'minValue', 'maxValue', 'sequenceId',
                            'lastLedgerSequence', 'ledgerSequenceDelta', 'gasPrice',
                            'noSplitChange', 'unspents', 'comment', 'otp', 'changeAddress',
                            'instant', 'memo', 'type', 'trustlines',
                        ]);
                        finalTxParams = _.extend({}, halfSignedTransaction, selectParams);
                        self.bitgo.setRequestTracer(reqId);
                        return [2 /*return*/, self.bitgo.post(self.url('/tx/send'))
                                .send(finalTxParams)
                                .result()];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Recover an unsupported token from a BitGo multisig wallet
     * params are validated in Eth.prototype.recoverToken
     * @param params
     * @param params.tokenContractAddress the contract address of the unsupported token
     * @param params.recipient the destination address recovered tokens should be sent to
     * @param params.walletPassphrase the wallet passphrase
     * @param params.prv the xprv
     * @param callback
     */
    Wallet.prototype.recoverToken = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var tokenContractAddress, recipient, recoverTokenOptions;
            return __generator(this, function (_a) {
                if (self.baseCoin.getFamily() !== 'eth') {
                    throw new Error('token recovery only supported for eth wallets');
                }
                tokenContractAddress = params.tokenContractAddress, recipient = params.recipient;
                if (_.isUndefined(tokenContractAddress)) {
                    throw new Error('missing required string parameter tokenContractAddress');
                }
                if (_.isUndefined(recipient)) {
                    throw new Error('missing required string parameter recipient');
                }
                recoverTokenOptions = Object.assign({ tokenContractAddress: tokenContractAddress, recipient: recipient }, params, { wallet: self });
                return [2 /*return*/, self.baseCoin.recoverToken(recoverTokenOptions)];
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Get transaction metadata for the oldest transaction that is still pending or attempted
     * @param params
     * @param callback
     * @returns {Object} Object with txid, walletId, tx, and fee (if supported for coin)
     */
    Wallet.prototype.getFirstPendingTransaction = function (params, callback) {
        if (params === void 0) { params = {}; }
        return internal.getFirstPendingTransaction({ walletId: this.id() }, this.baseCoin, this.bitgo).asCallback(callback);
    };
    /**
     * Change the fee on the pending transaction that corresponds to the given txid to the given new fee
     * @param params
     * @param {String} params.txid The transaction Id corresponding to the transaction whose fee is to be changed
     * @param {String} params.fee The new fee to apply to the denoted transaction
     * @param callback
     * @returns {String} The transaction ID of the new transaction that contains the new fee rate
     */
    Wallet.prototype.changeFee = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            return __generator(this, function (_a) {
                common.validateParams(params, ['txid', 'fee'], [], callback);
                return [2 /*return*/, self.bitgo.post(self.baseCoin.url('/wallet/' + self.id() + '/tx/changeFee'))
                        .send(params)
                        .result()];
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Fetch info from merchant server
     * @param {Object} params The params passed into the function
     * @param {String} params.url The Url to retrieve info from
     * @param callback
     * @returns {Object} The info returned from the merchant server
     * @deprecated
     */
    Wallet.prototype.getPaymentInfo = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function coGetPaymentInfo() {
            return __generator(this, function (_a) {
                params = params || {};
                common.validateParams(params, ['url'], [], callback);
                return [2 /*return*/, self.bitgo.get(self.url('/paymentInfo'))
                        .query(params)
                        .result()];
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Send json payment response
     * @param {Object} params The params passed into the function
     * @param {String} params.paymentUrl - The url to send the fully signed transaction to
     * @param {String} params.txHex - The transaction hex of the payment
     * @param {String} params.memo {String} - A memo supplied by the merchant, to be inserted into the transfer as the comment
     * @param {String} params.expires {String} - ISO Date format of when the payment request expires
     * @param callback
     * @returns {Object} The info returned from the merchant server Payment Ack
     * @deprecated
     */
    Wallet.prototype.sendPaymentResponse = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.bitgo.post(this.url('/sendPayment'))
            .send(params)
            .result()
            .asCallback(callback);
    };
    /**
     * Create a policy rule
     * @param params
     * @param params.condition condition object
     * @param params.action action object
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.createPolicyRule = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            return __generator(this, function (_a) {
                common.validateParams(params, ['id', 'type'], ['message'], callback);
                if (!_.isObject(params.condition)) {
                    throw new Error('missing parameter: conditions object');
                }
                if (!_.isObject(params.action)) {
                    throw new Error('missing parameter: action object');
                }
                return [2 /*return*/, self.bitgo.post(self.url('/policy/rule'))
                        .send(params)
                        .result()];
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Update a policy rule
     * @param params
     * @param params.condition condition object
     * @param params.action action object
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.setPolicyRule = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            return __generator(this, function (_a) {
                common.validateParams(params, ['id', 'type'], ['message'], callback);
                if (!_.isObject(params.condition)) {
                    throw new Error('missing parameter: conditions object');
                }
                if (!_.isObject(params.action)) {
                    throw new Error('missing parameter: action object');
                }
                return [2 /*return*/, self.bitgo.put(self.url('/policy/rule'))
                        .send(params)
                        .result()];
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Remove Policy Rule
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.removePolicyRule = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            return __generator(this, function (_a) {
                common.validateParams(params, ['id'], ['message'], callback);
                return [2 /*return*/, self.bitgo.del(self.url('/policy/rule'))
                        .send(params)
                        .result()];
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Remove this wallet
     * @param params
     * @param callback
     * @returns {*}
     */
    Wallet.prototype.remove = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.bitgo.del(this.url()).result().asCallback(callback);
    };
    /**
     * Create a trading account from this wallet
     */
    Wallet.prototype.toTradingAccount = function () {
        if (this.baseCoin.getFamily() !== 'ofc') {
            throw new Error('Can only convert an Offchain (OFC) wallet to a trading account');
        }
        return new tradingAccount_1.TradingAccount(this._wallet.enterprise, this, this.bitgo);
    };
    /**
     * Creates and downloads PDF keycard for wallet (requires response from wallets.generateWallet)
     *
     * Note: this is example code and is not the version used on bitgo.com
     *
     * @param params
     *   * jsPDF - an instance of the jsPDF library
     *   * QRCode - an instance of the QRious library
     *   * userKeychain - a wallet's private user keychain
     *   * backupKeychain - a wallet's private backup keychain
     *   * bitgoKeychain - a wallet's private bitgo keychain
     *   * passphrase - the wallet passphrase
     *   * passcodeEncryptionCode - the encryption secret used for Box D
     *   * activationCode - a randomly generated six-digit activation code
     *   * walletKeyID - the Key ID used for deriving a cold wallet's signing key
     *   * backupKeyID - the Key ID used for deriving a cold wallet's backup key
     * @returns {*}
     */
    Wallet.prototype.downloadKeycard = function (params) {
        if (params === void 0) { params = {}; }
        if (!window || !window.location) {
            throw new Error('The downloadKeycard function is only callable within a browser.');
        }
        // Grab parameters with default for activationCode
        var jsPDF = params.jsPDF, QRCode = params.QRCode, userKeychain = params.userKeychain, backupKeychain = params.backupKeychain, bitgoKeychain = params.bitgoKeychain, passphrase = params.passphrase, passcodeEncryptionCode = params.passcodeEncryptionCode, walletKeyID = params.walletKeyID, backupKeyID = params.backupKeyID, _a = params.activationCode, activationCode = _a === void 0 ? Math.floor(Math.random() * 900000 + 100000).toString() : _a;
        if (!jsPDF || typeof jsPDF !== 'function') {
            throw new Error('Please pass in a valid jsPDF instance');
        }
        // Validate keychains
        if (!userKeychain || typeof userKeychain !== 'object') {
            throw new Error("Wallet keychain must have a 'user' property");
        }
        if (!backupKeychain || typeof backupKeychain !== 'object') {
            throw new Error('Backup keychain is required and must be an object');
        }
        if (!bitgoKeychain || typeof bitgoKeychain !== 'object') {
            throw new Error('Bitgo keychain is required and must be an object');
        }
        if (walletKeyID && typeof walletKeyID !== 'string') {
            throw new Error('walletKeyID must be a string');
        }
        if (backupKeyID && typeof backupKeyID !== 'string') {
            throw new Error('backupKeyID must be a string');
        }
        // Validate activation code if provided
        if (typeof activationCode !== 'string') {
            throw new Error('Activation Code must be a string');
        }
        if (activationCode.length !== 6) {
            throw new Error('Activation code must be six characters');
        }
        var coinShortName = this.baseCoin.type;
        var coinName = this.baseCoin.getFullName();
        var walletLabel = this._wallet.label;
        var doc = keycard_1.drawKeycard({
            jsPDF: jsPDF,
            QRCode: QRCode,
            encrypt: this.bitgo.encrypt,
            coinShortName: coinShortName,
            coinName: coinName,
            activationCode: activationCode,
            walletLabel: walletLabel,
            passphrase: passphrase,
            passcodeEncryptionCode: passcodeEncryptionCode,
            userKeychain: userKeychain,
            backupKeychain: backupKeychain,
            bitgoKeychain: bitgoKeychain,
            walletKeyID: walletKeyID,
            backupKeyID: backupKeyID,
        });
        // Save the PDF on the user's browser
        doc.save("BitGo Keycard for " + walletLabel + ".pdf");
    };
    /**
     * Builds a set of consolidation transactions for a wallet.
     * @param params
     *     fromAddresses - these are the on-chain receive addresses we want to pick a consolidation amount from
     * @param callback
     */
    Wallet.prototype.buildAccountConsolidations = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var whitelistedParams, buildResponse, consolidations, _i, buildResponse_1, consolidateAccountBuild, prebuild;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!self.baseCoin.allowsAccountConsolidations()) {
                            throw new Error(self.baseCoin.getFullName() + " does not allow account consolidations.");
                        }
                        whitelistedParams = _.pick(params, self.prebuildConsolidateTransactionParams());
                        debug('prebuilding consolidation transaction: %O', whitelistedParams);
                        if (params.reqId) {
                            self.bitgo.setRequestTracer(params.reqId);
                        }
                        return [4 /*yield*/, self.bitgo.post(self.baseCoin.url('/wallet/' + self.id() + '/consolidateAccount/build'))
                                .send(whitelistedParams)
                                .result()];
                    case 1:
                        buildResponse = _a.sent();
                        consolidations = [];
                        _i = 0, buildResponse_1 = buildResponse;
                        _a.label = 2;
                    case 2:
                        if (!(_i < buildResponse_1.length)) return [3 /*break*/, 5];
                        consolidateAccountBuild = buildResponse_1[_i];
                        return [4 /*yield*/, self.baseCoin.postProcessPrebuild(Object.assign(consolidateAccountBuild, { wallet: self, buildParams: whitelistedParams }))];
                    case 3:
                        prebuild = _a.sent();
                        delete prebuild.wallet;
                        delete prebuild.buildParams;
                        prebuild = _.extend({}, prebuild, { walletId: self.id() });
                        debug('final consolidation transaction prebuild: %O', prebuild);
                        consolidations.push(prebuild);
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, consolidations];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Builds and sends a set of consolidation transactions for a wallet.
     * @param params
     *     fromAddresses - these are the on-chain receive addresses we want to pick a consolidation amount from
     */
    Wallet.prototype.sendAccountConsolidation = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var signedPrebuild;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!self.baseCoin.allowsAccountConsolidations()) {
                            throw new Error(self.baseCoin.getFullName() + " does not allow account consolidations.");
                        }
                        // one of a set of consolidation transactions
                        if (typeof params.prebuildTx === 'string' || params.prebuildTx === undefined) {
                            throw new Error('Invalid build of account consolidation.');
                        }
                        if (!params.prebuildTx.consolidateId) {
                            throw new Error('Failed to find consolidation id on consolidation transaction.');
                        }
                        return [4 /*yield*/, self.prebuildAndSignTransaction(params)];
                    case 1:
                        signedPrebuild = _a.sent();
                        // decorate with our consolidation id
                        signedPrebuild.consolidateId = params.prebuildTx.consolidateId;
                        delete signedPrebuild.wallet;
                        return [4 /*yield*/, self.submitTransaction(signedPrebuild)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Builds and sends a set of account consolidations. This is intended to flush many balances to the root wallet balance.
     * @param params
     * @param callback
     */
    Wallet.prototype.sendAccountConsolidations = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var unsignedBuilds, successfulTxs, failedTxs, _i, unsignedBuilds_1, unsignedBuild, unsignedBuildWithOptions, sendTx, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!self.baseCoin.allowsAccountConsolidations()) {
                            throw new Error(self.baseCoin.getFullName() + " does not allow account consolidations.");
                        }
                        return [4 /*yield*/, self.buildAccountConsolidations(params)];
                    case 1:
                        unsignedBuilds = _a.sent();
                        if (!(unsignedBuilds && unsignedBuilds.length > 0)) return [3 /*break*/, 8];
                        successfulTxs = [];
                        failedTxs = new Array();
                        _i = 0, unsignedBuilds_1 = unsignedBuilds;
                        _a.label = 2;
                    case 2:
                        if (!(_i < unsignedBuilds_1.length)) return [3 /*break*/, 7];
                        unsignedBuild = unsignedBuilds_1[_i];
                        unsignedBuildWithOptions = Object.assign({}, params);
                        unsignedBuildWithOptions.prebuildTx = unsignedBuild;
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, self.sendAccountConsolidation(unsignedBuildWithOptions)];
                    case 4:
                        sendTx = _a.sent();
                        successfulTxs.push(sendTx);
                        return [3 /*break*/, 6];
                    case 5:
                        e_3 = _a.sent();
                        failedTxs.push(e_3);
                        return [3 /*break*/, 6];
                    case 6:
                        _i++;
                        return [3 /*break*/, 2];
                    case 7: return [2 /*return*/, {
                            success: successfulTxs,
                            failure: failedTxs,
                        }];
                    case 8: return [2 /*return*/];
                }
            });
        }).call(this).asCallback(callback);
    };
    return Wallet;
}());
exports.Wallet = Wallet;
//# sourceMappingURL=data:application/json;base64,