"use strict";
/**
 * @prettier
 * @hidden
 */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 */
var Bluebird = require("bluebird");
var tradingPartner_1 = require("./tradingPartner");
var co = Bluebird.coroutine;
var TradingPartners = /** @class */ (function () {
    function TradingPartners(bitgo, enterpriseId, account) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.account = account;
    }
    /**
     * List all trading partners of your trading account. Your trading partners are the accounts you are allowed to settle with.
     * @param callback
     */
    TradingPartners.prototype.list = function (callback) {
        var self = this;
        return co(function list() {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/account/" + self.account.id + "/tradingpartners");
                        return [4 /*yield*/, self.bitgo.get(url).result()];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.tradingPartners.map(function (partner) { return new tradingPartner_1.TradingPartner(partner, self.bitgo, self.enterpriseId, self.account); })];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Refer a new trading partner to join the BitGo network and become your partner.
     * @param params
     * @param params.institutionName name of the institution to invite
     * @param params.contactName full name of a member of the institution to contact
     * @param params.contactEmail email address of the contact
     * @param params.contactPhoneNumber phone number of the contact
     * @param params.memo memo to send to the trading partner when sending the invite
     * @param callback
     */
    TradingPartners.prototype.refer = function (params, callback) {
        var self = this;
        return co(function refer() {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/account/" + self.account.id + "/tradingpartners/referrals");
                        return [4 /*yield*/, self.bitgo
                                .post(url)
                                .send(params)
                                .result()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, {}]; // TODO: return result of referral
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    return TradingPartners;
}());
exports.TradingPartners = TradingPartners;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGluZ1BhcnRuZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL3RyYWRpbmcvdHJhZGluZ1BhcnRuZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUg7R0FDRztBQUNILG1DQUFxQztBQUtyQyxtREFBa0Q7QUFFbEQsSUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztBQVU5QjtJQU1FLHlCQUFZLEtBQVksRUFBRSxZQUFvQixFQUFFLE9BQXVCO1FBQ3JFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCw4QkFBSSxHQUFKLFVBQUssUUFBeUM7UUFDNUMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxDQUFtQixTQUFVLElBQUk7Ozs7O3dCQUNsQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDckMsOEJBQTRCLElBQUksQ0FBQyxZQUFZLGlCQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxxQkFBa0IsQ0FDM0YsQ0FBQzt3QkFDZSxxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBQTs7d0JBQTdDLFFBQVEsR0FBRyxTQUFrQzt3QkFFbkQsc0JBQU8sUUFBUSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQ2pDLFVBQUEsT0FBTyxJQUFJLE9BQUEsSUFBSSwrQkFBYyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUF4RSxDQUF3RSxDQUNwRixFQUFDOzs7U0FDSCxDQUFDO2FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNWLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0gsK0JBQUssR0FBTCxVQUFNLE1BQXdDLEVBQUUsUUFBMkI7UUFDekUsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxDQUFLLFNBQVUsS0FBSzs7Ozs7d0JBQ3JCLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUNyQyw4QkFBNEIsSUFBSSxDQUFDLFlBQVksaUJBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLCtCQUE0QixDQUNyRyxDQUFDO3dCQUNGLHFCQUFNLElBQUksQ0FBQyxLQUFLO2lDQUNiLElBQUksQ0FBQyxHQUFHLENBQUM7aUNBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQztpQ0FDWixNQUFNLEVBQUUsRUFBQTs7d0JBSFgsU0FHVyxDQUFDO3dCQUVaLHNCQUFPLEVBQUUsRUFBQyxDQUFDLGtDQUFrQzs7O1NBQzlDLENBQUM7YUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQ1YsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUExREQsSUEwREM7QUExRFksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICogQGhpZGRlblxuICovXG5cbi8qKlxuICovXG5pbXBvcnQgKiBhcyBCbHVlYmlyZCBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBCaXRHbyB9IGZyb20gJy4uLy4uL2JpdGdvJztcblxuaW1wb3J0IHsgTm9kZUNhbGxiYWNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgVHJhZGluZ0FjY291bnQgfSBmcm9tICcuL3RyYWRpbmdBY2NvdW50JztcbmltcG9ydCB7IFRyYWRpbmdQYXJ0bmVyIH0gZnJvbSAnLi90cmFkaW5nUGFydG5lcic7XG5cbmNvbnN0IGNvID0gQmx1ZWJpcmQuY29yb3V0aW5lO1xuXG5pbnRlcmZhY2UgVHJhZGluZ1BhcnRuZXJSZWZlcnJhbFBhcmFtZXRlcnMge1xuICBpbnN0aXR1dGlvbk5hbWU6IHN0cmluZztcbiAgY29udGFjdE5hbWU6IHN0cmluZztcbiAgY29udGFjdEVtYWlsOiBzdHJpbmc7XG4gIGNvbnRhY3RQaG9uZU51bWJlcjogc3RyaW5nO1xuICBtZW1vOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBUcmFkaW5nUGFydG5lcnMge1xuICBwcml2YXRlIGJpdGdvOiBCaXRHbztcblxuICBwcml2YXRlIGVudGVycHJpc2VJZDogc3RyaW5nO1xuICBwcml2YXRlIGFjY291bnQ6IFRyYWRpbmdBY2NvdW50O1xuXG4gIGNvbnN0cnVjdG9yKGJpdGdvOiBCaXRHbywgZW50ZXJwcmlzZUlkOiBzdHJpbmcsIGFjY291bnQ6IFRyYWRpbmdBY2NvdW50KSB7XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuZW50ZXJwcmlzZUlkID0gZW50ZXJwcmlzZUlkO1xuICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBhbGwgdHJhZGluZyBwYXJ0bmVycyBvZiB5b3VyIHRyYWRpbmcgYWNjb3VudC4gWW91ciB0cmFkaW5nIHBhcnRuZXJzIGFyZSB0aGUgYWNjb3VudHMgeW91IGFyZSBhbGxvd2VkIHRvIHNldHRsZSB3aXRoLlxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIGxpc3QoY2FsbGJhY2s/OiBOb2RlQ2FsbGJhY2s8VHJhZGluZ1BhcnRuZXJbXT4pOiBCbHVlYmlyZDxUcmFkaW5nUGFydG5lcltdPiB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIGNvPFRyYWRpbmdQYXJ0bmVyW10+KGZ1bmN0aW9uKiBsaXN0KCkge1xuICAgICAgY29uc3QgdXJsID0gc2VsZi5iaXRnby5taWNyb3NlcnZpY2VzVXJsKFxuICAgICAgICBgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7c2VsZi5lbnRlcnByaXNlSWR9L2FjY291bnQvJHtzZWxmLmFjY291bnQuaWR9L3RyYWRpbmdwYXJ0bmVyc2BcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHNlbGYuYml0Z28uZ2V0KHVybCkucmVzdWx0KCk7XG5cbiAgICAgIHJldHVybiByZXNwb25zZS50cmFkaW5nUGFydG5lcnMubWFwKFxuICAgICAgICBwYXJ0bmVyID0+IG5ldyBUcmFkaW5nUGFydG5lcihwYXJ0bmVyLCBzZWxmLmJpdGdvLCBzZWxmLmVudGVycHJpc2VJZCwgc2VsZi5hY2NvdW50KVxuICAgICAgKTtcbiAgICB9KVxuICAgICAgLmNhbGwodGhpcylcbiAgICAgIC5hc0NhbGxiYWNrKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWZlciBhIG5ldyB0cmFkaW5nIHBhcnRuZXIgdG8gam9pbiB0aGUgQml0R28gbmV0d29yayBhbmQgYmVjb21lIHlvdXIgcGFydG5lci5cbiAgICogQHBhcmFtIHBhcmFtc1xuICAgKiBAcGFyYW0gcGFyYW1zLmluc3RpdHV0aW9uTmFtZSBuYW1lIG9mIHRoZSBpbnN0aXR1dGlvbiB0byBpbnZpdGVcbiAgICogQHBhcmFtIHBhcmFtcy5jb250YWN0TmFtZSBmdWxsIG5hbWUgb2YgYSBtZW1iZXIgb2YgdGhlIGluc3RpdHV0aW9uIHRvIGNvbnRhY3RcbiAgICogQHBhcmFtIHBhcmFtcy5jb250YWN0RW1haWwgZW1haWwgYWRkcmVzcyBvZiB0aGUgY29udGFjdFxuICAgKiBAcGFyYW0gcGFyYW1zLmNvbnRhY3RQaG9uZU51bWJlciBwaG9uZSBudW1iZXIgb2YgdGhlIGNvbnRhY3RcbiAgICogQHBhcmFtIHBhcmFtcy5tZW1vIG1lbW8gdG8gc2VuZCB0byB0aGUgdHJhZGluZyBwYXJ0bmVyIHdoZW4gc2VuZGluZyB0aGUgaW52aXRlXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgcmVmZXIocGFyYW1zOiBUcmFkaW5nUGFydG5lclJlZmVycmFsUGFyYW1ldGVycywgY2FsbGJhY2s/OiBOb2RlQ2FsbGJhY2s8e30+KTogQmx1ZWJpcmQ8e30+IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gY288e30+KGZ1bmN0aW9uKiByZWZlcigpIHtcbiAgICAgIGNvbnN0IHVybCA9IHNlbGYuYml0Z28ubWljcm9zZXJ2aWNlc1VybChcbiAgICAgICAgYC9hcGkvdHJhZGUvdjEvZW50ZXJwcmlzZS8ke3NlbGYuZW50ZXJwcmlzZUlkfS9hY2NvdW50LyR7c2VsZi5hY2NvdW50LmlkfS90cmFkaW5ncGFydG5lcnMvcmVmZXJyYWxzYFxuICAgICAgKTtcbiAgICAgIHlpZWxkIHNlbGYuYml0Z29cbiAgICAgICAgLnBvc3QodXJsKVxuICAgICAgICAuc2VuZChwYXJhbXMpXG4gICAgICAgIC5yZXN1bHQoKTtcblxuICAgICAgcmV0dXJuIHt9OyAvLyBUT0RPOiByZXR1cm4gcmVzdWx0IG9mIHJlZmVycmFsXG4gICAgfSlcbiAgICAgIC5jYWxsKHRoaXMpXG4gICAgICAuYXNDYWxsYmFjayhjYWxsYmFjayk7XG4gIH1cbn1cbiJdfQ==