"use strict";
/**
 * @prettier
 * @hidden
 */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 */
var bignumber_js_1 = require("bignumber.js");
var Bluebird = require("bluebird");
var tradingPartners_1 = require("./tradingPartners");
var affirmations_1 = require("./affirmations");
var settlements_1 = require("./settlements");
var co = Bluebird.coroutine;
var TRADE_PAYLOAD_VERSION = '1.1.1';
var TradingAccount = /** @class */ (function () {
    function TradingAccount(enterpriseId, wallet, bitgo) {
        this.enterpriseId = enterpriseId;
        this.wallet = wallet;
        this.bitgo = bitgo;
    }
    Object.defineProperty(TradingAccount.prototype, "id", {
        get: function () {
            return this.wallet.id();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Builds a payload authorizing a trade from this trading account. The currency and amount must be specified, as well as a list
     * of trade counterparties.
     * @param params
     * @param params.currency the currency this account will be sending as part of the trade
     * @param params.amount the amount of currency (in base units, such as cents, satoshis, or wei)
     * @param params.otherParties array of counterparties and reciprocal funds authorized to receive funds as part of this trade
     * @param callback
     * @returns unsigned trade payload for the given parameters. This object should be stringified with JSON.stringify() before being submitted
     */
    TradingAccount.prototype.buildPayload = function (params, callback) {
        return co(function buildTradePayload() {
            var url, body, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + this.enterpriseId + "/account/" + this.id + "/payload");
                        body = {
                            version: TRADE_PAYLOAD_VERSION,
                            currency: params.currency,
                            amount: params.amount,
                            otherParties: params.otherParties,
                        };
                        return [4 /*yield*/, this.bitgo
                                .post(url)
                                .send(body)
                                .result()];
                    case 1:
                        response = _a.sent();
                        if (!this.verifyPayload(params, response.payload)) {
                            throw new Error('Unable to verify trade payload. You may need to update the BitGo SDK, or the payload may have been tampered with.');
                        }
                        return [2 /*return*/, JSON.parse(response.payload)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Verifies that a payload received from BitGo sufficiently matches the expected parameters. This is used to prevent
     * man-in-the-middle attacks which could maliciously alter the contents of a payload.
     * @param params parameters used to build the payload
     * @param payload payload received from the BitGo API
     * @returns true if the payload's sensitive fields match, false if the payload may have been tampered with
     */
    TradingAccount.prototype.verifyPayload = function (params, payload) {
        var payloadObj = JSON.parse(payload);
        var paramsCopy = JSON.parse(JSON.stringify(params)); // needs to be a deep copy
        // Verifies that for each party in the payload, we requested a matching party, only checking sensitive fields
        var partiesMatch = true;
        var _loop_1 = function (party) {
            var matchingExpectedParty = paramsCopy.otherParties.findIndex(function (expectedParty) {
                return party.accountId === expectedParty.accountId &&
                    party.currency === expectedParty.currency &&
                    party.amount === expectedParty.amount;
            });
            if (matchingExpectedParty === -1) {
                partiesMatch = false;
                return "break";
            }
            // delete so we ensure no duplicates
            paramsCopy.otherParties.splice(matchingExpectedParty, 1);
        };
        for (var _i = 0, _a = payloadObj.otherParties; _i < _a.length; _i++) {
            var party = _a[_i];
            var state_1 = _loop_1(party);
            if (state_1 === "break")
                break;
        }
        // the amount field will change if fees are present, but subtotal should always equal the requested send amount
        var expectedAmount = params.amount;
        if (payloadObj.fees) {
            var totalFees = payloadObj.fees.reduce(function (fees, feeObj) { return fees.plus(feeObj.feeAmount); }, new bignumber_js_1.BigNumber(0));
            expectedAmount = new bignumber_js_1.BigNumber(payloadObj.subtotal).plus(totalFees).toString();
        }
        return (payloadObj.accountId === this.id &&
            payloadObj.currency === params.currency &&
            payloadObj.subtotal === params.amount &&
            payloadObj.amount === expectedAmount &&
            payloadObj.otherParties.length === params.otherParties.length &&
            partiesMatch);
    };
    /**
     * Calculates the necessary fees to complete a settlement between two parties, based on the amounts and currencies of the settlement.
     * @param params
     * @param params.counterpartyAccountId Account ID of the counterparty of the settlement
     * @param params.sendCurrency Currency to be sent as part of the settlement
     * @param params.sendAmount Amount of currency (in base units such as cents, satoshis, or wei) to be sent
     * @param params.receiveCurrency Currency to be received as part of the settlement
     * @param params.receiveAmount Amount of currency (in base units such as cents, satoshis, or wei) to be received
     * @param callback
     * @returns Fee rate, currency, and total amount of the described settlement
     */
    TradingAccount.prototype.calculateSettlementFees = function (params, callback) {
        var url = this.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + this.enterpriseId + "/account/" + this.id + "/calculatefees");
        return this.bitgo
            .post(url)
            .send(params)
            .result()
            .asCallback(callback);
    };
    /**
     * Signs a pre-built trade payload with the user key on this trading account
     * @param params
     * @param params.payload trade payload object from TradingAccount::buildPayload()
     * @param params.walletPassphrase passphrase on this trading account, used to unlock the account user key
     * @param callback
     * @returns hex-encoded signature of the payload
     */
    TradingAccount.prototype.signPayload = function (params, callback) {
        var self = this;
        return co(function signPayload() {
            var key, prv, payload;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.wallet.baseCoin.keychains().get({ id: self.wallet.keyIds()[0] })];
                    case 1:
                        key = _a.sent();
                        prv = self.wallet.bitgo.decrypt({
                            input: key.encryptedPrv,
                            password: params.walletPassphrase,
                        });
                        payload = JSON.stringify(params.payload);
                        return [2 /*return*/, self.wallet.baseCoin.signMessage({ prv: prv }, payload).toString('hex')];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    TradingAccount.prototype.affirmations = function () {
        return new affirmations_1.Affirmations(this.bitgo, this.enterpriseId, this);
    };
    TradingAccount.prototype.settlements = function () {
        return new settlements_1.Settlements(this.bitgo, this.enterpriseId, this);
    };
    TradingAccount.prototype.partners = function () {
        return new tradingPartners_1.TradingPartners(this.bitgo, this.enterpriseId, this);
    };
    return TradingAccount;
}());
exports.TradingAccount = TradingAccount;
//# sourceMappingURL=data:application/json;base64,