"use strict";
/**
 * Markets Object
 * BitGo accessor to Bitcoin market data.
 *
 * Copyright 2019, BitGo, Inc.  All Rights Reserved.
 *
 * @prettier
 */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Bluebird = require("bluebird");
var common_1 = require("../common");
var co = Bluebird.coroutine;
var Markets = /** @class */ (function () {
    function Markets(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    /**
     * Get the latest price data
     * @param params {}
     * @param callback
     * @returns {*} an object containing price and volume data from the
     * current day in a number of currencies
     **/
    Markets.prototype.latest = function (params, callback) {
        return this.bitgo
            .get(this.baseCoin.url('/market/latest'))
            .result()
            .asCallback(callback);
    };
    /**
     * Get yesterday's price data
     * @param params {}
     * @param callback
     * @returns {*} an object containing price and volume data from the
     * previous day in a number of currencies
     */
    Markets.prototype.yesterday = function (params, callback) {
        return this.bitgo
            .get(this.baseCoin.url('/market/yesterday'))
            .result()
            .asCallback(callback);
    };
    /**
     * Get price data from up to 90 days prior to today
     * @param params { currencyName: the code for the desired currency, for example USD }
     * @param callback
     * @returns {*} an object containing average prices from a number of previous days
     */
    Markets.prototype.lastDays = function (params, callback) {
        var self = this;
        return co(function () {
            var days;
            return __generator(this, function (_a) {
                common_1.validateParams(params, ['currencyName'], []);
                days = params.days && !isNaN(parseInt(params.days, 10)) ? parseInt(params.days, 10) : 90;
                if (days && days < 0) {
                    throw new Error('must use a non-negative number of days');
                }
                return [2 /*return*/, self.bitgo.get(self.baseCoin.url('/market/last/' + days + '/' + params.currencyName)).result()];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    return Markets;
}());
exports.Markets = Markets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92Mi9tYXJrZXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7OztHQU9HOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVILG1DQUFxQztBQUdyQyxvQ0FBMkM7QUFJM0MsSUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztBQWU5QjtJQUlFLGlCQUFtQixLQUFZLEVBQUUsUUFBa0I7UUFDakQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7Ozs7UUFNSTtJQUNKLHdCQUFNLEdBQU4sVUFBTyxNQUFxQixFQUFFLFFBQTJCO1FBQ3ZELE9BQU8sSUFBSSxDQUFDLEtBQUs7YUFDZCxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUN4QyxNQUFNLEVBQUU7YUFDUixVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILDJCQUFTLEdBQVQsVUFBVSxNQUF3QixFQUFFLFFBQTJCO1FBQzdELE9BQU8sSUFBSSxDQUFDLEtBQUs7YUFDZCxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQzthQUMzQyxNQUFNLEVBQUU7YUFDUixVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsMEJBQVEsR0FBUixVQUFTLE1BQXVCLEVBQUUsUUFBMkI7UUFDM0QsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxDQUFDOzs7Z0JBQ1IsdUJBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFFdkMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFFL0YsSUFBSSxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRTtvQkFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO2lCQUMzRDtnQkFFRCxzQkFBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBQzs7U0FDdkcsQ0FBQzthQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDVixVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBM0RELElBMkRDO0FBM0RZLDBCQUFPIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYXJrZXRzIE9iamVjdFxuICogQml0R28gYWNjZXNzb3IgdG8gQml0Y29pbiBtYXJrZXQgZGF0YS5cbiAqXG4gKiBDb3B5cmlnaHQgMjAxOSwgQml0R28sIEluYy4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQHByZXR0aWVyXG4gKi9cblxuaW1wb3J0ICogYXMgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgQml0R28gfSBmcm9tICcuLi9iaXRnbyc7XG5cbmltcG9ydCB7IHZhbGlkYXRlUGFyYW1zIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IEJhc2VDb2luIH0gZnJvbSAnLi9iYXNlQ29pbic7XG5pbXBvcnQgeyBOb2RlQ2FsbGJhY2sgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgY28gPSBCbHVlYmlyZC5jb3JvdXRpbmU7XG5cbi8vIFRPRE8gKFNES1QtOSk6IHJldmVyc2UgZW5naW5lZXIgYW5kIGFkZCBvcHRpb25zXG4vLyBleHBvcnQgaW50ZXJmYWNlIExhdGVzdE9wdGlvbnMge31cbmV4cG9ydCB0eXBlIExhdGVzdE9wdGlvbnMgPSBhbnk7XG5cbi8vIFRPRE8gKFNES1QtOSk6IHJldmVyc2UgZW5naW5lZXIgYW5kIGFkZCBvcHRpb25zXG4vLyBleHBvcnQgaW50ZXJmYWNlIFllc3RlcmRheU9wdGlvbnMge31cbmV4cG9ydCB0eXBlIFllc3RlcmRheU9wdGlvbnMgPSBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGFzdERheXNPcHRpb25zIHtcbiAgY3VycmVuY3lOYW1lOiBzdHJpbmc7XG4gIGRheXM/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBNYXJrZXRzIHtcbiAgcHJpdmF0ZSByZWFkb25seSBiaXRnbzogQml0R287XG4gIHByaXZhdGUgcmVhZG9ubHkgYmFzZUNvaW46IEJhc2VDb2luO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihiaXRnbzogQml0R28sIGJhc2VDb2luOiBCYXNlQ29pbikge1xuICAgIHRoaXMuYml0Z28gPSBiaXRnbztcbiAgICB0aGlzLmJhc2VDb2luID0gYmFzZUNvaW47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsYXRlc3QgcHJpY2UgZGF0YVxuICAgKiBAcGFyYW0gcGFyYW1zIHt9XG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKiBAcmV0dXJucyB7Kn0gYW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJpY2UgYW5kIHZvbHVtZSBkYXRhIGZyb20gdGhlXG4gICAqIGN1cnJlbnQgZGF5IGluIGEgbnVtYmVyIG9mIGN1cnJlbmNpZXNcbiAgICoqL1xuICBsYXRlc3QocGFyYW1zOiBMYXRlc3RPcHRpb25zLCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPGFueT4pOiBCbHVlYmlyZDxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5iaXRnb1xuICAgICAgLmdldCh0aGlzLmJhc2VDb2luLnVybCgnL21hcmtldC9sYXRlc3QnKSlcbiAgICAgIC5yZXN1bHQoKVxuICAgICAgLmFzQ2FsbGJhY2soY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB5ZXN0ZXJkYXkncyBwcmljZSBkYXRhXG4gICAqIEBwYXJhbSBwYXJhbXMge31cbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqIEByZXR1cm5zIHsqfSBhbiBvYmplY3QgY29udGFpbmluZyBwcmljZSBhbmQgdm9sdW1lIGRhdGEgZnJvbSB0aGVcbiAgICogcHJldmlvdXMgZGF5IGluIGEgbnVtYmVyIG9mIGN1cnJlbmNpZXNcbiAgICovXG4gIHllc3RlcmRheShwYXJhbXM6IFllc3RlcmRheU9wdGlvbnMsIGNhbGxiYWNrOiBOb2RlQ2FsbGJhY2s8YW55Pik6IEJsdWViaXJkPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmJpdGdvXG4gICAgICAuZ2V0KHRoaXMuYmFzZUNvaW4udXJsKCcvbWFya2V0L3llc3RlcmRheScpKVxuICAgICAgLnJlc3VsdCgpXG4gICAgICAuYXNDYWxsYmFjayhjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHByaWNlIGRhdGEgZnJvbSB1cCB0byA5MCBkYXlzIHByaW9yIHRvIHRvZGF5XG4gICAqIEBwYXJhbSBwYXJhbXMgeyBjdXJyZW5jeU5hbWU6IHRoZSBjb2RlIGZvciB0aGUgZGVzaXJlZCBjdXJyZW5jeSwgZm9yIGV4YW1wbGUgVVNEIH1cbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqIEByZXR1cm5zIHsqfSBhbiBvYmplY3QgY29udGFpbmluZyBhdmVyYWdlIHByaWNlcyBmcm9tIGEgbnVtYmVyIG9mIHByZXZpb3VzIGRheXNcbiAgICovXG4gIGxhc3REYXlzKHBhcmFtczogTGFzdERheXNPcHRpb25zLCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPGFueT4pOiBCbHVlYmlyZDxhbnk+IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gY28oZnVuY3Rpb24qKCkge1xuICAgICAgdmFsaWRhdGVQYXJhbXMocGFyYW1zLCBbJ2N1cnJlbmN5TmFtZSddLCBbXSk7XG5cbiAgICAgIGNvbnN0IGRheXMgPSBwYXJhbXMuZGF5cyAmJiAhaXNOYU4ocGFyc2VJbnQocGFyYW1zLmRheXMsIDEwKSkgPyBwYXJzZUludChwYXJhbXMuZGF5cywgMTApIDogOTA7XG5cbiAgICAgIGlmIChkYXlzICYmIGRheXMgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbXVzdCB1c2UgYSBub24tbmVnYXRpdmUgbnVtYmVyIG9mIGRheXMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuYml0Z28uZ2V0KHNlbGYuYmFzZUNvaW4udXJsKCcvbWFya2V0L2xhc3QvJyArIGRheXMgKyAnLycgKyBwYXJhbXMuY3VycmVuY3lOYW1lKSkucmVzdWx0KCk7XG4gICAgfSlcbiAgICAgIC5jYWxsKHRoaXMpXG4gICAgICAuYXNDYWxsYmFjayhjYWxsYmFjayk7XG4gIH1cbn1cbiJdfQ==