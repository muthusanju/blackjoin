"use strict";
/**
 * User webhook handler for v2 coins and tokens
 *
 * @prettier
 */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var Bluebird = require("bluebird");
var common_1 = require("../common");
var co = Bluebird.coroutine;
var Webhooks = /** @class */ (function () {
    function Webhooks(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    /**
     * Fetch list of user webhooks
     *
     * @param callback
     * @returns {*}
     */
    Webhooks.prototype.list = function (callback) {
        return this.bitgo
            .get(this.baseCoin.url('/webhooks'))
            .result()
            .nodeify(callback);
    };
    /**
     * Add new user webhook
     *
     * @param params
     * @param callback
     * @returns {*}
     */
    Webhooks.prototype.add = function (params, callback) {
        var self = this;
        return co(function () {
            return __generator(this, function (_a) {
                common_1.validateParams(params, ['url', 'type'], [], callback);
                return [2 /*return*/, self.bitgo
                        .post(self.baseCoin.url('/webhooks'))
                        .send(params)
                        .result()];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Remove user webhook
     *
     * @param params
     * @param callback
     * @returns {*}
     */
    Webhooks.prototype.remove = function (params, callback) {
        var self = this;
        return co(function () {
            return __generator(this, function (_a) {
                common_1.validateParams(params, ['url', 'type'], [], callback);
                return [2 /*return*/, self.bitgo
                        .del(self.baseCoin.url('/webhooks'))
                        .send(params)
                        .result()];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Fetch list of webhook notifications for the user
     *
     * @param params
     * @param callback
     * @returns {*}
     */
    Webhooks.prototype.listNotifications = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var queryProperties, query;
            return __generator(this, function (_a) {
                queryProperties = [];
                if (params.prevId) {
                    if (!_.isString(params.prevId)) {
                        throw new Error('invalid prevId argument, expecting string');
                    }
                    queryProperties.push('prevId');
                }
                if (params.limit) {
                    if (!_.isNumber(params.limit)) {
                        throw new Error('invalid limit argument, expecting number');
                    }
                    queryProperties.push('limit');
                }
                query = _.pick(params, queryProperties);
                return [2 /*return*/, self.bitgo
                        .get(self.baseCoin.url('/webhooks/notifications'))
                        .query(query)
                        .result()];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Simulate a user webhook
     *
     * @param params
     * @param callback
     * @returns {*}
     */
    Webhooks.prototype.simulate = function (params, callback) {
        var self = this;
        return co(function () {
            var webhookId;
            return __generator(this, function (_a) {
                common_1.validateParams(params, ['webhookId', 'blockId'], [], callback);
                webhookId = params.webhookId;
                return [2 /*return*/, self.bitgo
                        .post(self.baseCoin.url('/webhooks/' + webhookId + '/simulate'))
                        .send(params)
                        .result()];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    return Webhooks;
}());
exports.Webhooks = Webhooks;
//# sourceMappingURL=data:application/json;base64,