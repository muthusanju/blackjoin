"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var Bluebird = require("bluebird");
var _ = require("lodash");
var enterprise_1 = require("./enterprise");
var co = Bluebird.coroutine;
var Enterprises = /** @class */ (function () {
    function Enterprises(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    /**
     * List all enterprises available to the current user
     * @param params unused
     * @param callback
     */
    Enterprises.prototype.list = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.bitgo.get(self.bitgo.url('/enterprise')).result()];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.enterprises.map(function (e) {
                                // instantiate a new object for each enterprise
                                return new enterprise_1.Enterprise(self.bitgo, self.baseCoin, e);
                            })];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Fetch an enterprise from BitGo
     * @param params
     * @param callback
     */
    Enterprises.prototype.get = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var enterpriseId, enterpriseData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        enterpriseId = params.id;
                        if (_.isUndefined(enterpriseId)) {
                            throw new Error('id must not be empty');
                        }
                        if (!_.isString(enterpriseId)) {
                            throw new Error('id must be hexadecimal enterprise ID');
                        }
                        return [4 /*yield*/, self.bitgo.get(self.bitgo.url("/enterprise/" + enterpriseId)).result()];
                    case 1:
                        enterpriseData = _a.sent();
                        return [2 /*return*/, new enterprise_1.Enterprise(self.bitgo, self.baseCoin, enterpriseData)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Create a new enterprise
     * @param params
     * @param callback
     */
    // TODO: (CT-686) Flesh out params object with valid enterprise creation parameters
    Enterprises.prototype.create = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var enterpriseData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.bitgo
                            .post(self.bitgo.url("/enterprise"))
                            .send(params)
                            .result()];
                    case 1:
                        enterpriseData = _a.sent();
                        return [2 /*return*/, new enterprise_1.Enterprise(self.bitgo, self.baseCoin, enterpriseData)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    return Enterprises;
}());
exports.Enterprises = Enterprises;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50ZXJwcmlzZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdjIvZW50ZXJwcmlzZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7R0FFRztBQUNILG1DQUFxQztBQUNyQywwQkFBNEI7QUFJNUIsMkNBQTBDO0FBRzFDLElBQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUM7QUFNOUI7SUFJRSxxQkFBWSxLQUFZLEVBQUUsUUFBa0I7UUFDMUMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSwwQkFBSSxHQUFYLFVBQVksTUFBZSxFQUFFLFFBQXFDO1FBQXRELHVCQUFBLEVBQUEsV0FBZTtRQUN6QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEIsT0FBTyxFQUFFLENBQWU7Ozs7NEJBQ0wscUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBQTs7d0JBQXZFLFFBQVEsR0FBRyxTQUE0RDt3QkFDN0Usc0JBQU8sUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO2dDQUMvQiwrQ0FBK0M7Z0NBQy9DLE9BQU8sSUFBSSx1QkFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQzs0QkFDdEQsQ0FBQyxDQUFDLEVBQUM7OztTQUNKLENBQUM7YUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQ1YsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0kseUJBQUcsR0FBVixVQUFXLE1BQWlDLEVBQUUsUUFBbUM7UUFBdEUsdUJBQUEsRUFBQSxXQUFpQztRQUMxQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEIsT0FBTyxFQUFFLENBQWE7Ozs7O3dCQUNkLFlBQVksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO3dCQUMvQixJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEVBQUU7NEJBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQzt5QkFDekM7d0JBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7NEJBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQzt5QkFDekQ7d0JBRXNCLHFCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGlCQUFlLFlBQWMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUE7O3dCQUE3RixjQUFjLEdBQUcsU0FBNEU7d0JBQ25HLHNCQUFPLElBQUksdUJBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLEVBQUM7OztTQUNsRSxDQUFDO2FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNWLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILG1GQUFtRjtJQUM1RSw0QkFBTSxHQUFiLFVBQWMsTUFBZ0IsRUFBRSxRQUFtQztRQUFyRCx1QkFBQSxFQUFBLFdBQWdCO1FBQzVCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixPQUFPLEVBQUUsQ0FBYTs7Ozs0QkFDRyxxQkFBTSxJQUFJLENBQUMsS0FBSzs2QkFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDOzZCQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDOzZCQUNaLE1BQU0sRUFBRSxFQUFBOzt3QkFITCxjQUFjLEdBQUcsU0FHWjt3QkFDWCxzQkFBTyxJQUFJLHVCQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxFQUFDOzs7U0FDbEUsQ0FBQzthQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDVixVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQXBFRCxJQW9FQztBQXBFWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKi9cbmltcG9ydCAqIGFzIEJsdWViaXJkIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vYml0Z28nO1xuXG5pbXBvcnQgeyBCYXNlQ29pbiB9IGZyb20gJy4vYmFzZUNvaW4nO1xuaW1wb3J0IHsgRW50ZXJwcmlzZSB9IGZyb20gJy4vZW50ZXJwcmlzZSc7XG5pbXBvcnQgeyBOb2RlQ2FsbGJhY2sgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgY28gPSBCbHVlYmlyZC5jb3JvdXRpbmU7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0RW50ZXJwcmlzZU9wdGlvbnMge1xuICBpZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEVudGVycHJpc2VzIHtcbiAgcHJpdmF0ZSByZWFkb25seSBiaXRnbzogQml0R287XG4gIHByaXZhdGUgcmVhZG9ubHkgYmFzZUNvaW46IEJhc2VDb2luO1xuXG4gIGNvbnN0cnVjdG9yKGJpdGdvOiBCaXRHbywgYmFzZUNvaW46IEJhc2VDb2luKSB7XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuYmFzZUNvaW4gPSBiYXNlQ29pbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IGFsbCBlbnRlcnByaXNlcyBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgdXNlclxuICAgKiBAcGFyYW0gcGFyYW1zIHVudXNlZFxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIHB1YmxpYyBsaXN0KHBhcmFtczoge30gPSB7fSwgY2FsbGJhY2s/OiBOb2RlQ2FsbGJhY2s8RW50ZXJwcmlzZVtdPik6IEJsdWViaXJkPEVudGVycHJpc2VbXT4ge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBjbzxFbnRlcnByaXNlW10+KGZ1bmN0aW9uKigpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgc2VsZi5iaXRnby5nZXQoc2VsZi5iaXRnby51cmwoJy9lbnRlcnByaXNlJykpLnJlc3VsdCgpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmVudGVycHJpc2VzLm1hcChlID0+IHtcbiAgICAgICAgLy8gaW5zdGFudGlhdGUgYSBuZXcgb2JqZWN0IGZvciBlYWNoIGVudGVycHJpc2VcbiAgICAgICAgcmV0dXJuIG5ldyBFbnRlcnByaXNlKHNlbGYuYml0Z28sIHNlbGYuYmFzZUNvaW4sIGUpO1xuICAgICAgfSk7XG4gICAgfSlcbiAgICAgIC5jYWxsKHRoaXMpXG4gICAgICAuYXNDYWxsYmFjayhjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYW4gZW50ZXJwcmlzZSBmcm9tIEJpdEdvXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBwdWJsaWMgZ2V0KHBhcmFtczogR2V0RW50ZXJwcmlzZU9wdGlvbnMgPSB7fSwgY2FsbGJhY2s/OiBOb2RlQ2FsbGJhY2s8RW50ZXJwcmlzZT4pOiBCbHVlYmlyZDxFbnRlcnByaXNlPiB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIGNvPEVudGVycHJpc2U+KGZ1bmN0aW9uKigpIHtcbiAgICAgIGNvbnN0IGVudGVycHJpc2VJZCA9IHBhcmFtcy5pZDtcbiAgICAgIGlmIChfLmlzVW5kZWZpbmVkKGVudGVycHJpc2VJZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZCBtdXN0IG5vdCBiZSBlbXB0eScpO1xuICAgICAgfVxuICAgICAgaWYgKCFfLmlzU3RyaW5nKGVudGVycHJpc2VJZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZCBtdXN0IGJlIGhleGFkZWNpbWFsIGVudGVycHJpc2UgSUQnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZW50ZXJwcmlzZURhdGEgPSB5aWVsZCBzZWxmLmJpdGdvLmdldChzZWxmLmJpdGdvLnVybChgL2VudGVycHJpc2UvJHtlbnRlcnByaXNlSWR9YCkpLnJlc3VsdCgpO1xuICAgICAgcmV0dXJuIG5ldyBFbnRlcnByaXNlKHNlbGYuYml0Z28sIHNlbGYuYmFzZUNvaW4sIGVudGVycHJpc2VEYXRhKTtcbiAgICB9KVxuICAgICAgLmNhbGwodGhpcylcbiAgICAgIC5hc0NhbGxiYWNrKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgZW50ZXJwcmlzZVxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgLy8gVE9ETzogKENULTY4NikgRmxlc2ggb3V0IHBhcmFtcyBvYmplY3Qgd2l0aCB2YWxpZCBlbnRlcnByaXNlIGNyZWF0aW9uIHBhcmFtZXRlcnNcbiAgcHVibGljIGNyZWF0ZShwYXJhbXM6IGFueSA9IHt9LCBjYWxsYmFjaz86IE5vZGVDYWxsYmFjazxFbnRlcnByaXNlPik6IEJsdWViaXJkPEVudGVycHJpc2U+IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gY288RW50ZXJwcmlzZT4oZnVuY3Rpb24qKCkge1xuICAgICAgY29uc3QgZW50ZXJwcmlzZURhdGEgPSB5aWVsZCBzZWxmLmJpdGdvXG4gICAgICAgIC5wb3N0KHNlbGYuYml0Z28udXJsKGAvZW50ZXJwcmlzZWApKVxuICAgICAgICAuc2VuZChwYXJhbXMpXG4gICAgICAgIC5yZXN1bHQoKTtcbiAgICAgIHJldHVybiBuZXcgRW50ZXJwcmlzZShzZWxmLmJpdGdvLCBzZWxmLmJhc2VDb2luLCBlbnRlcnByaXNlRGF0YSk7XG4gICAgfSlcbiAgICAgIC5jYWxsKHRoaXMpXG4gICAgICAuYXNDYWxsYmFjayhjYWxsYmFjayk7XG4gIH1cbn1cbiJdfQ==