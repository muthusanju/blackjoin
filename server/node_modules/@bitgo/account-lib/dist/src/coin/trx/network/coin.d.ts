import { BaseCoin } from "../../baseCoin";
import BigNumber from "bignumber.js";
import { Transaction } from '../transaction';
import { TransactionReceipt } from '../iface';
import { Key } from '../key';
import { Address } from '../address';
import { BaseKey } from '../../baseCoin/iface';
import { BaseCoin as CoinConfig } from "@bitgo/statics";
export declare class TrxBase implements BaseCoin {
    private _coinConfig;
    protected constructor(_coinConfig: Readonly<CoinConfig>);
    buildTransaction(transaction: Transaction): Transaction;
    /**
     * Helper function for parsing a transaction's raw_data field.
     * @param rawDataHex Raw data field encoded as hex in tron.proto
     */
    private createRawTransaction;
    /**
     * Helper function for parsing a transaction.
     * @param rawTransaction Transaction from the node
     */
    private createTransactionReceipt;
    /**
     * Extends transaction's expiration date by the given number of milliseconds
     * @param transaction The transaction to update
     * @param extensionMs The number of milliseconds to extend the expiration by
     */
    extendTransaction(transaction: Transaction, extensionMs: number): Transaction;
    /**
     * Parse transaction takes in raw JSON directly from the node.
     * @param rawTransaction The Tron transaction in JSON format as returned by the Tron lib or a
     *     stringifyed version of such JSON.
     */
    parseTransaction(rawTransaction: TransactionReceipt | string): Transaction;
    sign(privateKey: Key, transaction: Transaction): Transaction;
    /**
     * Validates a passed value. This is TRX units.
     */
    validateValue(value: BigNumber): void;
    validateAddress(address: Address): void;
    validateKey(key: BaseKey): boolean;
    displayName(): string;
}
