/// <reference types="node" />
import { TransferContract, RawData, AccountPermissionUpdateContract, Account, TransactionReceipt } from './iface';
/**
 * Tron-specific helper functions
 */
export declare type TronBinaryLike = ByteArray | Buffer | Uint8Array | string;
export declare type ByteArray = number[];
/**
 * Generate a Tron account offline using known bitcoin libraries
 * @param seed Optional random seed
 * @return {Account}
 */
export declare function generateAccount(seed?: Buffer): Account;
export declare function isBase58Address(address: string): boolean;
export declare function getByteArrayFromHexAddress(str: string): ByteArray;
export declare function getHexAddressFromByteArray(arr: ByteArray): string;
export declare function verifySignature(messageToVerify: string, base58Address: string, sigHex: string, useTronHeader?: boolean): ByteArray;
export declare function getHexAddressFromBase58Address(base58: string): string;
export declare function getPubKeyFromPriKey(privateKey: TronBinaryLike): ByteArray;
export declare function getAddressFromPriKey(privateKey: TronBinaryLike): ByteArray;
export declare function getBase58AddressFromByteArray(address: ByteArray): string;
export declare function getBase58AddressFromHex(hex: string): string;
export declare function signTransaction(privateKey: string | ByteArray, transaction: TransactionReceipt): TransactionReceipt;
export declare function signString(message: string, privateKey: string | ByteArray, useTronHeader?: boolean): string;
export declare function getRawAddressFromPubKey(pubBytes: ByteArray | string): ByteArray;
/**
 * Decodes a hex encoded transaction in its protobuf representation.
 * @param hexString raw_data_hex field from tron transactions
 */
export declare function decodeTransaction(hexString: string): RawData;
/**
 * Decodes a transaction's raw field from a base64 encoded string. This is a protobuf representation.
 * @param hexString this is the raw hexadecimal encoded string. Doc found in the following link.
 * @example
 * @see {@link https://github.com/BitGo/bitgo-account-lib/blob/5f282588701778a4421c75fa61f42713f56e95b9/resources/trx/protobuf/tron.proto#L319}
 */
export declare function decodeRawTransaction(hexString: string): {
    expiration: number;
    timestamp: number;
    contracts: Array<any>;
};
/**
 * Indicates whether the passed string is a safe hex string for tron's purposes.
 * @param hex A valid hex string must be a string made of numbers and characters and has an even length.
 */
export declare function isValidHex(hex: string): Boolean;
/** Deserialize the segment of the txHex which corresponds with the details of the transfer
 * @param transferHex is the value property of the "parameter" field of contractList[0]
 * */
export declare function decodeTransferContract(transferHex: string): TransferContract[];
/**
 * Deserialize the segment of the txHex corresponding with the details of the contract which updates
 * account permission
 * @param {string} base64
 * @returns {AccountPermissionUpdateContract}
 */
export declare function decodeAccountPermissionUpdateContract(base64: string): AccountPermissionUpdateContract;
