import { TransactionReceipt } from "./iface";
import { BaseCoin as CoinConfig } from "@bitgo/statics";
import { BaseTransaction } from "../../transaction";
import { BaseKey } from "../baseCoin/iface";
export declare class Transaction extends BaseTransaction {
    private _decodedRawDataHex;
    private _transaction?;
    constructor(coinConfig: Readonly<CoinConfig>, rawTransaction?: TransactionReceipt);
    /**
     * Parse the transaction raw data and record the most important fields.
     * @param rawData Object from a tron transaction
     */
    private recordRawDataFields;
    /**
     * Updates the txid of this transaction after a protobuf update
     * Every time protobuf is updated, we need to update the txid
     */
    private updateTxid;
    /**
     * Extends this transaction's expiration date by the given number of milliseconds
     * @param extensionMs The number of milliseconds to extend the expiration by
     */
    extendExpiration(extensionMs: number): void;
    /**
     * Tron transaction do not contain the owners account address so it is not possible to check the
     * private key with any but the account main address. This is not enough to fail this check, so it
     * is a no-op.
     */
    canSign(key: BaseKey): boolean;
    toJson(): TransactionReceipt;
}
