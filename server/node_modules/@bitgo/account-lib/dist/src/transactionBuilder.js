"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var coinFactory_1 = require("./coinFactory");
var errors_1 = require("./coin/baseCoin/errors");
/**
 * Generic transaction builder.
 */
var TransactionBuilder = /** @class */ (function () {
    /**
     * Public constructor. It will initialize the correct builder based on the coin.
     *
     * @param options
     */
    function TransactionBuilder(options) {
        this.coin = coinFactory_1.CoinFactory.getCoin(options.coinName);
    }
    /**
     * Build a transaction based on existing data. The input format will depend on the coin, and it
     * could be hex, base64, JSON, etc.
     * @param rawTransaction
     */
    TransactionBuilder.prototype.from = function (rawTransaction) {
        this.transaction = this.coin.parseTransaction(rawTransaction);
    };
    /**
     * Signs the transaction in our builder.
     * @param key one of the keys associated with this transaction
     */
    TransactionBuilder.prototype.sign = function (key) {
        // Make sure the key is valid
        this.coin.validateKey(key);
        if (!this.transaction.canSign(key)) {
            throw new errors_1.SigningError('Private key cannot sign the transaction');
        }
        this.transaction = this.coin.sign(key, this.transaction);
    };
    /**
     * Finalize the transaction by performing any extra step like calculating hashes, verifying
     * integrity, or adding default values.
     * @return transaction object
     */
    TransactionBuilder.prototype.build = function () {
        this.transaction = this.coin.buildTransaction(this.transaction);
        return this.transaction;
    };
    /**
     * Extend the validity of this transaction by the given amount of time
     * @param extensionMs The number of milliseconds to extend the validTo time
     */
    TransactionBuilder.prototype.extendValidTo = function (extensionMs) {
        this.transaction = this.coin.extendTransaction(this.transaction, extensionMs);
    };
    return TransactionBuilder;
}());
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=transactionBuilder.js.map