import { BaseKey } from "./coin/baseCoin/iface";
import { BaseTransaction } from "./transaction";
export interface TransactionBuilderParams {
    coinName: string;
}
/**
 * Generic transaction builder.
 */
export declare class TransactionBuilder {
    private transaction;
    private coin;
    /**
     * Public constructor. It will initialize the correct builder based on the coin.
     *
     * @param options
     */
    constructor(options: TransactionBuilderParams);
    /**
     * Build a transaction based on existing data. The input format will depend on the coin, and it
     * could be hex, base64, JSON, etc.
     * @param rawTransaction
     */
    from(rawTransaction: any): void;
    /**
     * Signs the transaction in our builder.
     * @param key one of the keys associated with this transaction
     */
    sign(key: BaseKey): void;
    /**
     * Finalize the transaction by performing any extra step like calculating hashes, verifying
     * integrity, or adding default values.
     * @return transaction object
     */
    build(): BaseTransaction;
    /**
     * Extend the validity of this transaction by the given amount of time
     * @param extensionMs The number of milliseconds to extend the validTo time
     */
    extendValidTo(extensionMs: number): void;
}
