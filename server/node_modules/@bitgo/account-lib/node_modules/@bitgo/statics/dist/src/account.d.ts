import { BaseCoin, CoinFeature, UnderlyingAsset } from './base';
import { AccountNetwork } from './networks';
export interface AccountConstructorOptions {
    fullName: string;
    name: string;
    network: AccountNetwork;
    asset: UnderlyingAsset;
    features: CoinFeature[];
    decimalPlaces: number;
    isToken: boolean;
    prefix?: string;
    suffix?: string;
}
/**
 * Account based coins, such as Ethereum, Stellar, or XRP.
 *
 * These types of coins maintain an "account balance" for each address on the network,
 * as opposed to the unspent transaction output model which maintains a record of all
 * "pieces" of coin which belong to an address.
 */
export declare class AccountCoin extends BaseCoin {
    static readonly DEFAULT_FEATURES: CoinFeature[];
    readonly network: AccountNetwork;
    constructor(options: AccountConstructorOptions);
    protected requiredFeatures(): Set<CoinFeature>;
    protected disallowedFeatures(): Set<CoinFeature>;
}
export interface Erc20ConstructorOptions extends AccountConstructorOptions {
    contractAddress: string;
}
export interface StellarCoinConstructorOptions extends AccountConstructorOptions {
    domain: string;
}
export interface ContractAddress extends String {
    __contractaddress_phantom__: never;
}
export declare class AccountCoinToken extends AccountCoin {
    constructor(options: AccountConstructorOptions);
}
/**
 * ERC 20 is a token standard for the Ethereum blockchain. They are similar to other account coins, but have a
 * contract address property which identifies the smart contract which defines the token.
 */
export declare class Erc20Coin extends AccountCoinToken {
    contractAddress: ContractAddress;
    constructor(options: Erc20ConstructorOptions);
}
/**
 * The Stellar network supports tokens (non-native assets)
 * XLM is also known as the native asset.
 * Stellar tokens work similar to XLM, but the token name is determined by the chain,
 * the token code and the issuer account in the form: (t)xlm:<token>-<issuer>
 */
export declare class StellarCoin extends AccountCoinToken {
    domain: string;
    constructor(options: StellarCoinConstructorOptions);
}
/**
 * Factory function for account coin instances.
 *
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function account(name: string, fullName: string, network: AccountNetwork, decimalPlaces: number, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, isToken?: boolean): Readonly<AccountCoin>;
/**
 * Factory function for erc20 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Ethereum main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function erc20(name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork): Readonly<Erc20Coin>;
/**
 * Factory function for testnet erc20 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the Kovan test network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function terc20(name: string, fullName: string, decimalPlaces: number, contractAddress: string, asset: UnderlyingAsset, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork): Readonly<Erc20Coin>;
/**
 * Factory function for Stellar token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param domain Domain of the token issuer (used to access token information from the issuer's stellar.toml file)
 * See https://www.stellar.org/developers/guides/concepts/stellar-toml.html
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Stellar mainnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function stellarToken(name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, domain?: string, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork): Readonly<StellarCoin>;
/**
 * Factory function for testnet Stellar token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param domain Domain of the token issuer (used to access token information from the issuer's stellar.toml file)
 * See https://www.stellar.org/developers/guides/concepts/stellar-toml.html
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Stellar testnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
export declare function tstellarToken(name: string, fullName: string, decimalPlaces: number, asset: UnderlyingAsset, domain?: string, features?: CoinFeature[], prefix?: string, suffix?: string, network?: AccountNetwork): Readonly<StellarCoin>;
//# sourceMappingURL=account.d.ts.map