import { CoinFamily } from './base';
export declare const enum NetworkType {
    MAINNET = "mainnet",
    TESTNET = "testnet"
}
export declare abstract class BaseNetwork {
    abstract readonly type: NetworkType;
    abstract readonly family: CoinFamily;
    abstract readonly explorerUrl: string | undefined;
}
export interface UtxoNetwork extends BaseNetwork {
    messagePrefix: string;
    bech32?: string;
    bip32: {
        public: number;
        private: number;
    };
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
}
export interface AccountNetwork extends BaseNetwork {
}
export interface OfcNetwork extends BaseNetwork {
}
declare abstract class Mainnet extends BaseNetwork {
    type: NetworkType;
}
declare abstract class Testnet extends BaseNetwork {
    type: NetworkType;
}
/**
 * Mainnet abstract class for Bitcoin forks. These are the constants from the Bitcoin main network,
 * which are overridden to various degrees by each Bitcoin fork.
 *
 * This allows us to not redefine these properties for forks which haven't changed them from Bitcoin.
 *
 * However, if a coin network has changed one of these properties, and you accidentally forget to override,
 * you'll inherit the incorrect values from the Bitcoin network. Be wary, and double check your network constant
 * overrides to ensure you're not missing any changes.
 */
declare abstract class BitcoinLikeMainnet extends Mainnet implements UtxoNetwork {
    messagePrefix: string;
    bip32: {
        public: number;
        private: number;
    };
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
    type: NetworkType;
}
/**
 * Testnet abstract class for Bitcoin forks. Works exactly the same as `BitcoinLikeMainnet`,
 * except the constants are taken from the Bitcoin test network.
 */
declare abstract class BitcoinLikeTestnet extends Testnet implements UtxoNetwork {
    messagePrefix: string;
    bip32: {
        public: number;
        private: number;
    };
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
    type: NetworkType;
}
declare class Algorand extends Mainnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class AlgorandTestnet extends Testnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class Bitcoin extends BitcoinLikeMainnet {
    family: CoinFamily;
    explorerUrl: string;
    bech32: string;
}
declare class BitcoinTestnet extends BitcoinLikeTestnet {
    family: CoinFamily;
    explorerUrl: string;
    bech32: string;
}
declare class BitcoinCash extends BitcoinLikeMainnet {
    family: CoinFamily;
    explorerUrl: string;
}
declare class BitcoinCashTestnet extends BitcoinLikeTestnet {
    family: CoinFamily;
    explorerUrl: string;
}
declare class BitcoinSV extends BitcoinLikeMainnet {
    family: CoinFamily;
    explorerUrl: string;
}
declare class BitcoinSVTestnet extends BitcoinLikeTestnet {
    family: CoinFamily;
    explorerUrl: string;
}
declare class BitcoinGold extends BitcoinLikeMainnet {
    messagePrefix: string;
    bech32: string;
    pubKeyHash: number;
    scriptHash: number;
    family: CoinFamily;
    explorerUrl: string;
}
declare class Dash extends BitcoinLikeMainnet {
    messagePrefix: string;
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
    family: CoinFamily;
    explorerUrl: string;
}
declare class DashTestnet extends BitcoinLikeTestnet {
    messagePrefix: string;
    bip32: {
        public: number;
        private: number;
    };
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
    family: CoinFamily;
    explorerUrl: string;
}
declare class Ethereum extends Mainnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class Kovan extends Testnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class Eos extends Mainnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class EosTestnet extends Testnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class Litecoin extends BitcoinLikeMainnet {
    messagePrefix: string;
    bech32: string;
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
    family: CoinFamily;
    explorerUrl: string;
}
declare class LitecoinTestnet extends BitcoinLikeTestnet {
    messagePrefix: string;
    bech32: string;
    bip32: {
        public: number;
        private: number;
    };
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
    family: CoinFamily;
    explorerUrl: string;
}
declare class Ofc extends Mainnet implements OfcNetwork {
    family: CoinFamily;
    explorerUrl: undefined;
}
declare class OfcTestnet extends Testnet implements OfcNetwork {
    family: CoinFamily;
    explorerUrl: undefined;
}
declare class Stellar extends Mainnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class StellarTestnet extends Testnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class SUSD extends Mainnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: undefined;
}
declare class SUSDTestnet extends Testnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: undefined;
}
declare class Trx extends Mainnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class TrxTestnet extends Testnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class Xrp extends Mainnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class XrpTestnet extends Testnet implements AccountNetwork {
    family: CoinFamily;
    explorerUrl: string;
}
declare class ZCash extends BitcoinLikeMainnet {
    messagePrefix: string;
    pubKeyHash: number;
    scriptHash: number;
    family: CoinFamily;
    explorerUrl: string;
}
declare class ZCashTestnet extends BitcoinLikeTestnet {
    messagePrefix: string;
    pubKeyHash: number;
    scriptHash: number;
    family: CoinFamily;
    explorerUrl: string;
}
export declare const Networks: {
    main: {
        algorand: Readonly<Algorand>;
        bitcoin: Readonly<Bitcoin>;
        bitcoinCash: Readonly<BitcoinCash>;
        bitcoinGold: Readonly<BitcoinGold>;
        bitcoinSV: Readonly<BitcoinSV>;
        dash: Readonly<Dash>;
        eos: Readonly<Eos>;
        ethereum: Readonly<Ethereum>;
        litecoin: Readonly<Litecoin>;
        ofc: Readonly<Ofc>;
        stellar: Readonly<Stellar>;
        susd: Readonly<SUSD>;
        trx: Readonly<Trx>;
        xrp: Readonly<Xrp>;
        zCash: Readonly<ZCash>;
    };
    test: {
        algorand: Readonly<AlgorandTestnet>;
        bitcoin: Readonly<BitcoinTestnet>;
        bitcoinCash: Readonly<BitcoinCashTestnet>;
        bitcoinSV: Readonly<BitcoinSVTestnet>;
        dash: Readonly<DashTestnet>;
        eos: Readonly<EosTestnet>;
        kovan: Readonly<Kovan>;
        litecoin: Readonly<LitecoinTestnet>;
        ofc: Readonly<OfcTestnet>;
        stellar: Readonly<StellarTestnet>;
        susd: Readonly<SUSDTestnet>;
        trx: Readonly<TrxTestnet>;
        xrp: Readonly<XrpTestnet>;
        zCash: Readonly<ZCashTestnet>;
    };
};
export {};
//# sourceMappingURL=networks.d.ts.map