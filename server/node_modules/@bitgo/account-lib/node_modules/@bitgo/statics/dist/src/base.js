"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("./errors");
var BaseCoin = /** @class */ (function () {
    function BaseCoin(options) {
        this.validateOptions(options);
        this.fullName = options.fullName;
        this.name = options.name;
        this.prefix = options.prefix;
        this.suffix = options.suffix;
        this.kind = options.kind;
        this.family = options.network.family;
        this.isToken = options.isToken;
        this.features = options.features;
        this.decimalPlaces = options.decimalPlaces;
        this.asset = options.asset;
        this.network = options.network;
    }
    /**
     * Ensures that the base coin constructor was passed a valid set of options.
     *
     * This includes checking that:
     * - All coin features of the new instance are allowed by the coin class
     * - No features required by the coin class are missing from the new instance
     * @param {BaseCoinConstructorOptions} options
     * @throws {DisallowedCoinFeatureError} if any of the coin features are not allowed for the coin class
     * @throws {MissingRequiredCoinFeatureError} if any features required by the coin class are missing
     */
    BaseCoin.prototype.validateOptions = function (options) {
        var requiredFeatures = this.requiredFeatures();
        var disallowedFeatures = this.disallowedFeatures();
        var intersectionFeatures = Array.from(requiredFeatures).filter(function (feat) { return disallowedFeatures.has(feat); });
        if (intersectionFeatures.length > 0) {
            throw new errors_1.ConflictingCoinFeaturesError(options.name, intersectionFeatures);
        }
        for (var _i = 0, _a = options.features; _i < _a.length; _i++) {
            var feature = _a[_i];
            if (disallowedFeatures.has(feature)) {
                throw new errors_1.DisallowedCoinFeatureError(options.name, feature);
            }
            if (requiredFeatures.has(feature)) {
                requiredFeatures.delete(feature);
            }
        }
        if (requiredFeatures.size > 0) {
            // some required features were missing
            throw new errors_1.MissingRequiredCoinFeatureError(options.name, Array.from(requiredFeatures));
        }
    };
    return BaseCoin;
}());
exports.BaseCoin = BaseCoin;
//# sourceMappingURL=data:application/json;base64,